
6_Axis_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800ca98  0800ca98  0001ca98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d154  0800d154  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d15c  0800d15c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800d164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004d70  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ddc  20004ddc  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020e13  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046e6  00000000  00000000  00040ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b70  00000000  00000000  000455d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001558  00000000  00000000  00047148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024b4d  00000000  00000000  000486a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ffb2  00000000  00000000  0006d1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd040  00000000  00000000  0008d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c80  00000000  00000000  0016a1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00171e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca80 	.word	0x0800ca80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800ca80 	.word	0x0800ca80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:
 *      Author: KkangJun
 */

#include "at24cxx.h"

int _write(int file, char *p, int len) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e009      	b.n	8000600 <_write+0x26>
		ITM_SendChar((*p++));
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc9 	bl	800058c <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf1      	blt.n	80005ec <_write+0x12>
	}
	return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <AT24Write>:

void AT24Write(uint8_t mem_addr, uint8_t *pData, uint8_t size) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af04      	add	r7, sp, #16
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000624:	bf00      	nop
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <AT24Write+0x58>)
 8000628:	f003 fd21 	bl	800406e <HAL_I2C_GetState>
 800062c:	4603      	mov	r3, r0
 800062e:	2b20      	cmp	r3, #32
 8000630:	d1f9      	bne.n	8000626 <AT24Write+0x12>

	uint8_t error;
	error = HAL_I2C_Mem_Write(&hi2c1, AT24CXX_ADDR, mem_addr,
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	b29a      	uxth	r2, r3
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	b29b      	uxth	r3, r3
 800063a:	210a      	movs	r1, #10
 800063c:	9102      	str	r1, [sp, #8]
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	21a0      	movs	r1, #160	; 0xa0
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <AT24Write+0x58>)
 800064a:	f002 ff81 	bl	8003550 <HAL_I2C_Mem_Write>
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, pData, size, 10);

	printf("write: 0x%x\r\n", error);
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <AT24Write+0x5c>)
 8000658:	f00b fade 	bl	800bc18 <iprintf>
	osDelay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f007 fbbd 	bl	8007ddc <osDelay>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000b0 	.word	0x200000b0
 8000670:	0800ca98 	.word	0x0800ca98

08000674 <AT24Read>:

void AT24Read(uint8_t mem_addr, uint8_t *pData, uint8_t size) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
	uint8_t error;
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000684:	bf00      	nop
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <AT24Read+0x58>)
 8000688:	f003 fcf1 	bl	800406e <HAL_I2C_GetState>
 800068c:	4603      	mov	r3, r0
 800068e:	2b20      	cmp	r3, #32
 8000690:	d1f9      	bne.n	8000686 <AT24Read+0x12>

	error = HAL_I2C_Mem_Read(&hi2c1, AT24CXX_ADDR, mem_addr,
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	b29a      	uxth	r2, r3
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	b29b      	uxth	r3, r3
 800069a:	210a      	movs	r1, #10
 800069c:	9102      	str	r1, [sp, #8]
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	21a0      	movs	r1, #160	; 0xa0
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <AT24Read+0x58>)
 80006aa:	f003 f84b 	bl	8003744 <HAL_I2C_Mem_Read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, pData, size, 10);

	printf("read: 0x%x\r\n", error);
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <AT24Read+0x5c>)
 80006b8:	f00b faae 	bl	800bc18 <iprintf>
	osDelay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f007 fb8d 	bl	8007ddc <osDelay>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000b0 	.word	0x200000b0
 80006d0:	0800caa8 	.word	0x0800caa8

080006d4 <DF2301QGetCMDID>:
 *      Author: KkangJun
 */

#include "df2301q.h"

void DF2301QGetCMDID() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af02      	add	r7, sp, #8
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY) {
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <DF2301QGetCMDID+0x2c>)
 80006dc:	f003 fcc7 	bl	800406e <HAL_I2C_GetState>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b20      	cmp	r3, #32
 80006e4:	d109      	bne.n	80006fa <DF2301QGetCMDID+0x26>
		HAL_I2C_Mem_Read_IT(&hi2c1, DF2301Q_I2C_ADDR, 0x02,
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <DF2301QGetCMDID+0x30>)
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	2202      	movs	r2, #2
 80006f2:	21c8      	movs	r1, #200	; 0xc8
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <DF2301QGetCMDID+0x2c>)
 80006f6:	f003 fa4b 	bl	8003b90 <HAL_I2C_Mem_Read_IT>
				I2C_MEMADD_SIZE_8BIT, &i2c1_rx, 1);
	}
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b0 	.word	0x200000b0
 8000704:	200001c9 	.word	0x200001c9

08000708 <DF2301QSetMuteMode>:
	HAL_I2C_Mem_Write(&hi2c1, DF2301Q_I2C_ADDR, 0x05, I2C_MEMADD_SIZE_8BIT,
			&data, 1, 10);
	osDelay(2);
}

void DF2301QSetMuteMode(uint8_t mode) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af04      	add	r7, sp, #16
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* Mute ON: mode = 1, Mute OFF: mode 0*/
	if (mode != 0) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <DF2301QSetMuteMode+0x14>
		mode = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data = mode;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DF2301Q_I2C_ADDR, 0x04, I2C_MEMADD_SIZE_8BIT,
 8000720:	230a      	movs	r3, #10
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f107 030f 	add.w	r3, r7, #15
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2204      	movs	r2, #4
 8000732:	21c8      	movs	r1, #200	; 0xc8
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <DF2301QSetMuteMode+0x40>)
 8000736:	f002 ff0b 	bl	8003550 <HAL_I2C_Mem_Write>
			&data, 1, 10);
	osDelay(2);
 800073a:	2002      	movs	r0, #2
 800073c:	f007 fb4e 	bl	8007ddc <osDelay>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000b0 	.word	0x200000b0

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f001 fec6 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f8e0 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 fa00 	bl	8000b5c <MX_GPIO_Init>
  MX_CAN2_Init();
 800075c:	f000 f946 	bl	80009ec <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8000760:	f000 f9a8 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000764:	f000 f978 	bl	8000a58 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000768:	f000 f9ce 	bl	8000b08 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	// Boot delay
	HAL_Delay(2000);
 800076c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000770:	f001 fef8 	bl	8002564 <HAL_Delay>

	HAL_UART_Receive_IT(&huart2, &uart2_rx, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	4942      	ldr	r1, [pc, #264]	; (8000880 <main+0x134>)
 8000778:	4842      	ldr	r0, [pc, #264]	; (8000884 <main+0x138>)
 800077a:	f006 fa77 	bl	8006c6c <HAL_UART_Receive_IT>
	InitCANFilter();
 800077e:	f001 f9c5 	bl	8001b0c <InitCANFilter>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000782:	f007 fa4f 	bl	8007c24 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of bSem_BLE */
  bSem_BLEHandle = osSemaphoreNew(1, 1, &bSem_BLE_attributes);
 8000786:	4a40      	ldr	r2, [pc, #256]	; (8000888 <main+0x13c>)
 8000788:	2101      	movs	r1, #1
 800078a:	2001      	movs	r0, #1
 800078c:	f007 fc17 	bl	8007fbe <osSemaphoreNew>
 8000790:	4603      	mov	r3, r0
 8000792:	4a3e      	ldr	r2, [pc, #248]	; (800088c <main+0x140>)
 8000794:	6013      	str	r3, [r2, #0]

  /* creation of bSem_Voice */
  bSem_VoiceHandle = osSemaphoreNew(1, 1, &bSem_Voice_attributes);
 8000796:	4a3e      	ldr	r2, [pc, #248]	; (8000890 <main+0x144>)
 8000798:	2101      	movs	r1, #1
 800079a:	2001      	movs	r0, #1
 800079c:	f007 fc0f 	bl	8007fbe <osSemaphoreNew>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a3c      	ldr	r2, [pc, #240]	; (8000894 <main+0x148>)
 80007a4:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ble_IT */
  ble_ITHandle = osMessageQueueNew (5, sizeof(bleData), &ble_IT_attributes);
 80007a6:	4a3c      	ldr	r2, [pc, #240]	; (8000898 <main+0x14c>)
 80007a8:	211d      	movs	r1, #29
 80007aa:	2005      	movs	r0, #5
 80007ac:	f007 fd26 	bl	80081fc <osMessageQueueNew>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a3a      	ldr	r2, [pc, #232]	; (800089c <main+0x150>)
 80007b4:	6013      	str	r3, [r2, #0]

  /* creation of voice_IT */
  voice_ITHandle = osMessageQueueNew (5, sizeof(uint8_t), &voice_IT_attributes);
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <main+0x154>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	2005      	movs	r0, #5
 80007bc:	f007 fd1e 	bl	80081fc <osMessageQueueNew>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a38      	ldr	r2, [pc, #224]	; (80008a4 <main+0x158>)
 80007c4:	6013      	str	r3, [r2, #0]

  /* creation of pos_data */
  pos_dataHandle = osMessageQueueNew (5, sizeof(posData), &pos_data_attributes);
 80007c6:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <main+0x15c>)
 80007c8:	211c      	movs	r1, #28
 80007ca:	2005      	movs	r0, #5
 80007cc:	f007 fd16 	bl	80081fc <osMessageQueueNew>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a36      	ldr	r2, [pc, #216]	; (80008ac <main+0x160>)
 80007d4:	6013      	str	r3, [r2, #0]

  /* creation of voice_data */
  voice_dataHandle = osMessageQueueNew (5, sizeof(uint8_t), &voice_data_attributes);
 80007d6:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <main+0x164>)
 80007d8:	2101      	movs	r1, #1
 80007da:	2005      	movs	r0, #5
 80007dc:	f007 fd0e 	bl	80081fc <osMessageQueueNew>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a34      	ldr	r2, [pc, #208]	; (80008b4 <main+0x168>)
 80007e4:	6013      	str	r3, [r2, #0]

  /* creation of pos_single */
  pos_singleHandle = osMessageQueueNew (5, sizeof(posSingleData), &pos_single_attributes);
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <main+0x16c>)
 80007e8:	2104      	movs	r1, #4
 80007ea:	2005      	movs	r0, #5
 80007ec:	f007 fd06 	bl	80081fc <osMessageQueueNew>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <main+0x170>)
 80007f4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007f6:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <main+0x174>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4832      	ldr	r0, [pc, #200]	; (80008c4 <main+0x178>)
 80007fc:	f007 fa5c 	bl	8007cb8 <osThreadNew>
 8000800:	4603      	mov	r3, r0
 8000802:	4a31      	ldr	r2, [pc, #196]	; (80008c8 <main+0x17c>)
 8000804:	6013      	str	r3, [r2, #0]

  /* creation of Task_VIT */
  Task_VITHandle = osThreadNew(VoiceInterrupt, NULL, &Task_VIT_attributes);
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <main+0x180>)
 8000808:	2100      	movs	r1, #0
 800080a:	4831      	ldr	r0, [pc, #196]	; (80008d0 <main+0x184>)
 800080c:	f007 fa54 	bl	8007cb8 <osThreadNew>
 8000810:	4603      	mov	r3, r0
 8000812:	4a30      	ldr	r2, [pc, #192]	; (80008d4 <main+0x188>)
 8000814:	6013      	str	r3, [r2, #0]

  /* creation of Task_Motor */
  Task_MotorHandle = osThreadNew(Motor, NULL, &Task_Motor_attributes);
 8000816:	4a30      	ldr	r2, [pc, #192]	; (80008d8 <main+0x18c>)
 8000818:	2100      	movs	r1, #0
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <main+0x190>)
 800081c:	f007 fa4c 	bl	8007cb8 <osThreadNew>
 8000820:	4603      	mov	r3, r0
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <main+0x194>)
 8000824:	6013      	str	r3, [r2, #0]

  /* creation of Task_Data */
  Task_DataHandle = osThreadNew(DataParse, NULL, &Task_Data_attributes);
 8000826:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <main+0x198>)
 8000828:	2100      	movs	r1, #0
 800082a:	482f      	ldr	r0, [pc, #188]	; (80008e8 <main+0x19c>)
 800082c:	f007 fa44 	bl	8007cb8 <osThreadNew>
 8000830:	4603      	mov	r3, r0
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <main+0x1a0>)
 8000834:	6013      	str	r3, [r2, #0]

  /* creation of Task_GetCMD */
  Task_GetCMDHandle = osThreadNew(GetVoiceCmd, NULL, &Task_GetCMD_attributes);
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <main+0x1a4>)
 8000838:	2100      	movs	r1, #0
 800083a:	482e      	ldr	r0, [pc, #184]	; (80008f4 <main+0x1a8>)
 800083c:	f007 fa3c 	bl	8007cb8 <osThreadNew>
 8000840:	4603      	mov	r3, r0
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <main+0x1ac>)
 8000844:	6013      	str	r3, [r2, #0]

  /* creation of Task_BLE */
  Task_BLEHandle = osThreadNew(BLEInterrupt, NULL, &Task_BLE_attributes);
 8000846:	4a2d      	ldr	r2, [pc, #180]	; (80008fc <main+0x1b0>)
 8000848:	2100      	movs	r1, #0
 800084a:	482d      	ldr	r0, [pc, #180]	; (8000900 <main+0x1b4>)
 800084c:	f007 fa34 	bl	8007cb8 <osThreadNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <main+0x1b8>)
 8000854:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of cmdFlag */
  cmdFlagHandle = osEventFlagsNew(&cmdFlag_attributes);
 8000856:	482c      	ldr	r0, [pc, #176]	; (8000908 <main+0x1bc>)
 8000858:	f007 fadb 	bl	8007e12 <osEventFlagsNew>
 800085c:	4603      	mov	r3, r0
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <main+0x1c0>)
 8000860:	6013      	str	r3, [r2, #0]

  /* creation of i2cFlag */
  i2cFlagHandle = osEventFlagsNew(&i2cFlag_attributes);
 8000862:	482b      	ldr	r0, [pc, #172]	; (8000910 <main+0x1c4>)
 8000864:	f007 fad5 	bl	8007e12 <osEventFlagsNew>
 8000868:	4603      	mov	r3, r0
 800086a:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <main+0x1c8>)
 800086c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	osEventFlagsSet(cmdFlagHandle, ROBOT_INIT_FLAG);
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <main+0x1c0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f007 fb0b 	bl	8007e90 <osEventFlagsSet>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f007 f9f7 	bl	8007c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800087e:	e7fe      	b.n	800087e <main+0x132>
 8000880:	200001c8 	.word	0x200001c8
 8000884:	20000104 	.word	0x20000104
 8000888:	0800cfc8 	.word	0x0800cfc8
 800088c:	200001b8 	.word	0x200001b8
 8000890:	0800cfd8 	.word	0x0800cfd8
 8000894:	200001bc 	.word	0x200001bc
 8000898:	0800cf50 	.word	0x0800cf50
 800089c:	200001a4 	.word	0x200001a4
 80008a0:	0800cf68 	.word	0x0800cf68
 80008a4:	200001a8 	.word	0x200001a8
 80008a8:	0800cf80 	.word	0x0800cf80
 80008ac:	200001ac 	.word	0x200001ac
 80008b0:	0800cf98 	.word	0x0800cf98
 80008b4:	200001b0 	.word	0x200001b0
 80008b8:	0800cfb0 	.word	0x0800cfb0
 80008bc:	200001b4 	.word	0x200001b4
 80008c0:	0800ce78 	.word	0x0800ce78
 80008c4:	08000f35 	.word	0x08000f35
 80008c8:	2000018c 	.word	0x2000018c
 80008cc:	0800ce9c 	.word	0x0800ce9c
 80008d0:	08000f45 	.word	0x08000f45
 80008d4:	20000190 	.word	0x20000190
 80008d8:	0800cec0 	.word	0x0800cec0
 80008dc:	08000fb5 	.word	0x08000fb5
 80008e0:	20000194 	.word	0x20000194
 80008e4:	0800cee4 	.word	0x0800cee4
 80008e8:	080013f5 	.word	0x080013f5
 80008ec:	20000198 	.word	0x20000198
 80008f0:	0800cf08 	.word	0x0800cf08
 80008f4:	08001835 	.word	0x08001835
 80008f8:	2000019c 	.word	0x2000019c
 80008fc:	0800cf2c 	.word	0x0800cf2c
 8000900:	08001849 	.word	0x08001849
 8000904:	200001a0 	.word	0x200001a0
 8000908:	0800cfe8 	.word	0x0800cfe8
 800090c:	200001c0 	.word	0x200001c0
 8000910:	0800cff8 	.word	0x0800cff8
 8000914:	200001c4 	.word	0x200001c4

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00b fabc 	bl	800bea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	; (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800098c:	23a8      	movs	r3, #168	; 0xa8
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f005 f8b9 	bl	8005b14 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a8:	f001 f8aa 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2105      	movs	r1, #5
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fb1a 	bl	8006004 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d6:	f001 f893 	bl	8001b00 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	; 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_CAN2_Init+0x64>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <MX_CAN2_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_CAN2_Init+0x64>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_CAN2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a0e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a12:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a16:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_CAN2_Init+0x64>)
 8000a3e:	f001 fdb5 	bl	80025ac <HAL_CAN_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000a48:	f001 f85a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000088 	.word	0x20000088
 8000a54:	40006800 	.word	0x40006800

08000a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_I2C1_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_I2C1_Init+0x50>)
 8000a96:	f002 fc17 	bl	80032c8 <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f001 f82e 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000b0 	.word	0x200000b0
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	000186a0 	.word	0x000186a0

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f005 ff8a 	bl	8006a04 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f001 f803 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000104 	.word	0x20000104
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART3_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b40:	f005 ffad 	bl	8006a9e <HAL_HalfDuplex_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 ffd9 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000148 	.word	0x20000148
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_GPIO_Init+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0xbc>)
 8000bea:	f002 fb53 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8000bee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0xbc>)
 8000c08:	f002 f9a8 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Bluetooth data Receive
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_UART_RxCpltCallback+0x24>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d104      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(bSem_BLEHandle);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_UART_RxCpltCallback+0x28>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f007 fa9e 	bl	8008174 <osSemaphoreRelease>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004400 	.word	0x40004400
 8000c44:	200001b8 	.word	0x200001b8

08000c48 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_I2C_MemRxCpltCallback+0x24>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d104      	bne.n	8000c64 <HAL_I2C_MemRxCpltCallback+0x1c>
		osSemaphoreRelease(bSem_VoiceHandle);
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 fa88 	bl	8008174 <osSemaphoreRelease>
	}
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	200001bc 	.word	0x200001bc

08000c74 <PosSetDataParsing>:

void PosSetDataParsing(bleData *p, posData *data) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	data->pos1 = (int32_t) (strtoul(p->pos1, NULL, 10) - MG4005_ID1_OFFSET);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3305      	adds	r3, #5
 8000c82:	220a      	movs	r2, #10
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fefa 	bl	800ba80 <strtoul>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	3bb4      	subs	r3, #180	; 0xb4
 8000c90:	461a      	mov	r2, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	605a      	str	r2, [r3, #4]
	data->pos2 = (int32_t) strtoul(p->pos2, NULL, 10);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3309      	adds	r3, #9
 8000c9a:	220a      	movs	r2, #10
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a feee 	bl	800ba80 <strtoul>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	609a      	str	r2, [r3, #8]
	data->pos3 = (int32_t) strtoul(p->pos3, NULL, 10);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	330d      	adds	r3, #13
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00a fee3 	bl	800ba80 <strtoul>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	60da      	str	r2, [r3, #12]
	data->pos4 = (int32_t) strtoul(p->pos4, NULL, 10);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3311      	adds	r3, #17
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00a fed8 	bl	800ba80 <strtoul>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	611a      	str	r2, [r3, #16]
	data->pos5 = (int32_t) strtoul(p->pos5, NULL, 10);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3315      	adds	r3, #21
 8000cdc:	220a      	movs	r2, #10
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a fecd 	bl	800ba80 <strtoul>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	615a      	str	r2, [r3, #20]
	data->pos6 = (int32_t) strtoul(p->pos6, NULL, 10);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3319      	adds	r3, #25
 8000cf2:	220a      	movs	r2, #10
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00a fec2 	bl	800ba80 <strtoul>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <posSingleDataParsing>:

void posSingleDataParsing(bleData *p, posSingleData *data, uint8_t id) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	4613      	mov	r3, r2
 8000d18:	71fb      	strb	r3, [r7, #7]
	data->id = id;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	701a      	strb	r2, [r3, #0]
	data->pos = (int16_t) strtoul(p->pos1, NULL, 10);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3305      	adds	r3, #5
 8000d24:	220a      	movs	r2, #10
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f00a fea9 	bl	800ba80 <strtoul>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	805a      	strh	r2, [r3, #2]
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <PosSaveDataParsing>:

void PosSaveDataParsing(bleData *p, uint8_t *save_arr) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]

	int16_t pos1 = (int16_t) strtoul(p->pos1, NULL, 10);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3305      	adds	r3, #5
 8000d4e:	220a      	movs	r2, #10
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00a fe94 	bl	800ba80 <strtoul>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	82fb      	strh	r3, [r7, #22]
	int16_t pos2 = (int16_t) strtoul(p->pos2, NULL, 10);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3309      	adds	r3, #9
 8000d62:	220a      	movs	r2, #10
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00a fe8a 	bl	800ba80 <strtoul>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	82bb      	strh	r3, [r7, #20]
	int16_t pos3 = (int16_t) strtoul(p->pos3, NULL, 10);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	330d      	adds	r3, #13
 8000d76:	220a      	movs	r2, #10
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00a fe80 	bl	800ba80 <strtoul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	827b      	strh	r3, [r7, #18]
	int16_t pos4 = (int16_t) strtoul(p->pos4, NULL, 10);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3311      	adds	r3, #17
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00a fe76 	bl	800ba80 <strtoul>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	823b      	strh	r3, [r7, #16]
	int16_t pos5 = (int16_t) strtoul(p->pos5, NULL, 10);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3315      	adds	r3, #21
 8000d9e:	220a      	movs	r2, #10
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00a fe6c 	bl	800ba80 <strtoul>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	81fb      	strh	r3, [r7, #14]
	int16_t pos6 = (int16_t) strtoul(p->pos6, NULL, 10);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3319      	adds	r3, #25
 8000db2:	220a      	movs	r2, #10
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00a fe62 	bl	800ba80 <strtoul>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	81bb      	strh	r3, [r7, #12]

	save_arr[0] = *((uint8_t*) (&pos1));
 8000dc2:	f107 0316 	add.w	r3, r7, #22
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
	save_arr[1] = *((uint8_t*) (&pos1) + 1);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	7dfa      	ldrb	r2, [r7, #23]
 8000dd2:	701a      	strb	r2, [r3, #0]
	save_arr[2] = *((uint8_t*) (&pos2));
 8000dd4:	f107 0214 	add.w	r2, r7, #20
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	701a      	strb	r2, [r3, #0]
	save_arr[3] = *((uint8_t*) (&pos2) + 1);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3303      	adds	r3, #3
 8000de4:	7d7a      	ldrb	r2, [r7, #21]
 8000de6:	701a      	strb	r2, [r3, #0]
	save_arr[4] = *((uint8_t*) (&pos3));
 8000de8:	f107 0212 	add.w	r2, r7, #18
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3304      	adds	r3, #4
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
	save_arr[5] = *((uint8_t*) (&pos3) + 1);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3305      	adds	r3, #5
 8000df8:	7cfa      	ldrb	r2, [r7, #19]
 8000dfa:	701a      	strb	r2, [r3, #0]
	save_arr[6] = *((uint8_t*) (&pos4));
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3306      	adds	r3, #6
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	701a      	strb	r2, [r3, #0]
	save_arr[7] = *((uint8_t*) (&pos4) + 1);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3307      	adds	r3, #7
 8000e0c:	7c7a      	ldrb	r2, [r7, #17]
 8000e0e:	701a      	strb	r2, [r3, #0]
	save_arr[8] = *((uint8_t*) (&pos5));
 8000e10:	f107 020e 	add.w	r2, r7, #14
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	3308      	adds	r3, #8
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	701a      	strb	r2, [r3, #0]
	save_arr[9] = *((uint8_t*) (&pos5) + 1);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3309      	adds	r3, #9
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	701a      	strb	r2, [r3, #0]
	save_arr[10] = *((uint8_t*) (&pos6));
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	330a      	adds	r3, #10
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	701a      	strb	r2, [r3, #0]
	save_arr[11] = *((uint8_t*) (&pos6) + 1);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	330b      	adds	r3, #11
 8000e34:	7b7a      	ldrb	r2, [r7, #13]
 8000e36:	701a      	strb	r2, [r3, #0]

	printf("idx: %d\r\n", p->idx - 48);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	3b30      	subs	r3, #48	; 0x30
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <PosSaveDataParsing+0x130>)
 8000e42:	f00a fee9 	bl	800bc18 <iprintf>
	printf("pos2: %d\r\n", pos2);
 8000e46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <PosSaveDataParsing+0x134>)
 8000e4e:	f00a fee3 	bl	800bc18 <iprintf>
	printf("SaveArr2: 0x%x, 0x%x\r\n", save_arr[2], save_arr[3]);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3302      	adds	r3, #2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <PosSaveDataParsing+0x138>)
 8000e64:	f00a fed8 	bl	800bc18 <iprintf>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0800cb60 	.word	0x0800cb60
 8000e74:	0800cb6c 	.word	0x0800cb6c
 8000e78:	0800cb78 	.word	0x0800cb78

08000e7c <PosSaveDataDecode>:

void PosSaveDataDecode(uint8_t *save_arr, posData *data) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	data->pos1 = ((int32_t) (((uint16_t) save_arr[1] << 8)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[0])) - MG4005_ID1_OFFSET;
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f1a3 02b4 	sub.w	r2, r3, #180	; 0xb4
	data->pos1 = ((int32_t) (((uint16_t) save_arr[1] << 8)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
	data->pos2 = (int32_t) (((uint16_t) save_arr[3] << 8)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[2]);
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	3202      	adds	r2, #2
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	431a      	orrs	r2, r3
	data->pos2 = (int32_t) (((uint16_t) save_arr[3] << 8)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	609a      	str	r2, [r3, #8]
	data->pos3 = (int32_t) (((uint16_t) save_arr[5] << 8)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3305      	adds	r3, #5
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[4]);
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	3204      	adds	r2, #4
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	431a      	orrs	r2, r3
	data->pos3 = (int32_t) (((uint16_t) save_arr[5] << 8)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	60da      	str	r2, [r3, #12]
	data->pos4 = (int32_t) (((uint16_t) save_arr[7] << 8)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[6]);
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	3206      	adds	r2, #6
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	431a      	orrs	r2, r3
	data->pos4 = (int32_t) (((uint16_t) save_arr[7] << 8)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	611a      	str	r2, [r3, #16]
	data->pos5 = (int32_t) (((uint16_t) save_arr[9] << 8)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3309      	adds	r3, #9
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[8]);
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	431a      	orrs	r2, r3
	data->pos5 = (int32_t) (((uint16_t) save_arr[9] << 8)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	615a      	str	r2, [r3, #20]
	data->pos6 = (int32_t) (((uint16_t) save_arr[11] << 8)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	330b      	adds	r3, #11
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	021b      	lsls	r3, r3, #8
			| (uint16_t) save_arr[10]);
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	320a      	adds	r2, #10
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	431a      	orrs	r2, r3
	data->pos6 = (int32_t) (((uint16_t) save_arr[11] << 8)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	619a      	str	r2, [r3, #24]

	printf("Decode SaveArr2: 0x%x, 0x%x\r\n", save_arr[2], save_arr[3]);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <PosSaveDataDecode+0xb0>)
 8000f12:	f00a fe81 	bl	800bc18 <iprintf>
	printf("Decode pos2: %d", data->pos2);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <PosSaveDataDecode+0xb4>)
 8000f1e:	f00a fe7b 	bl	800bc18 <iprintf>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800cb90 	.word	0x0800cb90
 8000f30:	0800cbb0 	.word	0x0800cbb0

08000f34 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f006 ff4d 	bl	8007ddc <osDelay>
 8000f42:	e7fb      	b.n	8000f3c <StartDefaultTask+0x8>

08000f44 <VoiceInterrupt>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_VoiceInterrupt */
void VoiceInterrupt(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VoiceInterrupt */
	uint8_t voice_cmd = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		if (bSem_VoiceHandle != NULL) {
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <VoiceInterrupt+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0fb      	beq.n	8000f50 <VoiceInterrupt+0xc>
			if (osSemaphoreAcquire(bSem_VoiceHandle, osWaitForever) == osOK) {
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <VoiceInterrupt+0x60>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 f8b5 	bl	80080d0 <osSemaphoreAcquire>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f1      	bne.n	8000f50 <VoiceInterrupt+0xc>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <VoiceInterrupt+0x64>)
 8000f74:	f002 f98e 	bl	8003294 <HAL_GPIO_WritePin>

				if (i2c1_rx != 0) {
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <VoiceInterrupt+0x68>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0e7      	beq.n	8000f50 <VoiceInterrupt+0xc>
					voice_cmd = i2c1_rx;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <VoiceInterrupt+0x68>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	73fb      	strb	r3, [r7, #15]
					osMessageQueuePut(voice_ITHandle, &voice_cmd, 1U, 0U);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <VoiceInterrupt+0x6c>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	f107 010f 	add.w	r1, r7, #15
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2201      	movs	r2, #1
 8000f92:	f007 f9a7 	bl	80082e4 <osMessageQueuePut>

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <VoiceInterrupt+0x64>)
 8000f9e:	f002 f979 	bl	8003294 <HAL_GPIO_WritePin>
		if (bSem_VoiceHandle != NULL) {
 8000fa2:	e7d5      	b.n	8000f50 <VoiceInterrupt+0xc>
 8000fa4:	200001bc 	.word	0x200001bc
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	200001c9 	.word	0x200001c9
 8000fb0:	200001a8 	.word	0x200001a8

08000fb4 <Motor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Motor */
void Motor(void *argument)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b09e      	sub	sp, #120	; 0x78
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
	posSingleData single_data;
	uint8_t voice_data;
	uint32_t event_flags;

	posData decode_data;
	uint8_t addr = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t eeprom_data[12] = { 0x00 };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		pos_data_event = osMessageQueueGet(pos_dataHandle, &pos_data, 2U, 10);
 8000fd0:	4bce      	ldr	r3, [pc, #824]	; (800130c <Motor+0x358>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000fd8:	230a      	movs	r3, #10
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f007 f9e2 	bl	80083a4 <osMessageQueueGet>
 8000fe0:	6638      	str	r0, [r7, #96]	; 0x60
		pos_single_event = osMessageQueueGet(pos_singleHandle, &single_data, 2U,
 8000fe2:	4bcb      	ldr	r3, [pc, #812]	; (8001310 <Motor+0x35c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000fea:	230a      	movs	r3, #10
 8000fec:	2202      	movs	r2, #2
 8000fee:	f007 f9d9 	bl	80083a4 <osMessageQueueGet>
 8000ff2:	65f8      	str	r0, [r7, #92]	; 0x5c
				10);
		voice_data_event = osMessageQueueGet(voice_dataHandle, &voice_data, 3U,
 8000ff4:	4bc7      	ldr	r3, [pc, #796]	; (8001314 <Motor+0x360>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	2203      	movs	r2, #3
 8001000:	f007 f9d0 	bl	80083a4 <osMessageQueueGet>
 8001004:	65b8      	str	r0, [r7, #88]	; 0x58
				10);

		event_flags = osEventFlagsGet(cmdFlagHandle);
 8001006:	4bc4      	ldr	r3, [pc, #784]	; (8001318 <Motor+0x364>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f006 ffb6 	bl	8007f7c <osEventFlagsGet>
 8001010:	6578      	str	r0, [r7, #84]	; 0x54

		if ((event_flags & ROBOT_INIT_FLAG)
 8001012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d049      	beq.n	80010b0 <Motor+0xfc>
				&& !(event_flags & ROBOT_INITCOMP_FLAG)) {
 800101c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d144      	bne.n	80010b0 <Motor+0xfc>
			// Robot initialize for motor zero position
			printf("Robot initialize\r\n");
 8001026:	48bd      	ldr	r0, [pc, #756]	; (800131c <Motor+0x368>)
 8001028:	f00a fe5c 	bl	800bce4 <puts>
			// Motor ON
//			MG4005On(0x01);
//			MG4005On(0x02);
//			MG4005On(0x03);

			xl430TorqueEnable(0x04, TORQUE_MODE_ON);
 800102c:	2101      	movs	r1, #1
 800102e:	2004      	movs	r0, #4
 8001030:	f001 f9b6 	bl	80023a0 <xl430TorqueEnable>
			xl430TorqueEnable(0x05, TORQUE_MODE_ON);
 8001034:	2101      	movs	r1, #1
 8001036:	2005      	movs	r0, #5
 8001038:	f001 f9b2 	bl	80023a0 <xl430TorqueEnable>
			xl430TorqueEnable(0x06, TORQUE_MODE_ON);
 800103c:	2101      	movs	r1, #1
 800103e:	2006      	movs	r0, #6
 8001040:	f001 f9ae 	bl	80023a0 <xl430TorqueEnable>

			xl430ProfVelo(0x04, XL430_SPEED);
 8001044:	21da      	movs	r1, #218	; 0xda
 8001046:	2004      	movs	r0, #4
 8001048:	f001 f9fe 	bl	8002448 <xl430ProfVelo>
			xl430ProfVelo(0x05, XL430_SPEED);
 800104c:	21da      	movs	r1, #218	; 0xda
 800104e:	2005      	movs	r0, #5
 8001050:	f001 f9fa 	bl	8002448 <xl430ProfVelo>
			xl430ProfVelo(0x06, XL430_SPEED);
 8001054:	21da      	movs	r1, #218	; 0xda
 8001056:	2006      	movs	r0, #6
 8001058:	f001 f9f6 	bl	8002448 <xl430ProfVelo>

			// Motor zero position init
			MG4005MultiLoop2(0x01, MG4005_SPEED, MG4005_ID1_INIT);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fdd6 	bl	8001c14 <MG4005MultiLoop2>
			MG4005MultiLoop2(0x02, MG4005_SPEED, MG4005_ID2_INIT);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800106e:	2002      	movs	r0, #2
 8001070:	f000 fdd0 	bl	8001c14 <MG4005MultiLoop2>
			MG4005MultiLoop2(0x03, MG4005_SPEED, MG4005_ID3_INIT);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800107a:	2003      	movs	r0, #3
 800107c:	f000 fdca 	bl	8001c14 <MG4005MultiLoop2>

			xl430GoalPos(0x04, XL430_ID4_INIT);
 8001080:	2111      	movs	r1, #17
 8001082:	2004      	movs	r0, #4
 8001084:	f001 f9ac 	bl	80023e0 <xl430GoalPos>
			xl430GoalPos(0x05, XL430_ID5_INIT);
 8001088:	21b4      	movs	r1, #180	; 0xb4
 800108a:	2005      	movs	r0, #5
 800108c:	f001 f9a8 	bl	80023e0 <xl430GoalPos>
			xl430GoalPos(0x06, XL430_ID6_INIT);
 8001090:	21b4      	movs	r1, #180	; 0xb4
 8001092:	2006      	movs	r0, #6
 8001094:	f001 f9a4 	bl	80023e0 <xl430GoalPos>

			osEventFlagsSet(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 8001098:	4b9f      	ldr	r3, [pc, #636]	; (8001318 <Motor+0x364>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fef6 	bl	8007e90 <osEventFlagsSet>
			osEventFlagsClear(cmdFlagHandle, ROBOT_INIT_FLAG);
 80010a4:	4b9c      	ldr	r3, [pc, #624]	; (8001318 <Motor+0x364>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 ff34 	bl	8007f18 <osEventFlagsClear>
		}

		if ((event_flags & ROBOT_STOP_FLAG)
 80010b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <Motor+0x12e>
				&& !(event_flags & ROBOT_STOPCOMP_FLAG)) {
 80010ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10e      	bne.n	80010e2 <Motor+0x12e>
			// Robot motor stop
			printf("Robot stop\r\n");
 80010c4:	4896      	ldr	r0, [pc, #600]	; (8001320 <Motor+0x36c>)
 80010c6:	f00a fe0d 	bl	800bce4 <puts>

			osEventFlagsSet(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80010ca:	4b93      	ldr	r3, [pc, #588]	; (8001318 <Motor+0x364>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2108      	movs	r1, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f006 fedd 	bl	8007e90 <osEventFlagsSet>
			osEventFlagsClear(cmdFlagHandle, ROBOT_STOP_FLAG);
 80010d6:	4b90      	ldr	r3, [pc, #576]	; (8001318 <Motor+0x364>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2104      	movs	r1, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 ff1b 	bl	8007f18 <osEventFlagsClear>
		}

		if (pos_data_event == osOK) {
 80010e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d132      	bne.n	800114e <Motor+0x19a>
			// Robot motor commend
			printf("Robot set motor: %d. %d. %d. %d. %d. %d\r\n", pos_data.pos1,
 80010e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ea:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80010ec:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80010ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80010f4:	9102      	str	r1, [sp, #8]
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	462b      	mov	r3, r5
 80010fc:	4622      	mov	r2, r4
 80010fe:	4601      	mov	r1, r0
 8001100:	4888      	ldr	r0, [pc, #544]	; (8001324 <Motor+0x370>)
 8001102:	f00a fd89 	bl	800bc18 <iprintf>
					pos_data.pos2, pos_data.pos3, pos_data.pos4, pos_data.pos5,
					pos_data.pos6);

			// Motor angle set
			MG4005MultiLoop2(0x01, MG4005_SPEED, (int) pos_data.pos1);
 8001106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001108:	461a      	mov	r2, r3
 800110a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800110e:	2001      	movs	r0, #1
 8001110:	f000 fd80 	bl	8001c14 <MG4005MultiLoop2>
			MG4005MultiLoop2(0x02, MG4005_SPEED, (int) pos_data.pos2);
 8001114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001116:	461a      	mov	r2, r3
 8001118:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fd79 	bl	8001c14 <MG4005MultiLoop2>
			MG4005MultiLoop2(0x03, MG4005_SPEED, (int) pos_data.pos3);
 8001122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001124:	461a      	mov	r2, r3
 8001126:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800112a:	2003      	movs	r0, #3
 800112c:	f000 fd72 	bl	8001c14 <MG4005MultiLoop2>

			xl430GoalPos(0x04, (uint32_t) pos_data.pos4);
 8001130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001132:	4619      	mov	r1, r3
 8001134:	2004      	movs	r0, #4
 8001136:	f001 f953 	bl	80023e0 <xl430GoalPos>
			xl430GoalPos(0x05, (uint32_t) pos_data.pos5);
 800113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113c:	4619      	mov	r1, r3
 800113e:	2005      	movs	r0, #5
 8001140:	f001 f94e 	bl	80023e0 <xl430GoalPos>
			xl430GoalPos(0x06, (uint32_t) pos_data.pos6);
 8001144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001146:	4619      	mov	r1, r3
 8001148:	2006      	movs	r0, #6
 800114a:	f001 f949 	bl	80023e0 <xl430GoalPos>
		}

		if (pos_single_event == osOK) {
 800114e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001150:	2b00      	cmp	r3, #0
 8001152:	d151      	bne.n	80011f8 <Motor+0x244>
			// Robot realtime motor commend
			printf("Robot S: 0x%02x, %d\r\n", single_data.id, single_data.pos);
 8001154:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001158:	4619      	mov	r1, r3
 800115a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800115e:	461a      	mov	r2, r3
 8001160:	4871      	ldr	r0, [pc, #452]	; (8001328 <Motor+0x374>)
 8001162:	f00a fd59 	bl	800bc18 <iprintf>

			switch (single_data.id) {
 8001166:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800116a:	3b01      	subs	r3, #1
 800116c:	2b05      	cmp	r3, #5
 800116e:	d843      	bhi.n	80011f8 <Motor+0x244>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <Motor+0x1c4>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001191 	.word	0x08001191
 800117c:	080011ab 	.word	0x080011ab
 8001180:	080011bd 	.word	0x080011bd
 8001184:	080011cf 	.word	0x080011cf
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011eb 	.word	0x080011eb
			case 0x01:
				MG4005MultiLoop2(0x01, MG4005_SPEED,
						(int16_t) (single_data.pos - MG4005_ID1_OFFSET));
 8001190:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001194:	b29b      	uxth	r3, r3
 8001196:	3bb4      	subs	r3, #180	; 0xb4
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21b      	sxth	r3, r3
				MG4005MultiLoop2(0x01, MG4005_SPEED,
 800119c:	461a      	mov	r2, r3
 800119e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 fd36 	bl	8001c14 <MG4005MultiLoop2>
				break;
 80011a8:	e026      	b.n	80011f8 <Motor+0x244>
			case 0x02:
				MG4005MultiLoop2(0x02, MG4005_SPEED, (int) single_data.pos);
 80011aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011ae:	461a      	mov	r2, r3
 80011b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 fd2d 	bl	8001c14 <MG4005MultiLoop2>
				break;
 80011ba:	e01d      	b.n	80011f8 <Motor+0x244>
			case 0x03:
				MG4005MultiLoop2(0x03, MG4005_SPEED, (int) single_data.pos);
 80011bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011c0:	461a      	mov	r2, r3
 80011c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011c6:	2003      	movs	r0, #3
 80011c8:	f000 fd24 	bl	8001c14 <MG4005MultiLoop2>
				break;
 80011cc:	e014      	b.n	80011f8 <Motor+0x244>
			case 0x04:
				xl430GoalPos(0x04, (uint32_t) single_data.pos);
 80011ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011d2:	4619      	mov	r1, r3
 80011d4:	2004      	movs	r0, #4
 80011d6:	f001 f903 	bl	80023e0 <xl430GoalPos>
				break;
 80011da:	e00d      	b.n	80011f8 <Motor+0x244>
			case 0x05:
				xl430GoalPos(0x05, (uint32_t) single_data.pos);
 80011dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011e0:	4619      	mov	r1, r3
 80011e2:	2005      	movs	r0, #5
 80011e4:	f001 f8fc 	bl	80023e0 <xl430GoalPos>
				break;
 80011e8:	e006      	b.n	80011f8 <Motor+0x244>
			case 0x06:
				xl430GoalPos(0x06, (uint32_t) single_data.pos);
 80011ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011ee:	4619      	mov	r1, r3
 80011f0:	2006      	movs	r0, #6
 80011f2:	f001 f8f5 	bl	80023e0 <xl430GoalPos>
				break;
 80011f6:	bf00      	nop
			}
		}

		if (voice_data_event == osOK) {
 80011f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 80f2 	bne.w	80013e4 <Motor+0x430>
			// Voice commend
			printf("Voice input: %02x\r\n", voice_data);
 8001200:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001204:	4619      	mov	r1, r3
 8001206:	4849      	ldr	r0, [pc, #292]	; (800132c <Motor+0x378>)
 8001208:	f00a fd06 	bl	800bc18 <iprintf>

			switch (voice_data) {
 800120c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001210:	2b17      	cmp	r3, #23
 8001212:	dc2f      	bgt.n	8001274 <Motor+0x2c0>
 8001214:	2b05      	cmp	r3, #5
 8001216:	f2c0 80e5 	blt.w	80013e4 <Motor+0x430>
 800121a:	3b05      	subs	r3, #5
 800121c:	2b12      	cmp	r3, #18
 800121e:	f200 80e1 	bhi.w	80013e4 <Motor+0x430>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <Motor+0x274>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	0800127d 	.word	0x0800127d
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800127d 	.word	0x0800127d
 8001234:	0800127d 	.word	0x0800127d
 8001238:	0800127d 	.word	0x0800127d
 800123c:	080012fb 	.word	0x080012fb
 8001240:	08001303 	.word	0x08001303
 8001244:	080013e5 	.word	0x080013e5
 8001248:	080013e5 	.word	0x080013e5
 800124c:	080013e5 	.word	0x080013e5
 8001250:	080013e5 	.word	0x080013e5
 8001254:	080013e5 	.word	0x080013e5
 8001258:	080013e5 	.word	0x080013e5
 800125c:	080013e5 	.word	0x080013e5
 8001260:	080013e5 	.word	0x080013e5
 8001264:	080013e5 	.word	0x080013e5
 8001268:	080013e5 	.word	0x080013e5
 800126c:	080013e5 	.word	0x080013e5
 8001270:	08001331 	.word	0x08001331
 8001274:	2b52      	cmp	r3, #82	; 0x52
 8001276:	f000 80a2 	beq.w	80013be <Motor+0x40a>
 800127a:	e0b3      	b.n	80013e4 <Motor+0x430>
			case 0x06:
			case 0x07:
			case 0x08:
			case 0x09:
				// Read save data (EEPROM)
				addr = (voice_data - 0x05) * 12;
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001280:	461a      	mov	r2, r3
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3b3c      	subs	r3, #60	; 0x3c
 800128c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				AT24Read(addr, eeprom_data, 12);
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001298:	220c      	movs	r2, #12
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f9ea 	bl	8000674 <AT24Read>
				PosSaveDataDecode(eeprom_data, &decode_data);
 80012a0:	f107 0214 	add.w	r2, r7, #20
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fde6 	bl	8000e7c <PosSaveDataDecode>

				// Motor angle set
				MG4005MultiLoop2(0x01, MG4005_SPEED,
						(int32_t) decode_data.pos1);
 80012b0:	69bb      	ldr	r3, [r7, #24]
				MG4005MultiLoop2(0x01, MG4005_SPEED,
 80012b2:	461a      	mov	r2, r3
 80012b4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012b8:	2001      	movs	r0, #1
 80012ba:	f000 fcab 	bl	8001c14 <MG4005MultiLoop2>
				MG4005MultiLoop2(0x02, MG4005_SPEED,
						(int32_t) decode_data.pos2);
 80012be:	69fb      	ldr	r3, [r7, #28]
				MG4005MultiLoop2(0x02, MG4005_SPEED,
 80012c0:	461a      	mov	r2, r3
 80012c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012c6:	2002      	movs	r0, #2
 80012c8:	f000 fca4 	bl	8001c14 <MG4005MultiLoop2>
				MG4005MultiLoop2(0x03, MG4005_SPEED,
						(int32_t) decode_data.pos3);
 80012cc:	6a3b      	ldr	r3, [r7, #32]
				MG4005MultiLoop2(0x03, MG4005_SPEED,
 80012ce:	461a      	mov	r2, r3
 80012d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fc9d 	bl	8001c14 <MG4005MultiLoop2>

				xl430GoalPos(0x04, (uint32_t) decode_data.pos4);
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	2004      	movs	r0, #4
 80012e0:	f001 f87e 	bl	80023e0 <xl430GoalPos>
				xl430GoalPos(0x05, (uint32_t) decode_data.pos5);
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	4619      	mov	r1, r3
 80012e8:	2005      	movs	r0, #5
 80012ea:	f001 f879 	bl	80023e0 <xl430GoalPos>
				xl430GoalPos(0x06, (uint32_t) decode_data.pos6);
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	4619      	mov	r1, r3
 80012f2:	2006      	movs	r0, #6
 80012f4:	f001 f874 	bl	80023e0 <xl430GoalPos>
				break;
 80012f8:	e074      	b.n	80013e4 <Motor+0x430>
			case 0x0A:
				// Guidance voice ON
				DF2301QSetMuteMode(DF2301Q_MUTE_OFF);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fa04 	bl	8000708 <DF2301QSetMuteMode>
				break;
 8001300:	e070      	b.n	80013e4 <Motor+0x430>
			case 0x0B:
				// Guidance voice OFF
				DF2301QSetMuteMode(DF2301Q_MUTE_ON);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fa00 	bl	8000708 <DF2301QSetMuteMode>
				break;
 8001308:	e06c      	b.n	80013e4 <Motor+0x430>
 800130a:	bf00      	nop
 800130c:	200001ac 	.word	0x200001ac
 8001310:	200001b4 	.word	0x200001b4
 8001314:	200001b0 	.word	0x200001b0
 8001318:	200001c0 	.word	0x200001c0
 800131c:	0800cbc0 	.word	0x0800cbc0
 8001320:	0800cbd4 	.word	0x0800cbd4
 8001324:	0800cbe0 	.word	0x0800cbe0
 8001328:	0800cc0c 	.word	0x0800cc0c
 800132c:	0800cc24 	.word	0x0800cc24
			case 0x17:
				// Test code
				addr = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				AT24Read(addr, eeprom_data, 12);
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800133e:	220c      	movs	r2, #12
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f997 	bl	8000674 <AT24Read>
				PosSaveDataDecode(eeprom_data, &decode_data);
 8001346:	f107 0214 	add.w	r2, r7, #20
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd93 	bl	8000e7c <PosSaveDataDecode>

				printf("Robot set motor: %d. %d. %d. %d. %d. %d\r\n",
 8001356:	69b8      	ldr	r0, [r7, #24]
 8001358:	69fc      	ldr	r4, [r7, #28]
 800135a:	6a3d      	ldr	r5, [r7, #32]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001362:	9102      	str	r1, [sp, #8]
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	462b      	mov	r3, r5
 800136a:	4622      	mov	r2, r4
 800136c:	4601      	mov	r1, r0
 800136e:	481f      	ldr	r0, [pc, #124]	; (80013ec <Motor+0x438>)
 8001370:	f00a fc52 	bl	800bc18 <iprintf>
						decode_data.pos1, decode_data.pos2, decode_data.pos3,
						decode_data.pos4, decode_data.pos5, decode_data.pos6);

				// Motor angle set
				MG4005MultiLoop2(0x01, MG4005_SPEED,
						(int32_t) decode_data.pos1);
 8001374:	69bb      	ldr	r3, [r7, #24]
				MG4005MultiLoop2(0x01, MG4005_SPEED,
 8001376:	461a      	mov	r2, r3
 8001378:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fc49 	bl	8001c14 <MG4005MultiLoop2>
				MG4005MultiLoop2(0x02, MG4005_SPEED,
						(int32_t) decode_data.pos2);
 8001382:	69fb      	ldr	r3, [r7, #28]
				MG4005MultiLoop2(0x02, MG4005_SPEED,
 8001384:	461a      	mov	r2, r3
 8001386:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800138a:	2002      	movs	r0, #2
 800138c:	f000 fc42 	bl	8001c14 <MG4005MultiLoop2>
				MG4005MultiLoop2(0x03, MG4005_SPEED,
						(int32_t) decode_data.pos3);
 8001390:	6a3b      	ldr	r3, [r7, #32]
				MG4005MultiLoop2(0x03, MG4005_SPEED,
 8001392:	461a      	mov	r2, r3
 8001394:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001398:	2003      	movs	r0, #3
 800139a:	f000 fc3b 	bl	8001c14 <MG4005MultiLoop2>

				xl430GoalPos(0x04, (uint32_t) decode_data.pos4);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	2004      	movs	r0, #4
 80013a4:	f001 f81c 	bl	80023e0 <xl430GoalPos>
				xl430GoalPos(0x05, (uint32_t) decode_data.pos5);
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	4619      	mov	r1, r3
 80013ac:	2005      	movs	r0, #5
 80013ae:	f001 f817 	bl	80023e0 <xl430GoalPos>
				xl430GoalPos(0x06, (uint32_t) decode_data.pos6);
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	4619      	mov	r1, r3
 80013b6:	2006      	movs	r0, #6
 80013b8:	f001 f812 	bl	80023e0 <xl430GoalPos>
				break;
 80013bc:	e012      	b.n	80013e4 <Motor+0x430>
			case 0x52:
				// Reset
				osEventFlagsSet(cmdFlagHandle, ROBOT_INIT_FLAG);
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Motor+0x43c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fd63 	bl	8007e90 <osEventFlagsSet>

				osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <Motor+0x43c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fda1 	bl	8007f18 <osEventFlagsClear>
				osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <Motor+0x43c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2108      	movs	r1, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fd9b 	bl	8007f18 <osEventFlagsClear>
				break;
 80013e2:	bf00      	nop
			}
		}

		osDelay(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f006 fcf9 	bl	8007ddc <osDelay>
		pos_data_event = osMessageQueueGet(pos_dataHandle, &pos_data, 2U, 10);
 80013ea:	e5f1      	b.n	8000fd0 <Motor+0x1c>
 80013ec:	0800cbe0 	.word	0x0800cbe0
 80013f0:	200001c0 	.word	0x200001c0

080013f4 <DataParse>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DataParse */
void DataParse(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09e      	sub	sp, #120	; 0x78
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	posSingleData single_parse_data;
	uint8_t voice_it;

	/* Infinite loop */
	for (;;) {
		ble_it_event = osMessageQueueGet(ble_ITHandle, &ble_it, 0U, 10);
 80013fc:	4bb9      	ldr	r3, [pc, #740]	; (80016e4 <DataParse+0x2f0>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001404:	230a      	movs	r3, #10
 8001406:	2200      	movs	r2, #0
 8001408:	f006 ffcc 	bl	80083a4 <osMessageQueueGet>
 800140c:	6738      	str	r0, [r7, #112]	; 0x70
		voice_it_event = osMessageQueueGet(voice_ITHandle, &voice_it, 1U, 10);
 800140e:	4bb6      	ldr	r3, [pc, #728]	; (80016e8 <DataParse+0x2f4>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001416:	230a      	movs	r3, #10
 8001418:	2201      	movs	r2, #1
 800141a:	f006 ffc3 	bl	80083a4 <osMessageQueueGet>
 800141e:	66f8      	str	r0, [r7, #108]	; 0x6c

		if (ble_it_event == osOK) {
 8001420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 81cb 	bne.w	80017be <DataParse+0x3ca>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142e:	48af      	ldr	r0, [pc, #700]	; (80016ec <DataParse+0x2f8>)
 8001430:	f001 ff30 	bl	8003294 <HAL_GPIO_WritePin>

			printf("%s\r\n", ble_it.cmd);
 8001434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001438:	4619      	mov	r1, r3
 800143a:	48ad      	ldr	r0, [pc, #692]	; (80016f0 <DataParse+0x2fc>)
 800143c:	f00a fbec 	bl	800bc18 <iprintf>
			if (ble_it.cmd[0] == 'P') {
 8001440:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001444:	2b50      	cmp	r3, #80	; 0x50
 8001446:	f040 80c3 	bne.w	80015d0 <DataParse+0x1dc>
				switch (ble_it.cmd[1]) {
 800144a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800144e:	3b31      	subs	r3, #49	; 0x31
 8001450:	2b05      	cmp	r3, #5
 8001452:	f200 81ae 	bhi.w	80017b2 <DataParse+0x3be>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <DataParse+0x68>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	08001475 	.word	0x08001475
 8001460:	080014af 	.word	0x080014af
 8001464:	080014e9 	.word	0x080014e9
 8001468:	08001523 	.word	0x08001523
 800146c:	0800155d 	.word	0x0800155d
 8001470:	08001597 	.word	0x08001597
				case '1':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 8001474:	4b9f      	ldr	r3, [pc, #636]	; (80016f4 <DataParse+0x300>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f006 fd4c 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 8001480:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <DataParse+0x300>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2108      	movs	r1, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f006 fd46 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x01);
 800148c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001494:	2201      	movs	r2, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc38 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 800149c:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <DataParse+0x304>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014a4:	2300      	movs	r3, #0
 80014a6:	2202      	movs	r2, #2
 80014a8:	f006 ff1c 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 80014ac:	e181      	b.n	80017b2 <DataParse+0x3be>
				case '2':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <DataParse+0x300>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2102      	movs	r1, #2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 fd2f 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80014ba:	4b8e      	ldr	r3, [pc, #568]	; (80016f4 <DataParse+0x300>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2108      	movs	r1, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fd29 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x02);
 80014c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ce:	2202      	movs	r2, #2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fc1b 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <DataParse+0x304>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014de:	2300      	movs	r3, #0
 80014e0:	2202      	movs	r2, #2
 80014e2:	f006 feff 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 80014e6:	e164      	b.n	80017b2 <DataParse+0x3be>
				case '3':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 80014e8:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <DataParse+0x300>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fd12 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80014f4:	4b7f      	ldr	r3, [pc, #508]	; (80016f4 <DataParse+0x300>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2108      	movs	r1, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 fd0c 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x03);
 8001500:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001508:	2203      	movs	r2, #3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fbfe 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 8001510:	4b79      	ldr	r3, [pc, #484]	; (80016f8 <DataParse+0x304>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001518:	2300      	movs	r3, #0
 800151a:	2202      	movs	r2, #2
 800151c:	f006 fee2 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 8001520:	e147      	b.n	80017b2 <DataParse+0x3be>
				case '4':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <DataParse+0x300>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2102      	movs	r1, #2
 8001528:	4618      	mov	r0, r3
 800152a:	f006 fcf5 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 800152e:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <DataParse+0x300>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2108      	movs	r1, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f006 fcef 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x04);
 800153a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800153e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001542:	2204      	movs	r2, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fbe1 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 800154a:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <DataParse+0x304>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001552:	2300      	movs	r3, #0
 8001554:	2202      	movs	r2, #2
 8001556:	f006 fec5 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 800155a:	e12a      	b.n	80017b2 <DataParse+0x3be>
				case '5':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <DataParse+0x300>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f006 fcd8 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <DataParse+0x300>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2108      	movs	r1, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f006 fcd2 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x05);
 8001574:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800157c:	2205      	movs	r2, #5
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fbc4 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 8001584:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <DataParse+0x304>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800158c:	2300      	movs	r3, #0
 800158e:	2202      	movs	r2, #2
 8001590:	f006 fea8 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 8001594:	e10d      	b.n	80017b2 <DataParse+0x3be>
				case '6':
					osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <DataParse+0x300>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fcbb 	bl	8007f18 <osEventFlagsClear>
					osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80015a2:	4b54      	ldr	r3, [pc, #336]	; (80016f4 <DataParse+0x300>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2108      	movs	r1, #8
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fcb5 	bl	8007f18 <osEventFlagsClear>

					posSingleDataParsing(&ble_it, &single_parse_data, 0x06);
 80015ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b6:	2206      	movs	r2, #6
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fba7 	bl	8000d0c <posSingleDataParsing>
					osMessageQueuePut(pos_singleHandle, &single_parse_data, 2U,
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <DataParse+0x304>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015c6:	2300      	movs	r3, #0
 80015c8:	2202      	movs	r2, #2
 80015ca:	f006 fe8b 	bl	80082e4 <osMessageQueuePut>
							0U);
					break;
 80015ce:	e0f0      	b.n	80017b2 <DataParse+0x3be>
				}
			} else if (!(strcmp(ble_it.cmd, "STOP"))) {
 80015d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d4:	4949      	ldr	r1, [pc, #292]	; (80016fc <DataParse+0x308>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fdfa 	bl	80001d0 <strcmp>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d112      	bne.n	8001608 <DataParse+0x214>
				// stop flag on
				osEventFlagsSet(cmdFlagHandle, ROBOT_STOP_FLAG);
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <DataParse+0x300>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2104      	movs	r1, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 fc51 	bl	8007e90 <osEventFlagsSet>
				osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <DataParse+0x300>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2102      	movs	r1, #2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fc8f 	bl	8007f18 <osEventFlagsClear>
				osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <DataParse+0x300>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2108      	movs	r1, #8
 8001600:	4618      	mov	r0, r3
 8001602:	f006 fc89 	bl	8007f18 <osEventFlagsClear>
 8001606:	e0d4      	b.n	80017b2 <DataParse+0x3be>

			} else if (!(strcmp(ble_it.cmd, "SET"))) {
 8001608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160c:	493c      	ldr	r1, [pc, #240]	; (8001700 <DataParse+0x30c>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fdde 	bl	80001d0 <strcmp>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d11c      	bne.n	8001654 <DataParse+0x260>
				// stop flag off & put pos data
				osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <DataParse+0x300>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fc79 	bl	8007f18 <osEventFlagsClear>
				osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <DataParse+0x300>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2108      	movs	r1, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f006 fc73 	bl	8007f18 <osEventFlagsClear>

				PosSetDataParsing(&ble_it, &parse_data);
 8001632:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb19 	bl	8000c74 <PosSetDataParsing>
				osMessageQueuePut(pos_dataHandle, &parse_data, 2U, 0U);
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <DataParse+0x310>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800164a:	2300      	movs	r3, #0
 800164c:	2202      	movs	r2, #2
 800164e:	f006 fe49 	bl	80082e4 <osMessageQueuePut>
 8001652:	e0ae      	b.n	80017b2 <DataParse+0x3be>

			} else if (!(strcmp(ble_it.cmd, "SAV"))) {
 8001654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001658:	492b      	ldr	r1, [pc, #172]	; (8001708 <DataParse+0x314>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fdb8 	bl	80001d0 <strcmp>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d124      	bne.n	80016b0 <DataParse+0x2bc>
				// eeprom write
				uint8_t parse_idx = ble_it.idx - 48;
 8001666:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800166a:	3b30      	subs	r3, #48	; 0x30
 800166c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
				uint8_t addr = parse_idx * 12;
 8001670:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001674:	461a      	mov	r2, r3
 8001676:	0052      	lsls	r2, r2, #1
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				uint8_t data[12] = {0x00};
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]

				PosSaveDataParsing(&ble_it, data);
 800168e:	f107 0218 	add.w	r2, r7, #24
 8001692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb51 	bl	8000d40 <PosSaveDataParsing>
				AT24Write(addr, data, 12);
 800169e:	f107 0118 	add.w	r1, r7, #24
 80016a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016a6:	220c      	movs	r2, #12
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ffb3 	bl	8000614 <AT24Write>
 80016ae:	e080      	b.n	80017b2 <DataParse+0x3be>

			} else if (!(strcmp(ble_it.cmd, "DEL"))) {
 80016b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <DataParse+0x318>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd8a 	bl	80001d0 <strcmp>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d15c      	bne.n	800177c <DataParse+0x388>
				// eeprom delete
				uint8_t parse_idx = ble_it.idx - 48;
 80016c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80016c6:	3b30      	subs	r3, #48	; 0x30
 80016c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				uint8_t addr;
				uint8_t next_addr;
				uint8_t data[12] = {0x00};
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]

				for (int i = parse_idx; i < 4; i++) {
 80016da:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
 80016e0:	e036      	b.n	8001750 <DataParse+0x35c>
 80016e2:	bf00      	nop
 80016e4:	200001a4 	.word	0x200001a4
 80016e8:	200001a8 	.word	0x200001a8
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	0800cc38 	.word	0x0800cc38
 80016f4:	200001c0 	.word	0x200001c0
 80016f8:	200001b4 	.word	0x200001b4
 80016fc:	0800cc40 	.word	0x0800cc40
 8001700:	0800cc48 	.word	0x0800cc48
 8001704:	200001ac 	.word	0x200001ac
 8001708:	0800cc4c 	.word	0x0800cc4c
 800170c:	0800cc50 	.word	0x0800cc50
					addr = i * 12;
 8001710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
					next_addr = addr + 12;
 8001720:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001724:	330c      	adds	r3, #12
 8001726:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

					AT24Read(next_addr, data, 12);
 800172a:	f107 010c 	add.w	r1, r7, #12
 800172e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001732:	220c      	movs	r2, #12
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff9d 	bl	8000674 <AT24Read>

					AT24Write(addr, data, 12);
 800173a:	f107 010c 	add.w	r1, r7, #12
 800173e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001742:	220c      	movs	r2, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff65 	bl	8000614 <AT24Write>
				for (int i = parse_idx; i < 4; i++) {
 800174a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800174c:	3301      	adds	r3, #1
 800174e:	677b      	str	r3, [r7, #116]	; 0x74
 8001750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001752:	2b03      	cmp	r3, #3
 8001754:	dddc      	ble.n	8001710 <DataParse+0x31c>
				}

				memset(data, 0x00, 12);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	220c      	movs	r2, #12
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00a fba0 	bl	800bea4 <memset>
				addr = 0x30; // 5th address
 8001764:	2330      	movs	r3, #48	; 0x30
 8001766:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				AT24Write(addr, data, 12);
 800176a:	f107 010c 	add.w	r1, r7, #12
 800176e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001772:	220c      	movs	r2, #12
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff4d 	bl	8000614 <AT24Write>
 800177a:	e01a      	b.n	80017b2 <DataParse+0x3be>

			} else if (!(strcmp(ble_it.cmd, "RSET"))) {
 800177c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001780:	4928      	ldr	r1, [pc, #160]	; (8001824 <DataParse+0x430>)
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fd24 	bl	80001d0 <strcmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d111      	bne.n	80017b2 <DataParse+0x3be>
				// connect or reset flag on
				osEventFlagsSet(cmdFlagHandle, ROBOT_INIT_FLAG);
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <DataParse+0x434>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	4618      	mov	r0, r3
 8001796:	f006 fb7b 	bl	8007e90 <osEventFlagsSet>

				osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <DataParse+0x434>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2102      	movs	r1, #2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fbb9 	bl	8007f18 <osEventFlagsClear>
				osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <DataParse+0x434>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2108      	movs	r1, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fbb3 	bl	8007f18 <osEventFlagsClear>

			}

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b8:	481c      	ldr	r0, [pc, #112]	; (800182c <DataParse+0x438>)
 80017ba:	f001 fd6b 	bl	8003294 <HAL_GPIO_WritePin>
		}

		if (voice_it_event == osOK) {
 80017be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d12b      	bne.n	800181c <DataParse+0x428>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <DataParse+0x438>)
 80017cc:	f001 fd62 	bl	8003294 <HAL_GPIO_WritePin>

			osEventFlagsClear(cmdFlagHandle, ROBOT_INIT_FLAG);
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <DataParse+0x434>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fb9e 	bl	8007f18 <osEventFlagsClear>
			osEventFlagsClear(cmdFlagHandle, ROBOT_INITCOMP_FLAG);
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <DataParse+0x434>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fb98 	bl	8007f18 <osEventFlagsClear>
			osEventFlagsClear(cmdFlagHandle, ROBOT_STOP_FLAG);
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <DataParse+0x434>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2104      	movs	r1, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 fb92 	bl	8007f18 <osEventFlagsClear>
			osEventFlagsClear(cmdFlagHandle, ROBOT_STOPCOMP_FLAG);
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <DataParse+0x434>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2108      	movs	r1, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fb8c 	bl	8007f18 <osEventFlagsClear>

			osMessageQueuePut(voice_dataHandle, &voice_it, 3U, 0U);
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <DataParse+0x43c>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001808:	2300      	movs	r3, #0
 800180a:	2203      	movs	r2, #3
 800180c:	f006 fd6a 	bl	80082e4 <osMessageQueuePut>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <DataParse+0x438>)
 8001818:	f001 fd3c 	bl	8003294 <HAL_GPIO_WritePin>
		}
		osDelay(1);
 800181c:	2001      	movs	r0, #1
 800181e:	f006 fadd 	bl	8007ddc <osDelay>
		ble_it_event = osMessageQueueGet(ble_ITHandle, &ble_it, 0U, 10);
 8001822:	e5eb      	b.n	80013fc <DataParse+0x8>
 8001824:	0800cc54 	.word	0x0800cc54
 8001828:	200001c0 	.word	0x200001c0
 800182c:	40020c00 	.word	0x40020c00
 8001830:	200001b0 	.word	0x200001b0

08001834 <GetVoiceCmd>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GetVoiceCmd */
void GetVoiceCmd(void *argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetVoiceCmd */

	/* Infinite loop */
	for (;;) {
		DF2301QGetCMDID();
 800183c:	f7fe ff4a 	bl	80006d4 <DF2301QGetCMDID>

		osDelay(100);
 8001840:	2064      	movs	r0, #100	; 0x64
 8001842:	f006 facb 	bl	8007ddc <osDelay>
		DF2301QGetCMDID();
 8001846:	e7f9      	b.n	800183c <GetVoiceCmd+0x8>

08001848 <BLEInterrupt>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BLEInterrupt */
void BLEInterrupt(void *argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BLEInterrupt */
	bleData ble_data;

	memset(ble_data.cmd, 0x00, 4);
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2204      	movs	r2, #4
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00a fb23 	bl	800bea4 <memset>
	ble_data.idx = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	733b      	strb	r3, [r7, #12]
	memset(ble_data.pos1, 0x00, 3);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	3305      	adds	r3, #5
 8001868:	2203      	movs	r2, #3
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fb19 	bl	800bea4 <memset>
	memset(ble_data.pos2, 0x00, 3);
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	3309      	adds	r3, #9
 8001878:	2203      	movs	r2, #3
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f00a fb11 	bl	800bea4 <memset>
	memset(ble_data.pos3, 0x00, 3);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	330d      	adds	r3, #13
 8001888:	2203      	movs	r2, #3
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00a fb09 	bl	800bea4 <memset>
	memset(ble_data.pos4, 0x00, 3);
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	3311      	adds	r3, #17
 8001898:	2203      	movs	r2, #3
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fb01 	bl	800bea4 <memset>
	memset(ble_data.pos5, 0x00, 3);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	3315      	adds	r3, #21
 80018a8:	2203      	movs	r2, #3
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a faf9 	bl	800bea4 <memset>
	memset(ble_data.pos6, 0x00, 3);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	3319      	adds	r3, #25
 80018b8:	2203      	movs	r2, #3
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00a faf1 	bl	800bea4 <memset>

	uint8_t i = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t uart2_count = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Infinite loop */
	for (;;) {
		if (bSem_BLEHandle != NULL) {
 80018ce:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <BLEInterrupt+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0fb      	beq.n	80018ce <BLEInterrupt+0x86>
			if (osSemaphoreAcquire(bSem_BLEHandle, osWaitForever) == osOK) {
 80018d6:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <BLEInterrupt+0x280>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f04f 31ff 	mov.w	r1, #4294967295
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 fbf6 	bl	80080d0 <osSemaphoreAcquire>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f1      	bne.n	80018ce <BLEInterrupt+0x86>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f0:	4876      	ldr	r0, [pc, #472]	; (8001acc <BLEInterrupt+0x284>)
 80018f2:	f001 fccf 	bl	8003294 <HAL_GPIO_WritePin>

				switch (uart2_rx) {
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <BLEInterrupt+0x288>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b2e      	cmp	r3, #46	; 0x2e
 80018fc:	d006      	beq.n	800190c <BLEInterrupt+0xc4>
 80018fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001900:	dc5c      	bgt.n	80019bc <BLEInterrupt+0x174>
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d014      	beq.n	8001930 <BLEInterrupt+0xe8>
 8001906:	2b0d      	cmp	r3, #13
 8001908:	d009      	beq.n	800191e <BLEInterrupt+0xd6>
 800190a:	e057      	b.n	80019bc <BLEInterrupt+0x174>
				case '.':
					i = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					++uart2_count;
 8001912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001916:	3301      	adds	r3, #1
 8001918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					break;
 800191c:	e0cd      	b.n	8001aba <BLEInterrupt+0x272>
				case '\r':
					osMessageQueuePut(ble_ITHandle, &ble_data, 0U, 0U);
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <BLEInterrupt+0x28c>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	2300      	movs	r3, #0
 8001928:	2200      	movs	r2, #0
 800192a:	f006 fcdb 	bl	80082e4 <osMessageQueuePut>
					break;
 800192e:	e0c4      	b.n	8001aba <BLEInterrupt+0x272>
				case '\n':
					memset(ble_data.cmd, 0x00, 4);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2204      	movs	r2, #4
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00a fab3 	bl	800bea4 <memset>
					ble_data.idx = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	733b      	strb	r3, [r7, #12]
					memset(ble_data.pos1, 0x00, 3);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	3305      	adds	r3, #5
 8001948:	2203      	movs	r2, #3
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00a faa9 	bl	800bea4 <memset>
					memset(ble_data.pos2, 0x00, 3);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	3309      	adds	r3, #9
 8001958:	2203      	movs	r2, #3
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f00a faa1 	bl	800bea4 <memset>
					memset(ble_data.pos3, 0x00, 3);
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	330d      	adds	r3, #13
 8001968:	2203      	movs	r2, #3
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f00a fa99 	bl	800bea4 <memset>
					memset(ble_data.pos4, 0x00, 3);
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	3311      	adds	r3, #17
 8001978:	2203      	movs	r2, #3
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00a fa91 	bl	800bea4 <memset>
					memset(ble_data.pos5, 0x00, 3);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	3315      	adds	r3, #21
 8001988:	2203      	movs	r2, #3
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fa89 	bl	800bea4 <memset>
					memset(ble_data.pos6, 0x00, 3);
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	3319      	adds	r3, #25
 8001998:	2203      	movs	r2, #3
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f00a fa81 	bl	800bea4 <memset>

					i = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					uart2_count = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b4:	4845      	ldr	r0, [pc, #276]	; (8001acc <BLEInterrupt+0x284>)
 80019b6:	f001 fc6d 	bl	8003294 <HAL_GPIO_WritePin>
					break;
 80019ba:	e07e      	b.n	8001aba <BLEInterrupt+0x272>
				default:
					switch (uart2_count) {
 80019bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	d879      	bhi.n	8001ab8 <BLEInterrupt+0x270>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <BLEInterrupt+0x184>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019ed 	.word	0x080019ed
 80019d0:	08001a09 	.word	0x08001a09
 80019d4:	08001a11 	.word	0x08001a11
 80019d8:	08001a2d 	.word	0x08001a2d
 80019dc:	08001a49 	.word	0x08001a49
 80019e0:	08001a65 	.word	0x08001a65
 80019e4:	08001a81 	.word	0x08001a81
 80019e8:	08001a9d 	.word	0x08001a9d
					case 0:
						ble_data.cmd[i++] = uart2_rx;
 80019ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80019f6:	4619      	mov	r1, r3
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <BLEInterrupt+0x288>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a00:	443b      	add	r3, r7
 8001a02:	f803 2c20 	strb.w	r2, [r3, #-32]
						break;
 8001a06:	e057      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 1:
						ble_data.idx = uart2_rx;
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	733b      	strb	r3, [r7, #12]
						break;
 8001a0e:	e053      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 2:
						ble_data.pos1[i++] = uart2_rx;
 8001a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a24:	443b      	add	r3, r7
 8001a26:	f803 2c1b 	strb.w	r2, [r3, #-27]
						break;
 8001a2a:	e045      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 3:
						ble_data.pos2[i++] = uart2_rx;
 8001a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a36:	4619      	mov	r1, r3
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a40:	443b      	add	r3, r7
 8001a42:	f803 2c17 	strb.w	r2, [r3, #-23]
						break;
 8001a46:	e037      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 4:
						ble_data.pos3[i++] = uart2_rx;
 8001a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a52:	4619      	mov	r1, r3
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f803 2c13 	strb.w	r2, [r3, #-19]
						break;
 8001a62:	e029      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 5:
						ble_data.pos4[i++] = uart2_rx;
 8001a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a78:	443b      	add	r3, r7
 8001a7a:	f803 2c0f 	strb.w	r2, [r3, #-15]
						break;
 8001a7e:	e01b      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 6:
						ble_data.pos5[i++] = uart2_rx;
 8001a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <BLEInterrupt+0x288>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001a94:	443b      	add	r3, r7
 8001a96:	f803 2c0b 	strb.w	r2, [r3, #-11]
						break;
 8001a9a:	e00d      	b.n	8001ab8 <BLEInterrupt+0x270>
					case 7:
						ble_data.pos6[i++] = uart2_rx;
 8001a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <BLEInterrupt+0x288>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001ab0:	443b      	add	r3, r7
 8001ab2:	f803 2c07 	strb.w	r2, [r3, #-7]
						break;
 8001ab6:	bf00      	nop
					}
					break;
 8001ab8:	bf00      	nop
				}

				HAL_UART_Receive_IT(&huart2, &uart2_rx, 1);
 8001aba:	2201      	movs	r2, #1
 8001abc:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <BLEInterrupt+0x288>)
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <BLEInterrupt+0x290>)
 8001ac0:	f005 f8d4 	bl	8006c6c <HAL_UART_Receive_IT>
		if (bSem_BLEHandle != NULL) {
 8001ac4:	e703      	b.n	80018ce <BLEInterrupt+0x86>
 8001ac6:	bf00      	nop
 8001ac8:	200001b8 	.word	0x200001b8
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	200001c8 	.word	0x200001c8
 8001ad4:	200001a4 	.word	0x200001a4
 8001ad8:	20000104 	.word	0x20000104

08001adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aee:	f000 fd19 	bl	8002524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40001000 	.word	0x40001000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <InitCANFilter>:
 *      Author: KkangJun
 */

#include "mg4005.h"

void InitCANFilter(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	canFilter.FilterMaskIdHigh = 0x7F0 << 5;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <InitCANFilter+0x5c>)
 8001b12:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8001b16:	609a      	str	r2, [r3, #8]
	canFilter.FilterIdHigh = 0x140 << 5;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <InitCANFilter+0x5c>)
 8001b1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001b1e:	601a      	str	r2, [r3, #0]
	canFilter.FilterMaskIdLow = 0x7F0 << 5;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <InitCANFilter+0x5c>)
 8001b22:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8001b26:	60da      	str	r2, [r3, #12]
	canFilter.FilterIdLow = 0x140 << 5;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <InitCANFilter+0x5c>)
 8001b2a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001b2e:	605a      	str	r2, [r3, #4]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <InitCANFilter+0x5c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <InitCANFilter+0x5c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
	canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <InitCANFilter+0x5c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
	canFilter.FilterBank = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <InitCANFilter+0x5c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
	canFilter.FilterActivation = ENABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <InitCANFilter+0x5c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan2, &canFilter);
 8001b4e:	4906      	ldr	r1, [pc, #24]	; (8001b68 <InitCANFilter+0x5c>)
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <InitCANFilter+0x60>)
 8001b52:	f000 fe27 	bl	80027a4 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b56:	2102      	movs	r1, #2
 8001b58:	4804      	ldr	r0, [pc, #16]	; (8001b6c <InitCANFilter+0x60>)
 8001b5a:	f001 f857 	bl	8002c0c <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(&hcan2);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <InitCANFilter+0x60>)
 8001b60:	f000 ff00 	bl	8002964 <HAL_CAN_Start>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200001cc 	.word	0x200001cc
 8001b6c:	20000088 	.word	0x20000088

08001b70 <MG4005Commend>:

void MG4005Commend(uint8_t id, uint8_t cmd, uint8_t *data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	603a      	str	r2, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	71bb      	strb	r3, [r7, #6]
	canTxHeader.StdId = 0x140 + id;
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MG4005Commend+0x94>)
 8001b8a:	601a      	str	r2, [r3, #0]
	canTxHeader.RTR = CAN_RTR_DATA;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MG4005Commend+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
	canTxHeader.IDE = CAN_ID_STD;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MG4005Commend+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
	canTxHeader.DLC = 8;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MG4005Commend+0x94>)
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	611a      	str	r2, [r3, #16]

	canTxData[0] = cmd;
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <MG4005Commend+0x98>)
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	7013      	strb	r3, [r2, #0]
	canTxData[1] = data[0];
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MG4005Commend+0x98>)
 8001baa:	705a      	strb	r2, [r3, #1]
	canTxData[2] = data[1];
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	785a      	ldrb	r2, [r3, #1]
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MG4005Commend+0x98>)
 8001bb2:	709a      	strb	r2, [r3, #2]
	canTxData[3] = data[2];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	789a      	ldrb	r2, [r3, #2]
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MG4005Commend+0x98>)
 8001bba:	70da      	strb	r2, [r3, #3]
	canTxData[4] = data[3];
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	78da      	ldrb	r2, [r3, #3]
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MG4005Commend+0x98>)
 8001bc2:	711a      	strb	r2, [r3, #4]
	canTxData[5] = data[4];
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	791a      	ldrb	r2, [r3, #4]
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MG4005Commend+0x98>)
 8001bca:	715a      	strb	r2, [r3, #5]
	canTxData[6] = data[5];
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	795a      	ldrb	r2, [r3, #5]
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <MG4005Commend+0x98>)
 8001bd2:	719a      	strb	r2, [r3, #6]
	canTxData[7] = data[6];
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	799a      	ldrb	r2, [r3, #6]
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MG4005Commend+0x98>)
 8001bda:	71da      	strb	r2, [r3, #7]

	canTxMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <MG4005Commend+0x9c>)
 8001bde:	f000 ffe0 	bl	8002ba2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <MG4005Commend+0xa0>)
 8001be6:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, canTxData, &canTxMailbox);
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MG4005Commend+0xa0>)
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <MG4005Commend+0x98>)
 8001bec:	4905      	ldr	r1, [pc, #20]	; (8001c04 <MG4005Commend+0x94>)
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <MG4005Commend+0x9c>)
 8001bf0:	f000 fefc 	bl	80029ec <HAL_CAN_AddTxMessage>

	osDelay(10);
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f006 f8f1 	bl	8007ddc <osDelay>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001f4 	.word	0x200001f4
 8001c08:	20000210 	.word	0x20000210
 8001c0c:	20000088 	.word	0x20000088
 8001c10:	2000020c 	.word	0x2000020c

08001c14 <MG4005MultiLoop2>:
	uint8_t data[7] = { 0x00 };
	data[0] = 0x01;
	MG4005Commend(id, 0x8C, data);
}

void MG4005MultiLoop2(uint8_t id, uint16_t speed, int32_t angle) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	603a      	str	r2, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	460b      	mov	r3, r1
 8001c22:	80bb      	strh	r3, [r7, #4]
	 * 1 = 1 [deg], counter clockwise
	 *
	 * angle Range(Recommended): 0 ~ 1000
	 * 1 = 1 [dps]
	 * */
	uint8_t data[7] = { 0x00 };
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	460a      	mov	r2, r1
 8001c30:	801a      	strh	r2, [r3, #0]
 8001c32:	460a      	mov	r2, r1
 8001c34:	709a      	strb	r2, [r3, #2]
	angle *= 1000;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	603b      	str	r3, [r7, #0]

	data[0] = 0x00;
 8001c42:	2300      	movs	r3, #0
 8001c44:	723b      	strb	r3, [r7, #8]
	data[1] = *((uint8_t*) (&speed));
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	727b      	strb	r3, [r7, #9]
	data[2] = *((uint8_t*) (&speed) + 1);
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	72bb      	strb	r3, [r7, #10]
	data[3] = *((uint8_t*) (&angle));
 8001c50:	463b      	mov	r3, r7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	72fb      	strb	r3, [r7, #11]
	data[4] = *((uint8_t*) (&angle) + 1);
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	733b      	strb	r3, [r7, #12]
	data[5] = *((uint8_t*) (&angle) + 2);
 8001c5a:	78bb      	ldrb	r3, [r7, #2]
 8001c5c:	737b      	strb	r3, [r7, #13]
	data[6] = *((uint8_t*) (&angle) + 3);
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	73bb      	strb	r3, [r7, #14]

	MG4005Commend(id, 0xA4, data);
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	21a4      	movs	r1, #164	; 0xa4
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <MG4005Commend>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_MspInit+0x54>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_MspInit+0x54>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_MspInit+0x54>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_MspInit+0x54>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_MspInit+0x54>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_MspInit+0x54>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	210f      	movs	r1, #15
 8001cba:	f06f 0001 	mvn.w	r0, #1
 8001cbe:	f001 f883 	bl	8002dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_CAN_MspInit+0xa0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d13a      	bne.n	8001d68 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001cfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_CAN_MspInit+0xa4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d58:	2309      	movs	r3, #9
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_CAN_MspInit+0xa8>)
 8001d64:	f001 f8fa 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40006800 	.word	0x40006800
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_I2C_MspInit+0x94>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d134      	bne.n	8001e08 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001dba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4810      	ldr	r0, [pc, #64]	; (8001e18 <HAL_I2C_MspInit+0x9c>)
 8001dd8:	f001 f8c0 	bl	8002f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_I2C_MspInit+0x98>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2106      	movs	r1, #6
 8001dfc:	201f      	movs	r0, #31
 8001dfe:	f000 ffe3 	bl	8002dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e02:	201f      	movs	r0, #31
 8001e04:	f000 fffc 	bl	8002e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020400 	.word	0x40020400

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <HAL_UART_MspInit+0xf8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d134      	bne.n	8001ea8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001e76:	230c      	movs	r3, #12
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e86:	2307      	movs	r3, #7
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4822      	ldr	r0, [pc, #136]	; (8001f1c <HAL_UART_MspInit+0x100>)
 8001e92:	f001 f863 	bl	8002f5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2106      	movs	r1, #6
 8001e9a:	2026      	movs	r0, #38	; 0x26
 8001e9c:	f000 ff94 	bl	8002dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ea0:	2026      	movs	r0, #38	; 0x26
 8001ea2:	f000 ffad 	bl	8002e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ea6:	e031      	b.n	8001f0c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_UART_MspInit+0x104>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12c      	bne.n	8001f0c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_UART_MspInit+0xfc>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_Pin;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efc:	2307      	movs	r3, #7
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <HAL_UART_MspInit+0x108>)
 8001f08:	f001 f828 	bl	8002f5c <HAL_GPIO_Init>
}
 8001f0c:	bf00      	nop
 8001f0e:	3730      	adds	r7, #48	; 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40004800 	.word	0x40004800
 8001f24:	40020400 	.word	0x40020400

08001f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_InitTick+0xe4>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a32      	ldr	r2, [pc, #200]	; (800200c <HAL_InitTick+0xe4>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_InitTick+0xe4>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f54:	f107 0210 	add.w	r2, r7, #16
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fa70 	bl	8006444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f004 fa41 	bl	80063f4 <HAL_RCC_GetPCLK1Freq>
 8001f72:	6378      	str	r0, [r7, #52]	; 0x34
 8001f74:	e004      	b.n	8001f80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f76:	f004 fa3d 	bl	80063f4 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_InitTick+0xe8>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_InitTick+0xec>)
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_InitTick+0xf0>)
 8001f92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_InitTick+0xec>)
 8001f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_InitTick+0xec>)
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_InitTick+0xec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_InitTick+0xec>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_InitTick+0xec>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <HAL_InitTick+0xec>)
 8001fb6:	f004 fa77 	bl	80064a8 <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11b      	bne.n	8002000 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fc8:	4812      	ldr	r0, [pc, #72]	; (8002014 <HAL_InitTick+0xec>)
 8001fca:	f004 fac7 	bl	800655c <HAL_TIM_Base_Start_IT>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fdc:	2036      	movs	r0, #54	; 0x36
 8001fde:	f000 ff0f 	bl	8002e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d808      	bhi.n	8001ffa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2036      	movs	r0, #54	; 0x36
 8001fee:	f000 feeb 	bl	8002dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_InitTick+0xf4>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e002      	b.n	8002000 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002004:	4618      	mov	r0, r3
 8002006:	3738      	adds	r7, #56	; 0x38
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	431bde83 	.word	0x431bde83
 8002014:	20000258 	.word	0x20000258
 8002018:	40001000 	.word	0x40001000
 800201c:	20000004 	.word	0x20000004

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <I2C1_EV_IRQHandler+0x10>)
 8002052:	f001 fe5b 	bl	8003d0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200000b0 	.word	0x200000b0

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f004 fe31 	bl	8006ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000104 	.word	0x20000104

08002074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM6_DAC_IRQHandler+0x10>)
 800207a:	f004 fadf 	bl	800663c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000258 	.word	0x20000258

08002088 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e00a      	b.n	80020b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209a:	f3af 8000 	nop.w
 800209e:	4601      	mov	r1, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	b2ca      	uxtb	r2, r1
 80020a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf0      	blt.n	800209a <_read+0x12>
  }

  return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f009 ff46 	bl	800bfec <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20020000 	.word	0x20020000
 800218c:	00000400 	.word	0x00000400
 8002190:	200002a0 	.word	0x200002a0
 8002194:	20004de0 	.word	0x20004de0

08002198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <update_crc>:
 */

#include <xl430.h>

void update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr,
		uint16_t data_blk_size) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80021c8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80021cc:	6019      	str	r1, [r3, #0]
 80021ce:	4611      	mov	r1, r2
 80021d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80021d4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80021d8:	4602      	mov	r2, r0
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80021e0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80021e4:	460a      	mov	r2, r1
 80021e6:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = { 0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E,
 80021e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80021ec:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80021f0:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <update_crc+0x128>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	4611      	mov	r1, r2
 80021f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fa:	461a      	mov	r2, r3
 80021fc:	f009 ff23 	bl	800c046 <memcpy>
			0x8257, 0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E,
			0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
			0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D,
			0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++) {
 8002200:	2300      	movs	r3, #0
 8002202:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8002206:	e031      	b.n	800226c <update_crc+0xb0>
		i = ((uint16_t) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8002208:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800220c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29a      	uxth	r2, r3
 8002216:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800221a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800221e:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8002222:	6809      	ldr	r1, [r1, #0]
 8002224:	440b      	add	r3, r1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4053      	eors	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002234:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002238:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b21a      	sxth	r2, r3
 8002242:	f8b7 120a 	ldrh.w	r1, [r7, #522]	; 0x20a
 8002246:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800224a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800224e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4053      	eors	r3, r2
 8002256:	b21a      	sxth	r2, r3
 8002258:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800225c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8002260:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++) {
 8002262:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8002266:	3301      	adds	r3, #1
 8002268:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800226c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002270:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002274:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3c4      	bcc.n	8002208 <update_crc+0x4c>
	}

	uint8_t crc_l = (uint8_t) (crc_accum & 0x00FF);
 800227e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002282:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	uint8_t crc_h = (uint8_t) ((crc_accum >> 8) & 0x00FF);
 800228c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002290:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c

	data_blk_ptr[data_blk_size] = crc_l;
 800229e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022a2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80022ac:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80022b8:	701a      	strb	r2, [r3, #0]
	data_blk_ptr[data_blk_size + 1] = crc_h;
 80022ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80022ca:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800cc5c 	.word	0x0800cc5c

080022e8 <xl430Cmd>:

void xl430Cmd(uint8_t id, uint8_t instruction, uint8_t *param, uint16_t param_len) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	603a      	str	r2, [r7, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	460b      	mov	r3, r1
 80022f8:	71bb      	strb	r3, [r7, #6]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80bb      	strh	r3, [r7, #4]
	uint16_t total_len = param_len + 10;
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	330a      	adds	r3, #10
 8002302:	81bb      	strh	r3, [r7, #12]
	uint8_t len_l = (uint8_t) ((param_len + 3) & 0x00FF);
 8002304:	88bb      	ldrh	r3, [r7, #4]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3303      	adds	r3, #3
 800230a:	72fb      	strb	r3, [r7, #11]
	uint8_t len_h = (uint8_t) (((param_len + 3) >> 8) & 0x00FF);
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	3303      	adds	r3, #3
 8002310:	121b      	asrs	r3, r3, #8
 8002312:	72bb      	strb	r3, [r7, #10]

	tx_packet[0] = 0xFF;
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <xl430Cmd+0xb0>)
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	701a      	strb	r2, [r3, #0]
	tx_packet[1] = 0xFF;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <xl430Cmd+0xb0>)
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	705a      	strb	r2, [r3, #1]
	tx_packet[2] = 0xFD;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <xl430Cmd+0xb0>)
 8002322:	22fd      	movs	r2, #253	; 0xfd
 8002324:	709a      	strb	r2, [r3, #2]
	tx_packet[3] = 0x00;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <xl430Cmd+0xb0>)
 8002328:	2200      	movs	r2, #0
 800232a:	70da      	strb	r2, [r3, #3]
	tx_packet[4] = id;
 800232c:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <xl430Cmd+0xb0>)
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	7113      	strb	r3, [r2, #4]
	tx_packet[5] = len_l;
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <xl430Cmd+0xb0>)
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	7153      	strb	r3, [r2, #5]
	tx_packet[6] = len_h;
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <xl430Cmd+0xb0>)
 800233a:	7abb      	ldrb	r3, [r7, #10]
 800233c:	7193      	strb	r3, [r2, #6]
	tx_packet[7] = instruction;
 800233e:	4a16      	ldr	r2, [pc, #88]	; (8002398 <xl430Cmd+0xb0>)
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	71d3      	strb	r3, [r2, #7]

	for (uint8_t i = 0; i < param_len; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e00a      	b.n	8002360 <xl430Cmd+0x78>
		tx_packet[8 + i] = param[i];
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	441a      	add	r2, r3
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3308      	adds	r3, #8
 8002354:	7811      	ldrb	r1, [r2, #0]
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <xl430Cmd+0xb0>)
 8002358:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < param_len; i++) {
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	b29b      	uxth	r3, r3
 8002364:	88ba      	ldrh	r2, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d8ef      	bhi.n	800234a <xl430Cmd+0x62>
	}

	update_crc(0, tx_packet, (total_len - 2));
 800236a:	89bb      	ldrh	r3, [r7, #12]
 800236c:	3b02      	subs	r3, #2
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4909      	ldr	r1, [pc, #36]	; (8002398 <xl430Cmd+0xb0>)
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ff21 	bl	80021bc <update_crc>

//	HAL_HalfDuplex_EnableTransmitter(&huart3);

	HAL_UART_Transmit(&huart3, tx_packet, total_len, HAL_MAX_DELAY);
 800237a:	89ba      	ldrh	r2, [r7, #12]
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	4905      	ldr	r1, [pc, #20]	; (8002398 <xl430Cmd+0xb0>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <xl430Cmd+0xb4>)
 8002384:	f004 fbe0 	bl	8006b48 <HAL_UART_Transmit>

//	HAL_HalfDuplex_EnableReceiver(&huart3);

	osDelay(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f005 fd27 	bl	8007ddc <osDelay>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000218 	.word	0x20000218
 800239c:	20000148 	.word	0x20000148

080023a0 <xl430TorqueEnable>:
	data[2] = baudrate_mode;

	xl430Cmd(id, 0x03, data, 3);
}

void xl430TorqueEnable(uint8_t id, uint8_t Torque_mode) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	460a      	mov	r2, r1
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = { 0x00 };
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <xl430TorqueEnable+0x3c>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	81bb      	strh	r3, [r7, #12]
 80023b6:	2300      	movs	r3, #0
 80023b8:	73bb      	strb	r3, [r7, #14]
	data[0] = 0x40;
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	737b      	strb	r3, [r7, #13]
	data[2] = Torque_mode;
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	73bb      	strb	r3, [r7, #14]

	xl430Cmd(id, 0x03, data, 3);
 80023c6:	f107 020c 	add.w	r2, r7, #12
 80023ca:	79f8      	ldrb	r0, [r7, #7]
 80023cc:	2303      	movs	r3, #3
 80023ce:	2103      	movs	r1, #3
 80023d0:	f7ff ff8a 	bl	80022e8 <xl430Cmd>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800ce5c 	.word	0x0800ce5c

080023e0 <xl430GoalPos>:

void xl430GoalPos(uint8_t id, uint32_t angle) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
	/* Angle Range : 0 ~ 360*/
	uint8_t data[6] = { 0x00 };
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	2300      	movs	r3, #0
 80023f2:	82bb      	strh	r3, [r7, #20]
	uint32_t pos = (uint32_t)(((float)4096 / (float)360) * (float)angle);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002444 <xl430GoalPos+0x64>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240a:	ee17 3a90 	vmov	r3, s15
 800240e:	60fb      	str	r3, [r7, #12]

	data[0] = 0x74;
 8002410:	2374      	movs	r3, #116	; 0x74
 8002412:	743b      	strb	r3, [r7, #16]
	data[1] = 0x00;
 8002414:	2300      	movs	r3, #0
 8002416:	747b      	strb	r3, [r7, #17]
	data[2] = *((uint8_t*) (&pos));
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	74bb      	strb	r3, [r7, #18]
	data[3] = *((uint8_t*) (&pos) + 1);
 8002420:	7b7b      	ldrb	r3, [r7, #13]
 8002422:	74fb      	strb	r3, [r7, #19]
	data[4] = *((uint8_t*) (&pos) + 2);
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	753b      	strb	r3, [r7, #20]
	data[5] = *((uint8_t*) (&pos) + 3);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	757b      	strb	r3, [r7, #21]

	xl430Cmd(id, 0x03, data, 6);
 800242c:	f107 0210 	add.w	r2, r7, #16
 8002430:	79f8      	ldrb	r0, [r7, #7]
 8002432:	2306      	movs	r3, #6
 8002434:	2103      	movs	r1, #3
 8002436:	f7ff ff57 	bl	80022e8 <xl430Cmd>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	41360b61 	.word	0x41360b61

08002448 <xl430ProfVelo>:
	HAL_UART_Transmit(&huart3, tx_packet, 10, HAL_MAX_DELAY);

	HAL_HalfDuplex_EnableReceiver(&huart3);
}

void xl430ProfVelo(uint8_t id, uint32_t value) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
	/* value: 0 ~ 32767
	 * 1 = 0.229 [rev/min]
	 * */
	uint8_t data[6] = { 0x00 };
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	2300      	movs	r3, #0
 800245a:	81bb      	strh	r3, [r7, #12]
	data[0] = 0x70;
 800245c:	2370      	movs	r3, #112	; 0x70
 800245e:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00;
 8002460:	2300      	movs	r3, #0
 8002462:	727b      	strb	r3, [r7, #9]
	data[2] = *((uint8_t*) (&value));
 8002464:	463b      	mov	r3, r7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	72bb      	strb	r3, [r7, #10]
	data[3] = *((uint8_t*) (&value) + 1);
 800246a:	787b      	ldrb	r3, [r7, #1]
 800246c:	72fb      	strb	r3, [r7, #11]
	data[4] = *((uint8_t*) (&value) + 2);
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	733b      	strb	r3, [r7, #12]
	data[5] = *((uint8_t*) (&value) + 3);
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	737b      	strb	r3, [r7, #13]

	xl430Cmd(id, 0x03, data, 6);
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	79f8      	ldrb	r0, [r7, #7]
 800247c:	2306      	movs	r3, #6
 800247e:	2103      	movs	r1, #3
 8002480:	f7ff ff32 	bl	80022e8 <xl430Cmd>
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002490:	480d      	ldr	r0, [pc, #52]	; (80024c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002492:	490e      	ldr	r1, [pc, #56]	; (80024cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002498:	e002      	b.n	80024a0 <LoopCopyDataInit>

0800249a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800249c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249e:	3304      	adds	r3, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a4:	d3f9      	bcc.n	800249a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a8:	4c0b      	ldr	r4, [pc, #44]	; (80024d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ac:	e001      	b.n	80024b2 <LoopFillZerobss>

080024ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b0:	3204      	adds	r2, #4

080024b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b4:	d3fb      	bcc.n	80024ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024b6:	f7ff fe6f 	bl	8002198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ba:	f009 fd9d 	bl	800bff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024be:	f7fe f945 	bl	800074c <main>
  bx  lr    
 80024c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80024d0:	0800d164 	.word	0x0800d164
  ldr r2, =_sbss
 80024d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80024d8:	20004ddc 	.word	0x20004ddc

080024dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_Init+0x40>)
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_Init+0x40>)
 80024f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_Init+0x40>)
 8002502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f000 fc52 	bl	8002db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250e:	200f      	movs	r0, #15
 8002510:	f7ff fd0a 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002514:	f7ff fbb0 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000008 	.word	0x20000008
 8002548:	200002a4 	.word	0x200002a4

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	200002a4 	.word	0x200002a4

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0ed      	b.n	800279a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fb80 	bl	8001cd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e0:	f7ff ffb4 	bl	800254c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025e6:	e012      	b.n	800260e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025e8:	f7ff ffb0 	bl	800254c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b0a      	cmp	r3, #10
 80025f4:	d90b      	bls.n	800260e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2205      	movs	r2, #5
 8002606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0c5      	b.n	800279a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0e5      	beq.n	80025e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0202 	bic.w	r2, r2, #2
 800262a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800262c:	f7ff ff8e 	bl	800254c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002632:	e012      	b.n	800265a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002634:	f7ff ff8a 	bl	800254c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b0a      	cmp	r3, #10
 8002640:	d90b      	bls.n	800265a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2205      	movs	r2, #5
 8002652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e09f      	b.n	800279a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e5      	bne.n	8002634 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7e1b      	ldrb	r3, [r3, #24]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d108      	bne.n	8002682 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e007      	b.n	8002692 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7e5b      	ldrb	r3, [r3, #25]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e007      	b.n	80026bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7e9b      	ldrb	r3, [r3, #26]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e007      	b.n	80026e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0220 	bic.w	r2, r2, #32
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7edb      	ldrb	r3, [r3, #27]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0210 	bic.w	r2, r2, #16
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0210 	orr.w	r2, r2, #16
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7f1b      	ldrb	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d108      	bne.n	800272a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e007      	b.n	800273a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0208 	bic.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7f5b      	ldrb	r3, [r3, #29]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0204 	orr.w	r2, r2, #4
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e007      	b.n	8002764 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0204 	bic.w	r2, r2, #4
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	1e5a      	subs	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d003      	beq.n	80027ca <HAL_CAN_ConfigFilter+0x26>
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 80be 	bne.w	8002946 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_CAN_ConfigFilter+0x1bc>)
 80027cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2201      	movs	r2, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	401a      	ands	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d123      	bne.n	8002874 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800284e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3248      	adds	r2, #72	; 0x48
 8002854:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002868:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	3348      	adds	r3, #72	; 0x48
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d122      	bne.n	80028c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800289c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3248      	adds	r2, #72	; 0x48
 80028a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	3348      	adds	r3, #72	; 0x48
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028dc:	e007      	b.n	80028ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002908:	e007      	b.n	800291a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	431a      	orrs	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002938:	f023 0201 	bic.w	r2, r3, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e006      	b.n	8002954 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40006400 	.word	0x40006400

08002964 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d12e      	bne.n	80029d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002990:	f7ff fddc 	bl	800254c <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002996:	e012      	b.n	80029be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002998:	f7ff fdd8 	bl	800254c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d90b      	bls.n	80029be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2205      	movs	r2, #5
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e012      	b.n	80029e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e5      	bne.n	8002998 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e006      	b.n	80029e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d003      	beq.n	8002a18 <HAL_CAN_AddTxMessage+0x2c>
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f040 80b8 	bne.w	8002b88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a0 	beq.w	8002b78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	0e1b      	lsrs	r3, r3, #24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e09e      	b.n	8002b96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	6809      	ldr	r1, [r1, #0]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	440b      	add	r3, r1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e00f      	b.n	8002aa6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	440b      	add	r3, r1
 8002aa4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3318      	adds	r3, #24
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	7d1b      	ldrb	r3, [r3, #20]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d111      	bne.n	8002ae6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3318      	adds	r3, #24
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3307      	adds	r3, #7
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3306      	adds	r3, #6
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3305      	adds	r3, #5
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4313      	orrs	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	3204      	adds	r2, #4
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	4610      	mov	r0, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	ea43 0200 	orr.w	r2, r3, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3303      	adds	r3, #3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	061a      	lsls	r2, r3, #24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3301      	adds	r3, #1
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	4610      	mov	r0, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	6811      	ldr	r1, [r2, #0]
 8002b44:	ea43 0200 	orr.w	r2, r3, r0
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	6811      	ldr	r1, [r2, #0]
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e00e      	b.n	8002b96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e006      	b.n	8002b96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d002      	beq.n	8002bc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d11d      	bne.n	8002bfe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d002      	beq.n	8002c2a <HAL_CAN_ActivateNotification+0x1e>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d109      	bne.n	8002c3e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6959      	ldr	r1, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e006      	b.n	8002c4c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <__NVIC_SetPriorityGrouping>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8a:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60d3      	str	r3, [r2, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_GetPriorityGrouping>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff4c 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dda:	f7ff ff61 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f7ff ffb1 	bl	8002d4c <NVIC_EncodePriority>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff80 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002df8:	bf00      	nop
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff54 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e2a:	f7ff fb8f 	bl	800254c <HAL_GetTick>
 8002e2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d008      	beq.n	8002e4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e052      	b.n	8002ef4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0216 	bic.w	r2, r2, #22
 8002e5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <HAL_DMA_Abort+0x62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0208 	bic.w	r2, r2, #8
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	e013      	b.n	8002ec8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea0:	f7ff fb54 	bl	800254c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d90c      	bls.n	8002ec8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e015      	b.n	8002ef4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e4      	bne.n	8002ea0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00c      	b.n	8002f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4e:	b2db      	uxtb	r3, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e16b      	b.n	8003250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 815a 	bne.w	800324a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d005      	beq.n	8002fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d130      	bne.n	8003010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0201 	and.w	r2, r3, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d017      	beq.n	800304c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d123      	bne.n	80030a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80b4 	beq.w	800324a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_GPIO_Init+0x30c>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <HAL_GPIO_Init+0x30c>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_GPIO_Init+0x30c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fe:	4a5b      	ldr	r2, [pc, #364]	; (800326c <HAL_GPIO_Init+0x310>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x314>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x318>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x31c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x320>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x21a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	; (8003280 <HAL_GPIO_Init+0x324>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x216>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	; (8003284 <HAL_GPIO_Init+0x328>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x212>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	; (8003288 <HAL_GPIO_Init+0x32c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_GPIO_Init+0x330>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x20a>
 8003162:	2307      	movs	r3, #7
 8003164:	e00e      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003166:	2308      	movs	r3, #8
 8003168:	e00c      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800316a:	2306      	movs	r3, #6
 800316c:	e00a      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800316e:	2305      	movs	r3, #5
 8003170:	e008      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003172:	2304      	movs	r3, #4
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003176:	2303      	movs	r3, #3
 8003178:	e004      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800317a:	2302      	movs	r3, #2
 800317c:	e002      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003182:	2300      	movs	r3, #0
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	f002 0203 	and.w	r2, r2, #3
 800318a:	0092      	lsls	r2, r2, #2
 800318c:	4093      	lsls	r3, r2
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003194:	4935      	ldr	r1, [pc, #212]	; (800326c <HAL_GPIO_Init+0x310>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_GPIO_Init+0x334>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <HAL_GPIO_Init+0x334>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_GPIO_Init+0x334>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_GPIO_Init+0x334>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_GPIO_Init+0x334>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <HAL_GPIO_Init+0x334>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_GPIO_Init+0x334>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003244:	4a12      	ldr	r2, [pc, #72]	; (8003290 <HAL_GPIO_Init+0x334>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b0f      	cmp	r3, #15
 8003254:	f67f ae90 	bls.w	8002f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40013800 	.word	0x40013800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	40021c00 	.word	0x40021c00
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
 80032a0:	4613      	mov	r3, r2
 80032a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a4:	787b      	ldrb	r3, [r7, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b0:	e003      	b.n	80032ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032b2:	887b      	ldrh	r3, [r7, #2]
 80032b4:	041a      	lsls	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e12b      	b.n	8003532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe fd44 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	; 0x24
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800331a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800332c:	f003 f862 	bl	80063f4 <HAL_RCC_GetPCLK1Freq>
 8003330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a81      	ldr	r2, [pc, #516]	; (800353c <HAL_I2C_Init+0x274>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d807      	bhi.n	800334c <HAL_I2C_Init+0x84>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_I2C_Init+0x278>)
 8003340:	4293      	cmp	r3, r2
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e006      	b.n	800335a <HAL_I2C_Init+0x92>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a7d      	ldr	r2, [pc, #500]	; (8003544 <HAL_I2C_Init+0x27c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	bf94      	ite	ls
 8003354:	2301      	movls	r3, #1
 8003356:	2300      	movhi	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0e7      	b.n	8003532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a78      	ldr	r2, [pc, #480]	; (8003548 <HAL_I2C_Init+0x280>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0c9b      	lsrs	r3, r3, #18
 800336c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a6a      	ldr	r2, [pc, #424]	; (800353c <HAL_I2C_Init+0x274>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d802      	bhi.n	800339c <HAL_I2C_Init+0xd4>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3301      	adds	r3, #1
 800339a:	e009      	b.n	80033b0 <HAL_I2C_Init+0xe8>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	4a69      	ldr	r2, [pc, #420]	; (800354c <HAL_I2C_Init+0x284>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	3301      	adds	r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	495c      	ldr	r1, [pc, #368]	; (800353c <HAL_I2C_Init+0x274>)
 80033cc:	428b      	cmp	r3, r1
 80033ce:	d819      	bhi.n	8003404 <HAL_I2C_Init+0x13c>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e59      	subs	r1, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	fbb1 f3f3 	udiv	r3, r1, r3
 80033de:	1c59      	adds	r1, r3, #1
 80033e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033e4:	400b      	ands	r3, r1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_I2C_Init+0x138>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e59      	subs	r1, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fe:	e051      	b.n	80034a4 <HAL_I2C_Init+0x1dc>
 8003400:	2304      	movs	r3, #4
 8003402:	e04f      	b.n	80034a4 <HAL_I2C_Init+0x1dc>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d111      	bne.n	8003430 <HAL_I2C_Init+0x168>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e58      	subs	r0, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e012      	b.n	8003456 <HAL_I2C_Init+0x18e>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	0099      	lsls	r1, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Init+0x196>
 800345a:	2301      	movs	r3, #1
 800345c:	e022      	b.n	80034a4 <HAL_I2C_Init+0x1dc>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10e      	bne.n	8003484 <HAL_I2C_Init+0x1bc>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e58      	subs	r0, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	440b      	add	r3, r1
 8003474:	fbb0 f3f3 	udiv	r3, r0, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003482:	e00f      	b.n	80034a4 <HAL_I2C_Init+0x1dc>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e58      	subs	r0, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	0099      	lsls	r1, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	6809      	ldr	r1, [r1, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6911      	ldr	r1, [r2, #16]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	000186a0 	.word	0x000186a0
 8003540:	001e847f 	.word	0x001e847f
 8003544:	003d08ff 	.word	0x003d08ff
 8003548:	431bde83 	.word	0x431bde83
 800354c:	10624dd3 	.word	0x10624dd3

08003550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7fe ffef 	bl	800254c <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 80d9 	bne.w	8003730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2319      	movs	r3, #25
 8003584:	2201      	movs	r2, #1
 8003586:	496d      	ldr	r1, [pc, #436]	; (800373c <HAL_I2C_Mem_Write+0x1ec>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f002 f899 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Write+0x56>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0c5      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2221      	movs	r2, #33	; 0x21
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <HAL_I2C_Mem_Write+0x1f0>)
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 fe28 	bl	8005274 <I2C_RequestMemoryWrite>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d052      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f002 f91a 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x180>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1aa      	bne.n	800362e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f906 	bl	80058ee <I2C_WaitOnBTFFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e016      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	460b      	mov	r3, r1
 8003758:	813b      	strh	r3, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800375e:	f7fe fef5 	bl	800254c <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b20      	cmp	r3, #32
 800376e:	f040 8208 	bne.w	8003b82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2319      	movs	r3, #25
 8003778:	2201      	movs	r2, #1
 800377a:	497b      	ldr	r1, [pc, #492]	; (8003968 <HAL_I2C_Mem_Read+0x224>)
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f001 ff9f 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	e1fb      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_I2C_Mem_Read+0x56>
 8003796:	2302      	movs	r3, #2
 8003798:	e1f4      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d007      	beq.n	80037c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2222      	movs	r2, #34	; 0x22
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a5b      	ldr	r2, [pc, #364]	; (800396c <HAL_I2C_Mem_Read+0x228>)
 8003800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003802:	88f8      	ldrh	r0, [r7, #6]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	8979      	ldrh	r1, [r7, #10]
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4603      	mov	r3, r0
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f001 fdc4 	bl	80053a0 <I2C_RequestMemoryRead>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1b0      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d113      	bne.n	8003852 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e184      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	2b01      	cmp	r3, #1
 8003858:	d11b      	bne.n	8003892 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e164      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11b      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	e144      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038e8:	e138      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	f200 80f1 	bhi.w	8003ad6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d123      	bne.n	8003944 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f002 f867 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e139      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003942:	e10b      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	2b02      	cmp	r3, #2
 800394a:	d14e      	bne.n	80039ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2200      	movs	r2, #0
 8003954:	4906      	ldr	r1, [pc, #24]	; (8003970 <HAL_I2C_Mem_Read+0x22c>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f001 feb2 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e10e      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
 8003966:	bf00      	nop
 8003968:	00100002 	.word	0x00100002
 800396c:	ffff0000 	.word	0xffff0000
 8003970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e8:	e0b8      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2200      	movs	r2, #0
 80039f2:	4966      	ldr	r1, [pc, #408]	; (8003b8c <HAL_I2C_Mem_Read+0x448>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 fe63 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0bf      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	494f      	ldr	r1, [pc, #316]	; (8003b8c <HAL_I2C_Mem_Read+0x448>)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f001 fe35 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e091      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad4:	e042      	b.n	8003b5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 ff7a 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e04c      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d118      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f aec2 	bne.w	80038ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010004 	.word	0x00010004

08003b90 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	813b      	strh	r3, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	f040 809a 	bne.w	8003cf0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_I2C_Mem_Read_IT+0x170>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_I2C_Mem_Read_IT+0x174>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	0a1a      	lsrs	r2, r3, #8
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	009a      	lsls	r2, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d116      	bne.n	8003c10 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e070      	b.n	8003cf2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d0db      	beq.n	8003bd6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2C_Mem_Read_IT+0x9c>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e062      	b.n	8003cf2 <HAL_I2C_Mem_Read_IT+0x162>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d007      	beq.n	8003c52 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c60:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2222      	movs	r2, #34	; 0x22
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_I2C_Mem_Read_IT+0x178>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c94:	897a      	ldrh	r2, [r7, #10]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c9a:	893a      	ldrh	r2, [r7, #8]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003cea:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000
 8003d04:	14f8b589 	.word	0x14f8b589
 8003d08:	ffff0000 	.word	0xffff0000

08003d0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d003      	beq.n	8003d44 <HAL_I2C_EV_IRQHandler+0x38>
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	f040 80b1 	bne.w	8003ea6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_I2C_EV_IRQHandler+0x6e>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d64:	d003      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x62>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_EV_IRQHandler+0x66>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x68>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f000 8114 	beq.w	8003fa2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x90>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fea5 	bl	8005ade <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fcc3 	bl	8004720 <I2C_Master_SB>
 8003d9a:	e083      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0xac>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fd3b 	bl	800482c <I2C_Master_ADD10>
 8003db6:	e075      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fd57 	bl	8004880 <I2C_Master_ADDR>
 8003dd2:	e067      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dec:	f000 80db 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x10a>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x10a>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f93b 	bl	800408a <I2C_MasterTransmit_TXE>
 8003e14:	e046      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80c2 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80bc 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e2e:	7bbb      	ldrb	r3, [r7, #14]
 8003e30:	2b21      	cmp	r3, #33	; 0x21
 8003e32:	d103      	bne.n	8003e3c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9c4 	bl	80041c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3a:	e0b4      	b.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	f040 80b1 	bne.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa32 	bl	80042ae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4a:	e0ac      	b.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	f000 80a4 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x178>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x178>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 faaa 	bl	80043d6 <I2C_MasterReceive_RXNE>
 8003e82:	e00f      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 808b 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8085 	beq.w	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb55 	bl	800454c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea2:	e080      	b.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003ea4:	e07f      	b.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e007      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00c      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 ff15 	bl	8004d1e <I2C_Slave_ADDR>
 8003ef4:	e05a      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_I2C_EV_IRQHandler+0x206>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 ff50 	bl	8004db0 <I2C_Slave_STOPF>
 8003f10:	e04c      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f12:	7bbb      	ldrb	r3, [r7, #14]
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d002      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0x212>
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	2b29      	cmp	r3, #41	; 0x29
 8003f1c:	d120      	bne.n	8003f60 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_I2C_EV_IRQHandler+0x238>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_I2C_EV_IRQHandler+0x238>
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fe30 	bl	8004ba2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f42:	e032      	b.n	8003faa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02d      	beq.n	8003faa <HAL_I2C_EV_IRQHandler+0x29e>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d028      	beq.n	8003faa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fe5f 	bl	8004c1c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f5e:	e024      	b.n	8003faa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x27a>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x27a>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fe6d 	bl	8004c5e <I2C_SlaveReceive_RXNE>
 8003f84:	e012      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fe9d 	bl	8004cda <I2C_SlaveReceive_BTF>
 8003fa0:	e004      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003faa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
 800400e:	4613      	mov	r3, r2
 8004010:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d150      	bne.n	8004152 <I2C_MasterTransmit_TXE+0xc8>
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b21      	cmp	r3, #33	; 0x21
 80040b4:	d14d      	bne.n	8004152 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d01d      	beq.n	80040f8 <I2C_MasterTransmit_TXE+0x6e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d01a      	beq.n	80040f8 <I2C_MasterTransmit_TXE+0x6e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c8:	d016      	beq.n	80040f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2211      	movs	r2, #17
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff5e 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040f6:	e060      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004106:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d107      	bne.n	8004142 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff ff79 	bl	8004032 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004140:	e03b      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff31 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004150:	e033      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b21      	cmp	r3, #33	; 0x21
 8004156:	d005      	beq.n	8004164 <I2C_MasterTransmit_TXE+0xda>
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d12d      	bne.n	80041ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b22      	cmp	r3, #34	; 0x22
 8004162:	d12a      	bne.n	80041ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800417e:	e01c      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d103      	bne.n	8004194 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f88e 	bl	80042ae <I2C_MemoryTransmit_TXE_BTF>
}
 8004192:	e012      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041b8:	e7ff      	b.n	80041ba <I2C_MasterTransmit_TXE+0x130>
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d164      	bne.n	80042a6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800420a:	e04c      	b.n	80042a6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d01d      	beq.n	800424e <I2C_MasterTransmit_BTF+0x8c>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b20      	cmp	r3, #32
 8004216:	d01a      	beq.n	800424e <I2C_MasterTransmit_BTF+0x8c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800421e:	d016      	beq.n	800424e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2211      	movs	r2, #17
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff feb3 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
}
 800424c:	e02b      	b.n	80042a6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800425c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d107      	bne.n	8004298 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fece 	bl	8004032 <HAL_I2C_MemTxCpltCallback>
}
 8004296:	e006      	b.n	80042a6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fe86 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11d      	bne.n	8004302 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10b      	bne.n	80042e6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042e4:	e073      	b.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	121b      	asrs	r3, r3, #8
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004300:	e065      	b.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10b      	bne.n	8004322 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004320:	e055      	b.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	2b02      	cmp	r3, #2
 8004328:	d151      	bne.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b22      	cmp	r3, #34	; 0x22
 800432e:	d10d      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800433e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	651a      	str	r2, [r3, #80]	; 0x50
}
 800434a:	e040      	b.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d015      	beq.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b21      	cmp	r3, #33	; 0x21
 800435a:	d112      	bne.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004380:	e025      	b.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d120      	bne.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b21      	cmp	r3, #33	; 0x21
 8004390:	d11d      	bne.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fe32 	bl	8004032 <HAL_I2C_MemTxCpltCallback>
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b22      	cmp	r3, #34	; 0x22
 80043e8:	f040 80ac 	bne.w	8004544 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d921      	bls.n	800443e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b03      	cmp	r3, #3
 8004428:	f040 808c 	bne.w	8004544 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800443c:	e082      	b.n	8004544 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	2b02      	cmp	r3, #2
 8004444:	d075      	beq.n	8004532 <I2C_MasterReceive_RXNE+0x15c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <I2C_MasterReceive_RXNE+0x7c>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d16f      	bne.n	8004532 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f001 fa8c 	bl	8005970 <I2C_WaitOnSTOPRequestThroughIT>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d142      	bne.n	80044e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d10a      	bne.n	80044ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fbbe 	bl	8000c48 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044cc:	e03a      	b.n	8004544 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2212      	movs	r2, #18
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fd72 	bl	8003fc6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044e2:	e02f      	b.n	8004544 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fd8b 	bl	8004046 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004530:	e008      	b.n	8004544 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004540:	605a      	str	r2, [r3, #4]
}
 8004542:	e7ff      	b.n	8004544 <I2C_MasterReceive_RXNE+0x16e>
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b04      	cmp	r3, #4
 8004562:	d11b      	bne.n	800459c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800459a:	e0bd      	b.n	8004718 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d129      	bne.n	80045fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d00a      	beq.n	80045d2 <I2C_MasterReceive_BTF+0x86>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d007      	beq.n	80045d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045f8:	e08e      	b.n	8004718 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d176      	bne.n	80046f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d002      	beq.n	8004610 <I2C_MasterReceive_BTF+0xc4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b10      	cmp	r3, #16
 800460e:	d108      	bne.n	8004622 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e019      	b.n	8004656 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d002      	beq.n	800462e <I2C_MasterReceive_BTF+0xe2>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d108      	bne.n	8004640 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e00a      	b.n	8004656 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b10      	cmp	r3, #16
 8004644:	d007      	beq.n	8004656 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d10a      	bne.n	80046dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc fab7 	bl	8000c48 <HAL_I2C_MemRxCpltCallback>
}
 80046da:	e01d      	b.n	8004718 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2212      	movs	r2, #18
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fc6b 	bl	8003fc6 <HAL_I2C_MasterRxCpltCallback>
}
 80046f0:	e012      	b.n	8004718 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d117      	bne.n	8004764 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800474c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800474e:	e067      	b.n	8004820 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]
}
 8004762:	e05d      	b.n	8004820 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476c:	d133      	bne.n	80047d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b21      	cmp	r3, #33	; 0x21
 8004778:	d109      	bne.n	800478e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800478a:	611a      	str	r2, [r3, #16]
 800478c:	e008      	b.n	80047a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	b2da      	uxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <I2C_Master_SB+0x92>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d032      	beq.n	8004820 <I2C_Master_SB+0x100>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02d      	beq.n	8004820 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	605a      	str	r2, [r3, #4]
}
 80047d4:	e024      	b.n	8004820 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	11db      	asrs	r3, r3, #7
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 0306 	and.w	r3, r3, #6
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f063 030f 	orn	r3, r3, #15
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]
}
 80047fa:	e011      	b.n	8004820 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10d      	bne.n	8004820 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	b29b      	uxth	r3, r3
 800480a:	11db      	asrs	r3, r3, #7
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0306 	and.w	r3, r3, #6
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f063 030e 	orn	r3, r3, #14
 8004818:	b2da      	uxtb	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	b2da      	uxtb	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <I2C_Master_ADD10+0x26>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <I2C_Master_ADD10+0x48>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b091      	sub	sp, #68	; 0x44
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b22      	cmp	r3, #34	; 0x22
 80048a8:	f040 8169 	bne.w	8004b7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <I2C_Master_ADDR+0x54>
 80048b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d10b      	bne.n	80048d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048bc:	2300      	movs	r3, #0
 80048be:	633b      	str	r3, [r7, #48]	; 0x30
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	e160      	b.n	8004b96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11d      	bne.n	8004918 <I2C_Master_ADDR+0x98>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048e4:	d118      	bne.n	8004918 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
 8004916:	e13e      	b.n	8004b96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d113      	bne.n	800494a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004922:	2300      	movs	r3, #0
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e115      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 808a 	bne.w	8004a6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800495c:	d137      	bne.n	80049ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497c:	d113      	bne.n	80049a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	e0e7      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e0d3      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d02e      	beq.n	8004a32 <I2C_Master_ADDR+0x1b2>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d02b      	beq.n	8004a32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	2b12      	cmp	r3, #18
 80049de:	d102      	bne.n	80049e6 <I2C_Master_ADDR+0x166>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d125      	bne.n	8004a32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d00e      	beq.n	8004a0a <I2C_Master_ADDR+0x18a>
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d00b      	beq.n	8004a0a <I2C_Master_ADDR+0x18a>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d008      	beq.n	8004a0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e007      	b.n	8004a1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	e0a1      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e085      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d14d      	bne.n	8004b10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d016      	beq.n	8004aa8 <I2C_Master_ADDR+0x228>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d013      	beq.n	8004aa8 <I2C_Master_ADDR+0x228>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d010      	beq.n	8004aa8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e007      	b.n	8004ab8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac6:	d117      	bne.n	8004af8 <I2C_Master_ADDR+0x278>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ace:	d00b      	beq.n	8004ae8 <I2C_Master_ADDR+0x268>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d008      	beq.n	8004ae8 <I2C_Master_ADDR+0x268>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d005      	beq.n	8004ae8 <I2C_Master_ADDR+0x268>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d002      	beq.n	8004ae8 <I2C_Master_ADDR+0x268>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d107      	bne.n	8004af8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	e032      	b.n	8004b76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d117      	bne.n	8004b60 <I2C_Master_ADDR+0x2e0>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b36:	d00b      	beq.n	8004b50 <I2C_Master_ADDR+0x2d0>
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d008      	beq.n	8004b50 <I2C_Master_ADDR+0x2d0>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d005      	beq.n	8004b50 <I2C_Master_ADDR+0x2d0>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d002      	beq.n	8004b50 <I2C_Master_ADDR+0x2d0>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d107      	bne.n	8004b60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b7c:	e00b      	b.n	8004b96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
}
 8004b94:	e7ff      	b.n	8004b96 <I2C_Master_ADDR+0x316>
 8004b96:	bf00      	nop
 8004b98:	3744      	adds	r7, #68	; 0x44
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02b      	beq.n	8004c14 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d114      	bne.n	8004c14 <I2C_SlaveTransmit_TXE+0x72>
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b29      	cmp	r3, #41	; 0x29
 8004bee:	d111      	bne.n	8004c14 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2221      	movs	r2, #33	; 0x21
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2228      	movs	r2, #40	; 0x28
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff f9e3 	bl	8003fda <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02c      	beq.n	8004cd2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d114      	bne.n	8004cd2 <I2C_SlaveReceive_RXNE+0x74>
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b2a      	cmp	r3, #42	; 0x2a
 8004cac:	d111      	bne.n	8004cd2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2222      	movs	r2, #34	; 0x22
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2228      	movs	r2, #40	; 0x28
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff f98e 	bl	8003fee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d012      	beq.n	8004d12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d38:	2b28      	cmp	r3, #40	; 0x28
 8004d3a:	d125      	bne.n	8004d88 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	81bb      	strh	r3, [r7, #12]
 8004d6a:	e002      	b.n	8004d72 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d7a:	89ba      	ldrh	r2, [r7, #12]
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff f93e 	bl	8004002 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d86:	e00e      	b.n	8004da6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d172      	bne.n	8004ef4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b22      	cmp	r3, #34	; 0x22
 8004e12:	d002      	beq.n	8004e1a <I2C_Slave_STOPF+0x6a>
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b2a      	cmp	r3, #42	; 0x2a
 8004e18:	d135      	bne.n	8004e86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0204 	orr.w	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe f874 	bl	8002f40 <HAL_DMA_GetState>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d049      	beq.n	8004ef2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	4a69      	ldr	r2, [pc, #420]	; (8005008 <I2C_Slave_STOPF+0x258>)
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe f846 	bl	8002efc <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d03d      	beq.n	8004ef2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e84:	e035      	b.n	8004ef2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe f83e 	bl	8002f40 <HAL_DMA_GetState>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d014      	beq.n	8004ef4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	4a4e      	ldr	r2, [pc, #312]	; (8005008 <I2C_Slave_STOPF+0x258>)
 8004ed0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe f810 	bl	8002efc <HAL_DMA_Abort_IT>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eec:	4610      	mov	r0, r2
 8004eee:	4798      	blx	r3
 8004ef0:	e000      	b.n	8004ef4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ef2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d03e      	beq.n	8004f7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d112      	bne.n	8004f32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d112      	bne.n	8004f66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f043 0204 	orr.w	r2, r3, #4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f843 	bl	8005010 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f8a:	e039      	b.n	8005000 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f90:	d109      	bne.n	8004fa6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2228      	movs	r2, #40	; 0x28
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff f824 	bl	8003fee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b28      	cmp	r3, #40	; 0x28
 8004fb0:	d111      	bne.n	8004fd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a15      	ldr	r2, [pc, #84]	; (800500c <I2C_Slave_STOPF+0x25c>)
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff f825 	bl	800401e <HAL_I2C_ListenCpltCallback>
}
 8004fd4:	e014      	b.n	8005000 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	2b22      	cmp	r3, #34	; 0x22
 8004fdc:	d002      	beq.n	8004fe4 <I2C_Slave_STOPF+0x234>
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b22      	cmp	r3, #34	; 0x22
 8004fe2:	d10d      	bne.n	8005000 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fe fff7 	bl	8003fee <HAL_I2C_SlaveRxCpltCallback>
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08005571 	.word	0x08005571
 800500c:	ffff0000 	.word	0xffff0000

08005010 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005028:	7bbb      	ldrb	r3, [r7, #14]
 800502a:	2b10      	cmp	r3, #16
 800502c:	d002      	beq.n	8005034 <I2C_ITError+0x24>
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d10a      	bne.n	800504a <I2C_ITError+0x3a>
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b22      	cmp	r3, #34	; 0x22
 8005038:	d107      	bne.n	800504a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005048:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005050:	2b28      	cmp	r3, #40	; 0x28
 8005052:	d107      	bne.n	8005064 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2228      	movs	r2, #40	; 0x28
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005062:	e015      	b.n	8005090 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	d00a      	beq.n	800508a <I2C_ITError+0x7a>
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b60      	cmp	r3, #96	; 0x60
 8005078:	d007      	beq.n	800508a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d162      	bne.n	8005166 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d020      	beq.n	8005100 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	4a6a      	ldr	r2, [pc, #424]	; (800526c <I2C_ITError+0x25c>)
 80050c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd ff16 	bl	8002efc <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8089 	beq.w	80051ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050fa:	4610      	mov	r0, r2
 80050fc:	4798      	blx	r3
 80050fe:	e074      	b.n	80051ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	4a59      	ldr	r2, [pc, #356]	; (800526c <I2C_ITError+0x25c>)
 8005106:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	4618      	mov	r0, r3
 800510e:	f7fd fef5 	bl	8002efc <HAL_DMA_Abort_IT>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d068      	beq.n	80051ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d10b      	bne.n	800513e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
 8005164:	e041      	b.n	80051ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b60      	cmp	r3, #96	; 0x60
 8005170:	d125      	bne.n	80051be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d10b      	bne.n	80051a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fe ff4f 	bl	800405a <HAL_I2C_AbortCpltCallback>
 80051bc:	e015      	b.n	80051ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d10b      	bne.n	80051e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fe ff2e 	bl	8004046 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10e      	bne.n	8005218 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d113      	bne.n	8005264 <I2C_ITError+0x254>
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b28      	cmp	r3, #40	; 0x28
 8005240:	d110      	bne.n	8005264 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <I2C_ITError+0x260>)
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fe fedd 	bl	800401e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08005571 	.word	0x08005571
 8005270:	ffff0000 	.word	0xffff0000

08005274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	817b      	strh	r3, [r7, #10]
 8005286:	460b      	mov	r3, r1
 8005288:	813b      	strh	r3, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa08 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d103      	bne.n	80052ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e05f      	b.n	8005392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	492d      	ldr	r1, [pc, #180]	; (800539c <I2C_RequestMemoryWrite+0x128>)
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fa40 	bl	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e04c      	b.n	8005392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	6a39      	ldr	r1, [r7, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 faaa 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b04      	cmp	r3, #4
 8005324:	d107      	bne.n	8005336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e02b      	b.n	8005392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d105      	bne.n	800534c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]
 800534a:	e021      	b.n	8005390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800534c:	893b      	ldrh	r3, [r7, #8]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b29b      	uxth	r3, r3
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa84 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b04      	cmp	r3, #4
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e005      	b.n	8005392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005386:	893b      	ldrh	r3, [r7, #8]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	00010002 	.word	0x00010002

080053a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	817b      	strh	r3, [r7, #10]
 80053b2:	460b      	mov	r3, r1
 80053b4:	813b      	strh	r3, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f96a 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d103      	bne.n	800540a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0aa      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800541c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	4952      	ldr	r1, [pc, #328]	; (800556c <I2C_RequestMemoryRead+0x1cc>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f9a2 	bl	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e097      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fa0c 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e076      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d105      	bne.n	8005488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800547c:	893b      	ldrh	r3, [r7, #8]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	e021      	b.n	80054cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005488:	893b      	ldrh	r3, [r7, #8]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	b29b      	uxth	r3, r3
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f9e6 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e050      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c2:	893b      	ldrh	r3, [r7, #8]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	6a39      	ldr	r1, [r7, #32]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9cb 	bl	800586c <I2C_WaitOnTXEFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e035      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8d3 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e013      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	4906      	ldr	r1, [pc, #24]	; (800556c <I2C_RequestMemoryRead+0x1cc>)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f90b 	bl	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005588:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800558a:	4b4b      	ldr	r3, [pc, #300]	; (80056b8 <I2C_DMAAbort+0x148>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	08db      	lsrs	r3, r3, #3
 8005590:	4a4a      	ldr	r2, [pc, #296]	; (80056bc <I2C_DMAAbort+0x14c>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0a1a      	lsrs	r2, r3, #8
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00da      	lsls	r2, r3, #3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055b6:	e00a      	b.n	80055ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	d0ea      	beq.n	80055a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	2200      	movs	r2, #0
 80055dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	2200      	movs	r2, #0
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	2200      	movs	r2, #0
 8005612:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b60      	cmp	r3, #96	; 0x60
 800563e:	d10e      	bne.n	800565e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7fe fcff 	bl	800405a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800565c:	e027      	b.n	80056ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005664:	2b28      	cmp	r3, #40	; 0x28
 8005666:	d117      	bne.n	8005698 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005686:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2228      	movs	r2, #40	; 0x28
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005696:	e007      	b.n	80056a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056a8:	6978      	ldr	r0, [r7, #20]
 80056aa:	f7fe fccc 	bl	8004046 <HAL_I2C_ErrorCallback>
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000000 	.word	0x20000000
 80056bc:	14f8b589 	.word	0x14f8b589

080056c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d0:	e025      	b.n	800571e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d021      	beq.n	800571e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fc ff37 	bl	800254c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e023      	b.n	8005766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10d      	bne.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	e00c      	b.n	800575e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	43da      	mvns	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0b6      	beq.n	80056d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800577c:	e051      	b.n	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d123      	bne.n	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f043 0204 	orr.w	r2, r3, #4
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e046      	b.n	8005864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d021      	beq.n	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fc feb5 	bl	800254c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d116      	bne.n	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e020      	b.n	8005864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10c      	bne.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e00b      	b.n	800585e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d18d      	bne.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005878:	e02d      	b.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f900 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e02d      	b.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d021      	beq.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fc fe5b 	bl	800254c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d116      	bne.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e007      	b.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d1ca      	bne.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058fa:	e02d      	b.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f8bf 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e02d      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d021      	beq.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005914:	f7fc fe1a 	bl	800254c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d302      	bcc.n	800592a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d116      	bne.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e007      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d1ca      	bne.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800597c:	4b13      	ldr	r3, [pc, #76]	; (80059cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	0a1a      	lsrs	r2, r3, #8
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3b01      	subs	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e008      	b.n	80059c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059bc:	d0e9      	beq.n	8005992 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000000 	.word	0x20000000
 80059d0:	14f8b589 	.word	0x14f8b589

080059d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e0:	e042      	b.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d119      	bne.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0210 	mvn.w	r2, #16
 80059f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e029      	b.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a24:	f7fc fd92 	bl	800254c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d1b5      	bne.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	d11b      	bne.n	8005ad0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005aee:	d103      	bne.n	8005af8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005af6:	e007      	b.n	8005b08 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b00:	d102      	bne.n	8005b08 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e267      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d075      	beq.n	8005c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b32:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d00c      	beq.n	8005b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3e:	4b85      	ldr	r3, [pc, #532]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d112      	bne.n	8005b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b4a:	4b82      	ldr	r3, [pc, #520]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b56:	d10b      	bne.n	8005b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b58:	4b7e      	ldr	r3, [pc, #504]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05b      	beq.n	8005c1c <HAL_RCC_OscConfig+0x108>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d157      	bne.n	8005c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e242      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b78:	d106      	bne.n	8005b88 <HAL_RCC_OscConfig+0x74>
 8005b7a:	4b76      	ldr	r3, [pc, #472]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a75      	ldr	r2, [pc, #468]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e01d      	b.n	8005bc4 <HAL_RCC_OscConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b90:	d10c      	bne.n	8005bac <HAL_RCC_OscConfig+0x98>
 8005b92:	4b70      	ldr	r3, [pc, #448]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6f      	ldr	r2, [pc, #444]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	4b6d      	ldr	r3, [pc, #436]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6c      	ldr	r2, [pc, #432]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e00b      	b.n	8005bc4 <HAL_RCC_OscConfig+0xb0>
 8005bac:	4b69      	ldr	r3, [pc, #420]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a68      	ldr	r2, [pc, #416]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4b66      	ldr	r3, [pc, #408]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a65      	ldr	r2, [pc, #404]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d013      	beq.n	8005bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fc fcbe 	bl	800254c <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fc fcba 	bl	800254c <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e207      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b5b      	ldr	r3, [pc, #364]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0xc0>
 8005bf2:	e014      	b.n	8005c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fc fcaa 	bl	800254c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7fc fca6 	bl	800254c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e1f3      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	4b51      	ldr	r3, [pc, #324]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0xe8>
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d063      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d11c      	bne.n	8005c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c42:	4b44      	ldr	r3, [pc, #272]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d116      	bne.n	8005c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4e:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x152>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d001      	beq.n	8005c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e1c7      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4937      	ldr	r1, [pc, #220]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7a:	e03a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d020      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_OscConfig+0x244>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fc fc5f 	bl	800254c <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c92:	f7fc fc5b 	bl	800254c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e1a8      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4925      	ldr	r1, [pc, #148]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
 8005cc4:	e015      	b.n	8005cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <HAL_RCC_OscConfig+0x244>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fc3e 	bl	800254c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd4:	f7fc fc3a 	bl	800254c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e187      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d036      	beq.n	8005d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_RCC_OscConfig+0x248>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0c:	f7fc fc1e 	bl	800254c <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d14:	f7fc fc1a 	bl	800254c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e167      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_OscConfig+0x240>)
 8005d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x200>
 8005d32:	e01b      	b.n	8005d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <HAL_RCC_OscConfig+0x248>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3a:	f7fc fc07 	bl	800254c <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d40:	e00e      	b.n	8005d60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d42:	f7fc fc03 	bl	800254c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d907      	bls.n	8005d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e150      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
 8005d54:	40023800 	.word	0x40023800
 8005d58:	42470000 	.word	0x42470000
 8005d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ea      	bne.n	8005d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8097 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	4b7d      	ldr	r3, [pc, #500]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	4a7c      	ldr	r2, [pc, #496]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9a:	4b7a      	ldr	r3, [pc, #488]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da6:	2301      	movs	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005daa:	4b77      	ldr	r3, [pc, #476]	; (8005f88 <HAL_RCC_OscConfig+0x474>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d118      	bne.n	8005de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db6:	4b74      	ldr	r3, [pc, #464]	; (8005f88 <HAL_RCC_OscConfig+0x474>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a73      	ldr	r2, [pc, #460]	; (8005f88 <HAL_RCC_OscConfig+0x474>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dc2:	f7fc fbc3 	bl	800254c <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dca:	f7fc fbbf 	bl	800254c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e10c      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ddc:	4b6a      	ldr	r3, [pc, #424]	; (8005f88 <HAL_RCC_OscConfig+0x474>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d106      	bne.n	8005dfe <HAL_RCC_OscConfig+0x2ea>
 8005df0:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	4a63      	ldr	r2, [pc, #396]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005dfc:	e01c      	b.n	8005e38 <HAL_RCC_OscConfig+0x324>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x30c>
 8005e06:	4b5f      	ldr	r3, [pc, #380]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a5e      	ldr	r2, [pc, #376]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70
 8005e12:	4b5c      	ldr	r3, [pc, #368]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4a5b      	ldr	r2, [pc, #364]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1e:	e00b      	b.n	8005e38 <HAL_RCC_OscConfig+0x324>
 8005e20:	4b58      	ldr	r3, [pc, #352]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a57      	ldr	r2, [pc, #348]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a54      	ldr	r2, [pc, #336]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e32:	f023 0304 	bic.w	r3, r3, #4
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fc fb84 	bl	800254c <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f7fc fb80 	bl	800254c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e0cb      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	4b49      	ldr	r3, [pc, #292]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ee      	beq.n	8005e48 <HAL_RCC_OscConfig+0x334>
 8005e6a:	e014      	b.n	8005e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e6c:	f7fc fb6e 	bl	800254c <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e74:	f7fc fb6a 	bl	800254c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e0b5      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1ee      	bne.n	8005e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e9c:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	4a38      	ldr	r2, [pc, #224]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80a1 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d05c      	beq.n	8005f78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d141      	bne.n	8005f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec6:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <HAL_RCC_OscConfig+0x478>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7fc fb3e 	bl	800254c <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fc fb3a 	bl	800254c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e087      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	491b      	ldr	r1, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_RCC_OscConfig+0x478>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fc fb13 	bl	800254c <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fc fb0f 	bl	800254c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e05c      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x416>
 8005f48:	e054      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <HAL_RCC_OscConfig+0x478>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f50:	f7fc fafc 	bl	800254c <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fc faf8 	bl	800254c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e045      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x444>
 8005f76:	e03d      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e038      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f90:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <HAL_RCC_OscConfig+0x4ec>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d028      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d121      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d11a      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d111      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40023800 	.word	0x40023800

08006004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0cc      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006018:	4b68      	ldr	r3, [pc, #416]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d90c      	bls.n	8006040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b65      	ldr	r3, [pc, #404]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b63      	ldr	r3, [pc, #396]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0b8      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d020      	beq.n	800608e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	4a58      	ldr	r2, [pc, #352]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006070:	4b53      	ldr	r3, [pc, #332]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4a52      	ldr	r2, [pc, #328]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800607a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607c:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	494d      	ldr	r1, [pc, #308]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d044      	beq.n	8006124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d119      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e07f      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d003      	beq.n	80060c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d107      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c2:	4b3f      	ldr	r3, [pc, #252]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e06f      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e067      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060e2:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 0203 	bic.w	r2, r3, #3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4934      	ldr	r1, [pc, #208]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f4:	f7fc fa2a 	bl	800254c <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fa:	e00a      	b.n	8006112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060fc:	f7fc fa26 	bl	800254c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f241 3288 	movw	r2, #5000	; 0x1388
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e04f      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006112:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 020c 	and.w	r2, r3, #12
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	429a      	cmp	r2, r3
 8006122:	d1eb      	bne.n	80060fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d20c      	bcs.n	800614c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006132:	4b22      	ldr	r3, [pc, #136]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCC_ClockConfig+0x1b8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e032      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006158:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4916      	ldr	r1, [pc, #88]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006166:	4313      	orrs	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	490e      	ldr	r1, [pc, #56]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800618a:	f000 f821 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 800618e:	4602      	mov	r2, r0
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 800619c:	5ccb      	ldrb	r3, [r1, r3]
 800619e:	fa22 f303 	lsr.w	r3, r2, r3
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fb febc 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40023c00 	.word	0x40023c00
 80061c0:	40023800 	.word	0x40023800
 80061c4:	0800d008 	.word	0x0800d008
 80061c8:	20000000 	.word	0x20000000
 80061cc:	20000004 	.word	0x20000004

080061d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d4:	b094      	sub	sp, #80	; 0x50
 80061d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
 80061dc:	2300      	movs	r3, #0
 80061de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e0:	2300      	movs	r3, #0
 80061e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061e8:	4b79      	ldr	r3, [pc, #484]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 030c 	and.w	r3, r3, #12
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d00d      	beq.n	8006210 <HAL_RCC_GetSysClockFreq+0x40>
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	f200 80e1 	bhi.w	80063bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x34>
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d003      	beq.n	800620a <HAL_RCC_GetSysClockFreq+0x3a>
 8006202:	e0db      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006204:	4b73      	ldr	r3, [pc, #460]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006206:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006208:	e0db      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800620a:	4b73      	ldr	r3, [pc, #460]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800620c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800620e:	e0d8      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006210:	4b6f      	ldr	r3, [pc, #444]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006218:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800621a:	4b6d      	ldr	r3, [pc, #436]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d063      	beq.n	80062ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006226:	4b6a      	ldr	r3, [pc, #424]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	099b      	lsrs	r3, r3, #6
 800622c:	2200      	movs	r2, #0
 800622e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006230:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
 800623a:	2300      	movs	r3, #0
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
 800623e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006242:	4622      	mov	r2, r4
 8006244:	462b      	mov	r3, r5
 8006246:	f04f 0000 	mov.w	r0, #0
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	0159      	lsls	r1, r3, #5
 8006250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006254:	0150      	lsls	r0, r2, #5
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4621      	mov	r1, r4
 800625c:	1a51      	subs	r1, r2, r1
 800625e:	6139      	str	r1, [r7, #16]
 8006260:	4629      	mov	r1, r5
 8006262:	eb63 0301 	sbc.w	r3, r3, r1
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006274:	4659      	mov	r1, fp
 8006276:	018b      	lsls	r3, r1, #6
 8006278:	4651      	mov	r1, sl
 800627a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800627e:	4651      	mov	r1, sl
 8006280:	018a      	lsls	r2, r1, #6
 8006282:	4651      	mov	r1, sl
 8006284:	ebb2 0801 	subs.w	r8, r2, r1
 8006288:	4659      	mov	r1, fp
 800628a:	eb63 0901 	sbc.w	r9, r3, r1
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800629a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800629e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062a2:	4690      	mov	r8, r2
 80062a4:	4699      	mov	r9, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	eb18 0303 	adds.w	r3, r8, r3
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	462b      	mov	r3, r5
 80062b0:	eb49 0303 	adc.w	r3, r9, r3
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062c2:	4629      	mov	r1, r5
 80062c4:	024b      	lsls	r3, r1, #9
 80062c6:	4621      	mov	r1, r4
 80062c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062cc:	4621      	mov	r1, r4
 80062ce:	024a      	lsls	r2, r1, #9
 80062d0:	4610      	mov	r0, r2
 80062d2:	4619      	mov	r1, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d6:	2200      	movs	r2, #0
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062e0:	f7f9 ffd6 	bl	8000290 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4613      	mov	r3, r2
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	e058      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ee:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	099b      	lsrs	r3, r3, #6
 80062f4:	2200      	movs	r2, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	4611      	mov	r1, r2
 80062fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062fe:	623b      	str	r3, [r7, #32]
 8006300:	2300      	movs	r3, #0
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
 8006304:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	f04f 0000 	mov.w	r0, #0
 8006310:	f04f 0100 	mov.w	r1, #0
 8006314:	0159      	lsls	r1, r3, #5
 8006316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800631a:	0150      	lsls	r0, r2, #5
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4641      	mov	r1, r8
 8006322:	ebb2 0a01 	subs.w	sl, r2, r1
 8006326:	4649      	mov	r1, r9
 8006328:	eb63 0b01 	sbc.w	fp, r3, r1
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800633c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006340:	ebb2 040a 	subs.w	r4, r2, sl
 8006344:	eb63 050b 	sbc.w	r5, r3, fp
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	00eb      	lsls	r3, r5, #3
 8006352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006356:	00e2      	lsls	r2, r4, #3
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	4643      	mov	r3, r8
 800635e:	18e3      	adds	r3, r4, r3
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	464b      	mov	r3, r9
 8006364:	eb45 0303 	adc.w	r3, r5, r3
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006376:	4629      	mov	r1, r5
 8006378:	028b      	lsls	r3, r1, #10
 800637a:	4621      	mov	r1, r4
 800637c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006380:	4621      	mov	r1, r4
 8006382:	028a      	lsls	r2, r1, #10
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638a:	2200      	movs	r2, #0
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	61fa      	str	r2, [r7, #28]
 8006390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006394:	f7f9 ff7c 	bl	8000290 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4613      	mov	r3, r2
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	3301      	adds	r3, #1
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063ba:	e002      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3750      	adds	r7, #80	; 0x50
 80063c8:	46bd      	mov	sp, r7
 80063ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ce:	bf00      	nop
 80063d0:	40023800 	.word	0x40023800
 80063d4:	00f42400 	.word	0x00f42400
 80063d8:	007a1200 	.word	0x007a1200

080063dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063e2:	681b      	ldr	r3, [r3, #0]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000000 	.word	0x20000000

080063f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063f8:	f7ff fff0 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	0a9b      	lsrs	r3, r3, #10
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	4903      	ldr	r1, [pc, #12]	; (8006418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40023800 	.word	0x40023800
 8006418:	0800d018 	.word	0x0800d018

0800641c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006420:	f7ff ffdc 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	0b5b      	lsrs	r3, r3, #13
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4903      	ldr	r1, [pc, #12]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40023800 	.word	0x40023800
 8006440:	0800d018 	.word	0x0800d018

08006444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	220f      	movs	r2, #15
 8006452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0203 	and.w	r2, r3, #3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	08db      	lsrs	r3, r3, #3
 800647e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <HAL_RCC_GetClockConfig+0x60>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0207 	and.w	r2, r3, #7
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40023c00 	.word	0x40023c00

080064a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e041      	b.n	800653e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f839 	bl	8006546 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 f9d8 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d001      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e04e      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_TIM_Base_Start_IT+0xc4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d022      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659e:	d01d      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_TIM_Base_Start_IT+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d018      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_TIM_Base_Start_IT+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_TIM_Base_Start_IT+0xd0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIM_Base_Start_IT+0xd4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d010      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	e007      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40014000 	.word	0x40014000
 8006638:	40001800 	.word	0x40001800

0800663c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0202 	mvn.w	r2, #2
 8006668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8ee 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8e0 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8f1 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0204 	mvn.w	r2, #4
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8c4 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8b6 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8c7 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d122      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0208 	mvn.w	r2, #8
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f89a 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f88c 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f89d 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d122      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d11b      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0210 	mvn.w	r2, #16
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2208      	movs	r2, #8
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f870 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f862 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f873 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10e      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0201 	mvn.w	r2, #1
 80067b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fb f98e 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d10e      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d107      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f902 	bl	80069f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f838 	bl	8006888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b20      	cmp	r3, #32
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0220 	mvn.w	r2, #32
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8cc 	bl	80069dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d00f      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3d      	ldr	r2, [pc, #244]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <TIM_Base_SetConfig+0x120>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d108      	bne.n	80068ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fc:	d027      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d023      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_Base_SetConfig+0x120>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_Base_SetConfig+0x128>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <TIM_Base_SetConfig+0x130>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_Base_SetConfig+0x134>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <TIM_Base_SetConfig+0x138>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <TIM_Base_SetConfig+0x13c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0xf8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d103      	bne.n	800699c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e03f      	b.n	8006a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fb f9f6 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2224      	movs	r2, #36	; 0x24
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fe33 	bl	80076b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e047      	b.n	8006b40 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fb f9a9 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2224      	movs	r2, #36	; 0x24
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fde6 	bl	80076b4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006b06:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d17c      	bne.n	8006c62 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Transmit+0x2c>
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e075      	b.n	8006c64 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Transmit+0x3e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e06e      	b.n	8006c64 <HAL_UART_Transmit+0x11c>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2221      	movs	r2, #33	; 0x21
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b9c:	f7fb fcd6 	bl	800254c <HAL_GetTick>
 8006ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	88fa      	ldrh	r2, [r7, #6]
 8006ba6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d108      	bne.n	8006bca <HAL_UART_Transmit+0x82>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e003      	b.n	8006bd2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bda:	e02a      	b.n	8006c32 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2180      	movs	r1, #128	; 0x80
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fb1e 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e036      	b.n	8006c64 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	3302      	adds	r3, #2
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e007      	b.n	8006c24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1cf      	bne.n	8006bdc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2140      	movs	r1, #64	; 0x40
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 faee 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e006      	b.n	8006c64 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2302      	movs	r3, #2
  }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d11d      	bne.n	8006cc2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_UART_Receive_IT+0x26>
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e016      	b.n	8006cc4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UART_Receive_IT+0x38>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e00f      	b.n	8006cc4 <HAL_UART_Receive_IT+0x58>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fb23 	bl	8007304 <UART_Start_Receive_IT>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0ba      	sub	sp, #232	; 0xe8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fc07 	bl	800753e <UART_Receive_IT>
      return;
 8006d30:	e256      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80de 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80d1 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f043 0208 	orr.w	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 81ed 	beq.w	80071d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb92 	bl	800753e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b40      	cmp	r3, #64	; 0x40
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_UART_IRQHandler+0x17a>
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04f      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa9a 	bl	8007380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d141      	bne.n	8006ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d9      	bne.n	8006e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	4a7d      	ldr	r2, [pc, #500]	; (80070a8 <HAL_UART_IRQHandler+0x3dc>)
 8006eb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fc f81e 	bl	8002efc <HAL_DMA_Abort_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	e00e      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f990 	bl	80071fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	e00a      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f98c 	bl	80071fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e006      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f988 	bl	80071fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ef2:	e170      	b.n	80071d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	bf00      	nop
    return;
 8006ef6:	e16e      	b.n	80071d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 814a 	bne.w	8007196 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8143 	beq.w	8007196 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 813c 	beq.w	8007196 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	f040 80b4 	bne.w	80070ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8140 	beq.w	80071da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f080 8139 	bcs.w	80071da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7a:	f000 8088 	beq.w	800708e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	330c      	adds	r3, #12
 8006f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006faa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1d9      	bne.n	8006f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3314      	adds	r3, #20
 8006fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e1      	bne.n	8006fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800702a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800702c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007030:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e3      	bne.n	8007006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800705c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007070:	65ba      	str	r2, [r7, #88]	; 0x58
 8007072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e3      	bne.n	800704c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	4618      	mov	r0, r3
 800708a:	f7fb fec7 	bl	8002e1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007096:	b29b      	uxth	r3, r3
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8b6 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070a4:	e099      	b.n	80071da <HAL_UART_IRQHandler+0x50e>
 80070a6:	bf00      	nop
 80070a8:	08007447 	.word	0x08007447
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 808b 	beq.w	80071de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8086 	beq.w	80071de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070f6:	647a      	str	r2, [r7, #68]	; 0x44
 80070f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e3      	bne.n	80070d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3314      	adds	r3, #20
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	623b      	str	r3, [r7, #32]
   return(result);
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3314      	adds	r3, #20
 800712a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800712e:	633a      	str	r2, [r7, #48]	; 0x30
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e3      	bne.n	800710a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007174:	61fa      	str	r2, [r7, #28]
 8007176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	617b      	str	r3, [r7, #20]
   return(result);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e3      	bne.n	8007150 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f83e 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007194:	e023      	b.n	80071de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x4ea>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f95d 	bl	800746e <UART_Transmit_IT>
    return;
 80071b4:	e014      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <HAL_UART_IRQHandler+0x514>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f99d 	bl	800750e <UART_EndTransmit_IT>
    return;
 80071d4:	e004      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
    return;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
      return;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
      return;
 80071de:	bf00      	nop
  }
}
 80071e0:	37e8      	adds	r7, #232	; 0xe8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b090      	sub	sp, #64	; 0x40
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	e050      	b.n	80072dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800723a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d04c      	beq.n	80072dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	2b00      	cmp	r3, #0
 8007246:	d007      	beq.n	8007258 <UART_WaitOnFlagUntilTimeout+0x30>
 8007248:	f7fb f980 	bl	800254c <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007254:	429a      	cmp	r2, r3
 8007256:	d241      	bcs.n	80072dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007278:	637a      	str	r2, [r7, #52]	; 0x34
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800727e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e5      	bne.n	8007258 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3314      	adds	r3, #20
 8007292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	613b      	str	r3, [r7, #16]
   return(result);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f023 0301 	bic.w	r3, r3, #1
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3314      	adds	r3, #20
 80072aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ac:	623a      	str	r2, [r7, #32]
 80072ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	69f9      	ldr	r1, [r7, #28]
 80072b2:	6a3a      	ldr	r2, [r7, #32]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e5      	bne.n	800728c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e00f      	b.n	80072fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4013      	ands	r3, r2
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	bf0c      	ite	eq
 80072ec:	2301      	moveq	r3, #1
 80072ee:	2300      	movne	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d09f      	beq.n	800723a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3740      	adds	r7, #64	; 0x40
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	88fa      	ldrh	r2, [r7, #6]
 8007322:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2222      	movs	r2, #34	; 0x22
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007350:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0201 	orr.w	r2, r2, #1
 8007360:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0220 	orr.w	r2, r2, #32
 8007370:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b095      	sub	sp, #84	; 0x54
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800739e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073a8:	643a      	str	r2, [r7, #64]	; 0x40
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3314      	adds	r3, #20
 80073da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d119      	bne.n	800742c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	60bb      	str	r3, [r7, #8]
   return(result);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0310 	bic.w	r3, r3, #16
 800740e:	647b      	str	r3, [r7, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	330c      	adds	r3, #12
 8007416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007418:	61ba      	str	r2, [r7, #24]
 800741a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e5      	bne.n	80073f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	; 0x30
}
 800743a:	bf00      	nop
 800743c:	3754      	adds	r7, #84	; 0x54
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fecb 	bl	80071fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b21      	cmp	r3, #33	; 0x21
 8007480:	d13e      	bne.n	8007500 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d114      	bne.n	80074b6 <UART_Transmit_IT+0x48>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d110      	bne.n	80074b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	1c9a      	adds	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	621a      	str	r2, [r3, #32]
 80074b4:	e008      	b.n	80074c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	1c59      	adds	r1, r3, #1
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6211      	str	r1, [r2, #32]
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10f      	bne.n	80074fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fe5a 	bl	80071e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b08c      	sub	sp, #48	; 0x30
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	f040 80ab 	bne.w	80076aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755c:	d117      	bne.n	800758e <UART_Receive_IT+0x50>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d113      	bne.n	800758e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757c:	b29a      	uxth	r2, r3
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28
 800758c:	e026      	b.n	80075dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a0:	d007      	beq.n	80075b2 <UART_Receive_IT+0x74>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <UART_Receive_IT+0x82>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e008      	b.n	80075d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4619      	mov	r1, r3
 80075ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d15a      	bne.n	80076a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0220 	bic.w	r2, r2, #32
 80075fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800760e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	2b01      	cmp	r3, #1
 800762e:	d135      	bne.n	800769c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	613b      	str	r3, [r7, #16]
   return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f023 0310 	bic.w	r3, r3, #16
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	623a      	str	r2, [r7, #32]
 8007658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	69f9      	ldr	r1, [r7, #28]
 800765c:	6a3a      	ldr	r2, [r7, #32]
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	61bb      	str	r3, [r7, #24]
   return(result);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e5      	bne.n	8007636 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b10      	cmp	r3, #16
 8007676:	d10a      	bne.n	800768e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fdbb 	bl	8007210 <HAL_UARTEx_RxEventCallback>
 800769a:	e002      	b.n	80076a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7f9 fabd 	bl	8000c1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e002      	b.n	80076ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3730      	adds	r7, #48	; 0x30
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b0c0      	sub	sp, #256	; 0x100
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	68d9      	ldr	r1, [r3, #12]
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	ea40 0301 	orr.w	r3, r0, r1
 80076dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800770c:	f021 010c 	bic.w	r1, r1, #12
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800771a:	430b      	orrs	r3, r1
 800771c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	6999      	ldr	r1, [r3, #24]
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	ea40 0301 	orr.w	r3, r0, r1
 800773a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b8f      	ldr	r3, [pc, #572]	; (8007980 <UART_SetConfig+0x2cc>)
 8007744:	429a      	cmp	r2, r3
 8007746:	d005      	beq.n	8007754 <UART_SetConfig+0xa0>
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b8d      	ldr	r3, [pc, #564]	; (8007984 <UART_SetConfig+0x2d0>)
 8007750:	429a      	cmp	r2, r3
 8007752:	d104      	bne.n	800775e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007754:	f7fe fe62 	bl	800641c <HAL_RCC_GetPCLK2Freq>
 8007758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800775c:	e003      	b.n	8007766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800775e:	f7fe fe49 	bl	80063f4 <HAL_RCC_GetPCLK1Freq>
 8007762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007770:	f040 810c 	bne.w	800798c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007778:	2200      	movs	r2, #0
 800777a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800777e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	1891      	adds	r1, r2, r2
 800778c:	65b9      	str	r1, [r7, #88]	; 0x58
 800778e:	415b      	adcs	r3, r3
 8007790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007796:	4621      	mov	r1, r4
 8007798:	eb12 0801 	adds.w	r8, r2, r1
 800779c:	4629      	mov	r1, r5
 800779e:	eb43 0901 	adc.w	r9, r3, r1
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077b6:	4690      	mov	r8, r2
 80077b8:	4699      	mov	r9, r3
 80077ba:	4623      	mov	r3, r4
 80077bc:	eb18 0303 	adds.w	r3, r8, r3
 80077c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077c4:	462b      	mov	r3, r5
 80077c6:	eb49 0303 	adc.w	r3, r9, r3
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077e2:	460b      	mov	r3, r1
 80077e4:	18db      	adds	r3, r3, r3
 80077e6:	653b      	str	r3, [r7, #80]	; 0x50
 80077e8:	4613      	mov	r3, r2
 80077ea:	eb42 0303 	adc.w	r3, r2, r3
 80077ee:	657b      	str	r3, [r7, #84]	; 0x54
 80077f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077f8:	f7f8 fd4a 	bl	8000290 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4b61      	ldr	r3, [pc, #388]	; (8007988 <UART_SetConfig+0x2d4>)
 8007802:	fba3 2302 	umull	r2, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	011c      	lsls	r4, r3, #4
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780e:	2200      	movs	r2, #0
 8007810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	1891      	adds	r1, r2, r2
 8007822:	64b9      	str	r1, [r7, #72]	; 0x48
 8007824:	415b      	adcs	r3, r3
 8007826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800782c:	4641      	mov	r1, r8
 800782e:	eb12 0a01 	adds.w	sl, r2, r1
 8007832:	4649      	mov	r1, r9
 8007834:	eb43 0b01 	adc.w	fp, r3, r1
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800784c:	4692      	mov	sl, r2
 800784e:	469b      	mov	fp, r3
 8007850:	4643      	mov	r3, r8
 8007852:	eb1a 0303 	adds.w	r3, sl, r3
 8007856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800785a:	464b      	mov	r3, r9
 800785c:	eb4b 0303 	adc.w	r3, fp, r3
 8007860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007878:	460b      	mov	r3, r1
 800787a:	18db      	adds	r3, r3, r3
 800787c:	643b      	str	r3, [r7, #64]	; 0x40
 800787e:	4613      	mov	r3, r2
 8007880:	eb42 0303 	adc.w	r3, r2, r3
 8007884:	647b      	str	r3, [r7, #68]	; 0x44
 8007886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800788a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800788e:	f7f8 fcff 	bl	8000290 <__aeabi_uldivmod>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4611      	mov	r1, r2
 8007898:	4b3b      	ldr	r3, [pc, #236]	; (8007988 <UART_SetConfig+0x2d4>)
 800789a:	fba3 2301 	umull	r2, r3, r3, r1
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	2264      	movs	r2, #100	; 0x64
 80078a2:	fb02 f303 	mul.w	r3, r2, r3
 80078a6:	1acb      	subs	r3, r1, r3
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078ae:	4b36      	ldr	r3, [pc, #216]	; (8007988 <UART_SetConfig+0x2d4>)
 80078b0:	fba3 2302 	umull	r2, r3, r3, r2
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078bc:	441c      	add	r4, r3
 80078be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	1891      	adds	r1, r2, r2
 80078d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80078d8:	415b      	adcs	r3, r3
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078e0:	4641      	mov	r1, r8
 80078e2:	1851      	adds	r1, r2, r1
 80078e4:	6339      	str	r1, [r7, #48]	; 0x30
 80078e6:	4649      	mov	r1, r9
 80078e8:	414b      	adcs	r3, r1
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078f8:	4659      	mov	r1, fp
 80078fa:	00cb      	lsls	r3, r1, #3
 80078fc:	4651      	mov	r1, sl
 80078fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007902:	4651      	mov	r1, sl
 8007904:	00ca      	lsls	r2, r1, #3
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	4603      	mov	r3, r0
 800790c:	4642      	mov	r2, r8
 800790e:	189b      	adds	r3, r3, r2
 8007910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007914:	464b      	mov	r3, r9
 8007916:	460a      	mov	r2, r1
 8007918:	eb42 0303 	adc.w	r3, r2, r3
 800791c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800792c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007934:	460b      	mov	r3, r1
 8007936:	18db      	adds	r3, r3, r3
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
 800793a:	4613      	mov	r3, r2
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800794a:	f7f8 fca1 	bl	8000290 <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <UART_SetConfig+0x2d4>)
 8007954:	fba3 1302 	umull	r1, r3, r3, r2
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	2164      	movs	r1, #100	; 0x64
 800795c:	fb01 f303 	mul.w	r3, r1, r3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	3332      	adds	r3, #50	; 0x32
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <UART_SetConfig+0x2d4>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	f003 0207 	and.w	r2, r3, #7
 8007972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4422      	add	r2, r4
 800797a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800797c:	e106      	b.n	8007b8c <UART_SetConfig+0x4d8>
 800797e:	bf00      	nop
 8007980:	40011000 	.word	0x40011000
 8007984:	40011400 	.word	0x40011400
 8007988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800798c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007990:	2200      	movs	r2, #0
 8007992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800799a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800799e:	4642      	mov	r2, r8
 80079a0:	464b      	mov	r3, r9
 80079a2:	1891      	adds	r1, r2, r2
 80079a4:	6239      	str	r1, [r7, #32]
 80079a6:	415b      	adcs	r3, r3
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
 80079aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ae:	4641      	mov	r1, r8
 80079b0:	1854      	adds	r4, r2, r1
 80079b2:	4649      	mov	r1, r9
 80079b4:	eb43 0501 	adc.w	r5, r3, r1
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	00eb      	lsls	r3, r5, #3
 80079c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079c6:	00e2      	lsls	r2, r4, #3
 80079c8:	4614      	mov	r4, r2
 80079ca:	461d      	mov	r5, r3
 80079cc:	4643      	mov	r3, r8
 80079ce:	18e3      	adds	r3, r4, r3
 80079d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079d4:	464b      	mov	r3, r9
 80079d6:	eb45 0303 	adc.w	r3, r5, r3
 80079da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079fa:	4629      	mov	r1, r5
 80079fc:	008b      	lsls	r3, r1, #2
 80079fe:	4621      	mov	r1, r4
 8007a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a04:	4621      	mov	r1, r4
 8007a06:	008a      	lsls	r2, r1, #2
 8007a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a0c:	f7f8 fc40 	bl	8000290 <__aeabi_uldivmod>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4b60      	ldr	r3, [pc, #384]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007a16:	fba3 2302 	umull	r2, r3, r3, r2
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	011c      	lsls	r4, r3, #4
 8007a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	61b9      	str	r1, [r7, #24]
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6139      	str	r1, [r7, #16]
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a74:	464b      	mov	r3, r9
 8007a76:	460a      	mov	r2, r1
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a98:	4649      	mov	r1, r9
 8007a9a:	008b      	lsls	r3, r1, #2
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	008a      	lsls	r2, r1, #2
 8007aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007aaa:	f7f8 fbf1 	bl	8000290 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	2264      	movs	r2, #100	; 0x64
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	1acb      	subs	r3, r1, r3
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	3332      	adds	r3, #50	; 0x32
 8007ac8:	4a33      	ldr	r2, [pc, #204]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ad4:	441c      	add	r4, r3
 8007ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ada:	2200      	movs	r2, #0
 8007adc:	673b      	str	r3, [r7, #112]	; 0x70
 8007ade:	677a      	str	r2, [r7, #116]	; 0x74
 8007ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	1891      	adds	r1, r2, r2
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	415b      	adcs	r3, r3
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af4:	4641      	mov	r1, r8
 8007af6:	1851      	adds	r1, r2, r1
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	4649      	mov	r1, r9
 8007afc:	414b      	adcs	r3, r1
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	00cb      	lsls	r3, r1, #3
 8007b10:	4651      	mov	r1, sl
 8007b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b16:	4651      	mov	r1, sl
 8007b18:	00ca      	lsls	r2, r1, #3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4642      	mov	r2, r8
 8007b22:	189b      	adds	r3, r3, r2
 8007b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b26:	464b      	mov	r3, r9
 8007b28:	460a      	mov	r2, r1
 8007b2a:	eb42 0303 	adc.w	r3, r2, r3
 8007b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	663b      	str	r3, [r7, #96]	; 0x60
 8007b3a:	667a      	str	r2, [r7, #100]	; 0x64
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	f04f 0300 	mov.w	r3, #0
 8007b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b48:	4649      	mov	r1, r9
 8007b4a:	008b      	lsls	r3, r1, #2
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b52:	4641      	mov	r1, r8
 8007b54:	008a      	lsls	r2, r1, #2
 8007b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b5a:	f7f8 fb99 	bl	8000290 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007b64:	fba3 1302 	umull	r1, r3, r3, r2
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	2164      	movs	r1, #100	; 0x64
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	3332      	adds	r3, #50	; 0x32
 8007b76:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 020f 	and.w	r2, r3, #15
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4422      	add	r2, r4
 8007b8a:	609a      	str	r2, [r3, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b92:	46bd      	mov	sp, r7
 8007b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b98:	51eb851f 	.word	0x51eb851f

08007b9c <__NVIC_SetPriority>:
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db0a      	blt.n	8007bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	490c      	ldr	r1, [pc, #48]	; (8007be8 <__NVIC_SetPriority+0x4c>)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	0112      	lsls	r2, r2, #4
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007bc4:	e00a      	b.n	8007bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4908      	ldr	r1, [pc, #32]	; (8007bec <__NVIC_SetPriority+0x50>)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	0112      	lsls	r2, r2, #4
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	440b      	add	r3, r1
 8007bda:	761a      	strb	r2, [r3, #24]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	e000e100 	.word	0xe000e100
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <SysTick_Handler+0x1c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007bf8:	f002 fd4e 	bl	800a698 <xTaskGetSchedulerState>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d001      	beq.n	8007c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c02:	f003 fc51 	bl	800b4a8 <xPortSysTickHandler>
  }
}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	e000e010 	.word	0xe000e010

08007c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c14:	2100      	movs	r1, #0
 8007c16:	f06f 0004 	mvn.w	r0, #4
 8007c1a:	f7ff ffbf 	bl	8007b9c <__NVIC_SetPriority>
#endif
}
 8007c1e:	bf00      	nop
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c2a:	f3ef 8305 	mrs	r3, IPSR
 8007c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c36:	f06f 0305 	mvn.w	r3, #5
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e00c      	b.n	8007c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <osKernelInitialize+0x44>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <osKernelInitialize+0x44>)
 8007c48:	2201      	movs	r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	607b      	str	r3, [r7, #4]
 8007c50:	e002      	b.n	8007c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c58:	687b      	ldr	r3, [r7, #4]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	200002a8 	.word	0x200002a8

08007c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c72:	f3ef 8305 	mrs	r3, IPSR
 8007c76:	603b      	str	r3, [r7, #0]
  return(result);
 8007c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c7e:	f06f 0305 	mvn.w	r3, #5
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	e010      	b.n	8007ca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <osKernelStart+0x48>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d109      	bne.n	8007ca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c8e:	f7ff ffbf 	bl	8007c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c92:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <osKernelStart+0x48>)
 8007c94:	2202      	movs	r2, #2
 8007c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c98:	f002 f840 	bl	8009d1c <vTaskStartScheduler>
      stat = osOK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	607b      	str	r3, [r7, #4]
 8007ca0:	e002      	b.n	8007ca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ca8:	687b      	ldr	r3, [r7, #4]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200002a8 	.word	0x200002a8

08007cb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	; 0x38
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc8:	f3ef 8305 	mrs	r3, IPSR
 8007ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8007cce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d17e      	bne.n	8007dd2 <osThreadNew+0x11a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d07b      	beq.n	8007dd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cde:	2318      	movs	r3, #24
 8007ce0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d045      	beq.n	8007d7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <osThreadNew+0x48>
        name = attr->name;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <osThreadNew+0x6e>
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b38      	cmp	r3, #56	; 0x38
 8007d18:	d805      	bhi.n	8007d26 <osThreadNew+0x6e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <osThreadNew+0x72>
        return (NULL);
 8007d26:	2300      	movs	r3, #0
 8007d28:	e054      	b.n	8007dd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	089b      	lsrs	r3, r3, #2
 8007d38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00e      	beq.n	8007d60 <osThreadNew+0xa8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	2ba7      	cmp	r3, #167	; 0xa7
 8007d48:	d90a      	bls.n	8007d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <osThreadNew+0xa8>
        mem = 1;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	e010      	b.n	8007d82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10c      	bne.n	8007d82 <osThreadNew+0xca>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d108      	bne.n	8007d82 <osThreadNew+0xca>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <osThreadNew+0xca>
          mem = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	e001      	b.n	8007d82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d110      	bne.n	8007daa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f001 fdd0 	bl	8009944 <xTaskCreateStatic>
 8007da4:	4603      	mov	r3, r0
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	e013      	b.n	8007dd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d110      	bne.n	8007dd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	f107 0310 	add.w	r3, r7, #16
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 fe1b 	bl	80099fe <xTaskCreate>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d001      	beq.n	8007dd2 <osThreadNew+0x11a>
            hTask = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dd2:	693b      	ldr	r3, [r7, #16]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de4:	f3ef 8305 	mrs	r3, IPSR
 8007de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <osDelay+0x1c>
    stat = osErrorISR;
 8007df0:	f06f 0305 	mvn.w	r3, #5
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	e007      	b.n	8007e08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 ff56 	bl	8009cb4 <vTaskDelay>
    }
  }

  return (stat);
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1e:	f3ef 8305 	mrs	r3, IPSR
 8007e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d12d      	bne.n	8007e86 <osEventFlagsNew+0x74>
    mem = -1;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d015      	beq.n	8007e62 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d006      	beq.n	8007e4c <osEventFlagsNew+0x3a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	2b1f      	cmp	r3, #31
 8007e44:	d902      	bls.n	8007e4c <osEventFlagsNew+0x3a>
        mem = 1;
 8007e46:	2301      	movs	r3, #1
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	e00c      	b.n	8007e66 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <osEventFlagsNew+0x54>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <osEventFlagsNew+0x54>
          mem = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	e001      	b.n	8007e66 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fb29 	bl	80084c8 <xEventGroupCreateStatic>
 8007e76:	6178      	str	r0, [r7, #20]
 8007e78:	e005      	b.n	8007e86 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007e80:	f000 fb59 	bl	8008536 <xEventGroupCreate>
 8007e84:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007e86:	697b      	ldr	r3, [r7, #20]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <osEventFlagsSet+0x1e>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007eae:	f06f 0303 	mvn.w	r3, #3
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e028      	b.n	8007f08 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb6:	f3ef 8305 	mrs	r3, IPSR
 8007eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01d      	beq.n	8007efe <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007ec6:	f107 0308 	add.w	r3, r7, #8
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f000 fc62 	bl	8008798 <xEventGroupSetBitsFromISR>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8007eda:	f06f 0302 	mvn.w	r3, #2
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e012      	b.n	8007f08 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00d      	beq.n	8007f08 <osEventFlagsSet+0x78>
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <osEventFlagsSet+0x84>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	e004      	b.n	8007f08 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6938      	ldr	r0, [r7, #16]
 8007f02:	f000 fba3 	bl	800864c <xEventGroupSetBits>
 8007f06:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007f08:	697b      	ldr	r3, [r7, #20]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <osEventFlagsClear+0x1e>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007f36:	f06f 0303 	mvn.w	r3, #3
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e019      	b.n	8007f72 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8007f4a:	6938      	ldr	r0, [r7, #16]
 8007f4c:	f000 fb5a 	bl	8008604 <xEventGroupGetBitsFromISR>
 8007f50:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6938      	ldr	r0, [r7, #16]
 8007f56:	f000 fb41 	bl	80085dc <xEventGroupClearBitsFromISR>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d108      	bne.n	8007f72 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8007f60:	f06f 0302 	mvn.w	r3, #2
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e004      	b.n	8007f72 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6938      	ldr	r0, [r7, #16]
 8007f6c:	f000 fafd 	bl	800856a <xEventGroupClearBits>
 8007f70:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007f72:	697b      	ldr	r3, [r7, #20]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d102      	bne.n	8007f94 <osEventFlagsGet+0x18>
    rflags = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e00f      	b.n	8007fb4 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f94:	f3ef 8305 	mrs	r3, IPSR
 8007f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8007fa0:	6938      	ldr	r0, [r7, #16]
 8007fa2:	f000 fb2f 	bl	8008604 <xEventGroupGetBitsFromISR>
 8007fa6:	6178      	str	r0, [r7, #20]
 8007fa8:	e004      	b.n	8007fb4 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8007faa:	2100      	movs	r1, #0
 8007fac:	6938      	ldr	r0, [r7, #16]
 8007fae:	f000 fadc 	bl	800856a <xEventGroupClearBits>
 8007fb2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007fb4:	697b      	ldr	r3, [r7, #20]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b08a      	sub	sp, #40	; 0x28
 8007fc2:	af02      	add	r7, sp, #8
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fce:	f3ef 8305 	mrs	r3, IPSR
 8007fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d175      	bne.n	80080c6 <osSemaphoreNew+0x108>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d072      	beq.n	80080c6 <osSemaphoreNew+0x108>
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d86e      	bhi.n	80080c6 <osSemaphoreNew+0x108>
    mem = -1;
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d006      	beq.n	800800a <osSemaphoreNew+0x4c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b4f      	cmp	r3, #79	; 0x4f
 8008002:	d902      	bls.n	800800a <osSemaphoreNew+0x4c>
        mem = 1;
 8008004:	2301      	movs	r3, #1
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	e00c      	b.n	8008024 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <osSemaphoreNew+0x66>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <osSemaphoreNew+0x66>
          mem = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e001      	b.n	8008024 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d04c      	beq.n	80080c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d128      	bne.n	8008084 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10a      	bne.n	800804e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2203      	movs	r2, #3
 800803e:	9200      	str	r2, [sp, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	2001      	movs	r0, #1
 8008046:	f000 fcd7 	bl	80089f8 <xQueueGenericCreateStatic>
 800804a:	61f8      	str	r0, [r7, #28]
 800804c:	e005      	b.n	800805a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800804e:	2203      	movs	r2, #3
 8008050:	2100      	movs	r1, #0
 8008052:	2001      	movs	r0, #1
 8008054:	f000 fd48 	bl	8008ae8 <xQueueGenericCreate>
 8008058:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d022      	beq.n	80080a6 <osSemaphoreNew+0xe8>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d01f      	beq.n	80080a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008066:	2300      	movs	r3, #0
 8008068:	2200      	movs	r2, #0
 800806a:	2100      	movs	r1, #0
 800806c:	69f8      	ldr	r0, [r7, #28]
 800806e:	f000 fe03 	bl	8008c78 <xQueueGenericSend>
 8008072:	4603      	mov	r3, r0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d016      	beq.n	80080a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008078:	69f8      	ldr	r0, [r7, #28]
 800807a:	f001 fa8f 	bl	800959c <vQueueDelete>
            hSemaphore = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e010      	b.n	80080a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d108      	bne.n	800809c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	461a      	mov	r2, r3
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fd85 	bl	8008ba2 <xQueueCreateCountingSemaphoreStatic>
 8008098:	61f8      	str	r0, [r7, #28]
 800809a:	e004      	b.n	80080a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fdb6 	bl	8008c10 <xQueueCreateCountingSemaphore>
 80080a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e001      	b.n	80080be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80080be:	6979      	ldr	r1, [r7, #20]
 80080c0:	69f8      	ldr	r0, [r7, #28]
 80080c2:	f001 fbb7 	bl	8009834 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080e8:	f06f 0303 	mvn.w	r3, #3
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	e039      	b.n	8008164 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f0:	f3ef 8305 	mrs	r3, IPSR
 80080f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80080f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d022      	beq.n	8008142 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008102:	f06f 0303 	mvn.w	r3, #3
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e02c      	b.n	8008164 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	461a      	mov	r2, r3
 8008114:	2100      	movs	r1, #0
 8008116:	6938      	ldr	r0, [r7, #16]
 8008118:	f001 f9c0 	bl	800949c <xQueueReceiveFromISR>
 800811c:	4603      	mov	r3, r0
 800811e:	2b01      	cmp	r3, #1
 8008120:	d003      	beq.n	800812a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008122:	f06f 0302 	mvn.w	r3, #2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e01c      	b.n	8008164 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d019      	beq.n	8008164 <osSemaphoreAcquire+0x94>
 8008130:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <osSemaphoreAcquire+0xa0>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	e010      	b.n	8008164 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6938      	ldr	r0, [r7, #16]
 8008146:	f001 f89d 	bl	8009284 <xQueueSemaphoreTake>
 800814a:	4603      	mov	r3, r0
 800814c:	2b01      	cmp	r3, #1
 800814e:	d009      	beq.n	8008164 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008156:	f06f 0301 	mvn.w	r3, #1
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	e002      	b.n	8008164 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800815e:	f06f 0302 	mvn.w	r3, #2
 8008162:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008164:	697b      	ldr	r3, [r7, #20]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800818a:	f06f 0303 	mvn.w	r3, #3
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e02c      	b.n	80081ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008192:	f3ef 8305 	mrs	r3, IPSR
 8008196:	60fb      	str	r3, [r7, #12]
  return(result);
 8008198:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01a      	beq.n	80081d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4619      	mov	r1, r3
 80081a8:	6938      	ldr	r0, [r7, #16]
 80081aa:	f000 fefe 	bl	8008faa <xQueueGiveFromISR>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d003      	beq.n	80081bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80081b4:	f06f 0302 	mvn.w	r3, #2
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e017      	b.n	80081ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <osSemaphoreRelease+0x78>
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <osSemaphoreRelease+0x84>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	e00b      	b.n	80081ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f000 fd4c 	bl	8008c78 <xQueueGenericSend>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d002      	beq.n	80081ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081e6:	f06f 0302 	mvn.w	r3, #2
 80081ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80081ec:	697b      	ldr	r3, [r7, #20]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af02      	add	r7, sp, #8
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820c:	f3ef 8305 	mrs	r3, IPSR
 8008210:	613b      	str	r3, [r7, #16]
  return(result);
 8008212:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008214:	2b00      	cmp	r3, #0
 8008216:	d15f      	bne.n	80082d8 <osMessageQueueNew+0xdc>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d05c      	beq.n	80082d8 <osMessageQueueNew+0xdc>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d059      	beq.n	80082d8 <osMessageQueueNew+0xdc>
    mem = -1;
 8008224:	f04f 33ff 	mov.w	r3, #4294967295
 8008228:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d029      	beq.n	8008284 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d012      	beq.n	800825e <osMessageQueueNew+0x62>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	2b4f      	cmp	r3, #79	; 0x4f
 800823e:	d90e      	bls.n	800825e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	695a      	ldr	r2, [r3, #20]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	429a      	cmp	r2, r3
 8008256:	d302      	bcc.n	800825e <osMessageQueueNew+0x62>
        mem = 1;
 8008258:	2301      	movs	r3, #1
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	e014      	b.n	8008288 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d110      	bne.n	8008288 <osMessageQueueNew+0x8c>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10c      	bne.n	8008288 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008272:	2b00      	cmp	r3, #0
 8008274:	d108      	bne.n	8008288 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d104      	bne.n	8008288 <osMessageQueueNew+0x8c>
          mem = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	61bb      	str	r3, [r7, #24]
 8008282:	e001      	b.n	8008288 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d10b      	bne.n	80082a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2100      	movs	r1, #0
 8008298:	9100      	str	r1, [sp, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fbab 	bl	80089f8 <xQueueGenericCreateStatic>
 80082a2:	61f8      	str	r0, [r7, #28]
 80082a4:	e008      	b.n	80082b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d105      	bne.n	80082b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082ac:	2200      	movs	r2, #0
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fc19 	bl	8008ae8 <xQueueGenericCreate>
 80082b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00c      	beq.n	80082d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <osMessageQueueNew+0xd0>
        name = attr->name;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e001      	b.n	80082d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	69f8      	ldr	r0, [r7, #28]
 80082d4:	f001 faae 	bl	8009834 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082d8:	69fb      	ldr	r3, [r7, #28]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082fc:	f3ef 8305 	mrs	r3, IPSR
 8008300:	617b      	str	r3, [r7, #20]
  return(result);
 8008302:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008304:	2b00      	cmp	r3, #0
 8008306:	d028      	beq.n	800835a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <osMessageQueuePut+0x36>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <osMessageQueuePut+0x36>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800831a:	f06f 0303 	mvn.w	r3, #3
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	e038      	b.n	8008394 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008326:	f107 0210 	add.w	r2, r7, #16
 800832a:	2300      	movs	r3, #0
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	69b8      	ldr	r0, [r7, #24]
 8008330:	f000 fda0 	bl	8008e74 <xQueueGenericSendFromISR>
 8008334:	4603      	mov	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d003      	beq.n	8008342 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800833a:	f06f 0302 	mvn.w	r3, #2
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e028      	b.n	8008394 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d025      	beq.n	8008394 <osMessageQueuePut+0xb0>
 8008348:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <osMessageQueuePut+0xbc>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	e01c      	b.n	8008394 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <osMessageQueuePut+0x82>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008366:	f06f 0303 	mvn.w	r3, #3
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e012      	b.n	8008394 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800836e:	2300      	movs	r3, #0
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	69b8      	ldr	r0, [r7, #24]
 8008376:	f000 fc7f 	bl	8008c78 <xQueueGenericSend>
 800837a:	4603      	mov	r3, r0
 800837c:	2b01      	cmp	r3, #1
 800837e:	d009      	beq.n	8008394 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008386:	f06f 0301 	mvn.w	r3, #1
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	e002      	b.n	8008394 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800838e:	f06f 0302 	mvn.w	r3, #2
 8008392:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008394:	69fb      	ldr	r3, [r7, #28]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ba:	f3ef 8305 	mrs	r3, IPSR
 80083be:	617b      	str	r3, [r7, #20]
  return(result);
 80083c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d028      	beq.n	8008418 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <osMessageQueueGet+0x34>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <osMessageQueueGet+0x34>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80083d8:	f06f 0303 	mvn.w	r3, #3
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	e037      	b.n	8008450 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80083e4:	f107 0310 	add.w	r3, r7, #16
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	69b8      	ldr	r0, [r7, #24]
 80083ee:	f001 f855 	bl	800949c <xQueueReceiveFromISR>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d003      	beq.n	8008400 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80083f8:	f06f 0302 	mvn.w	r3, #2
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e027      	b.n	8008450 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d024      	beq.n	8008450 <osMessageQueueGet+0xac>
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <osMessageQueueGet+0xb8>)
 8008408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	e01b      	b.n	8008450 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <osMessageQueueGet+0x80>
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008424:	f06f 0303 	mvn.w	r3, #3
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e011      	b.n	8008450 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	69b8      	ldr	r0, [r7, #24]
 8008432:	f000 fe47 	bl	80090c4 <xQueueReceive>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d009      	beq.n	8008450 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008442:	f06f 0301 	mvn.w	r3, #1
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e002      	b.n	8008450 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800844a:	f06f 0302 	mvn.w	r3, #2
 800844e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008450:	69fb      	ldr	r3, [r7, #28]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4a07      	ldr	r2, [pc, #28]	; (800848c <vApplicationGetIdleTaskMemory+0x2c>)
 8008470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	4a06      	ldr	r2, [pc, #24]	; (8008490 <vApplicationGetIdleTaskMemory+0x30>)
 8008476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2280      	movs	r2, #128	; 0x80
 800847c:	601a      	str	r2, [r3, #0]
}
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	200002ac 	.word	0x200002ac
 8008490:	20000354 	.word	0x20000354

08008494 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a07      	ldr	r2, [pc, #28]	; (80084c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80084a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <vApplicationGetTimerTaskMemory+0x30>)
 80084aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	20000554 	.word	0x20000554
 80084c4:	200005fc 	.word	0x200005fc

080084c8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80084ec:	2320      	movs	r3, #32
 80084ee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d00a      	beq.n	800850c <xEventGroupCreateStatic+0x44>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	3304      	adds	r3, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f94d 	bl	80087c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2201      	movs	r2, #1
 800852a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800852c:	697b      	ldr	r3, [r7, #20]
	}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800853c:	2020      	movs	r0, #32
 800853e:	f003 f843 	bl	800b5c8 <pvPortMalloc>
 8008542:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f933 	bl	80087c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008560:	687b      	ldr	r3, [r7, #4]
	}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <xEventGroupClearBits+0x2a>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <xEventGroupClearBits+0x4a>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60bb      	str	r3, [r7, #8]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80085b4:	f002 fee6 	bl	800b384 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	43db      	mvns	r3, r3
 80085c6:	401a      	ands	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80085cc:	f002 ff0a 	bl	800b3e4 <vPortExitCritical>

	return uxReturn;
 80085d0:	693b      	ldr	r3, [r7, #16]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80085e6:	2300      	movs	r3, #0
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4804      	ldr	r0, [pc, #16]	; (8008600 <xEventGroupClearBitsFromISR+0x24>)
 80085ee:	f002 fd7f 	bl	800b0f0 <xTimerPendFunctionCallFromISR>
 80085f2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80085f4:	68fb      	ldr	r3, [r7, #12]
	}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	0800877d 	.word	0x0800877d

08008604 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	; 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008610:	f3ef 8211 	mrs	r2, BASEPRI
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	60fa      	str	r2, [r7, #12]
 8008626:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008628:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800862a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800863c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800863e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8008640:	4618      	mov	r0, r3
 8008642:	3724      	adds	r7, #36	; 0x24
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	; 0x38
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008656:	2300      	movs	r3, #0
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <xEventGroupSetBits+0x32>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	613b      	str	r3, [r7, #16]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <xEventGroupSetBits+0x52>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	3304      	adds	r3, #4
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	3308      	adds	r3, #8
 80086a8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80086aa:	f001 fba7 	bl	8009dfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	431a      	orrs	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80086c0:	e03c      	b.n	800873c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80086ce:	2300      	movs	r3, #0
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086d8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086e0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d108      	bne.n	80086fe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80086f8:	2301      	movs	r3, #1
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fc:	e008      	b.n	8008710 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	4013      	ands	r3, r2
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	d101      	bne.n	8008710 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	4313      	orrs	r3, r2
 8008726:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008730:	4619      	mov	r1, r3
 8008732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008734:	f001 fdf0 	bl	800a318 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800873c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	429a      	cmp	r2, r3
 8008742:	d1be      	bne.n	80086c2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	43db      	mvns	r3, r3
 800874c:	401a      	ands	r2, r3
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008752:	f001 fb61 	bl	8009e18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	681b      	ldr	r3, [r3, #0]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3738      	adds	r7, #56	; 0x38
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ff6c 	bl	800864c <xEventGroupSetBits>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff feee 	bl	800856a <xEventGroupClearBits>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	68f9      	ldr	r1, [r7, #12]
 80087aa:	4804      	ldr	r0, [pc, #16]	; (80087bc <xEventGroupSetBitsFromISR+0x24>)
 80087ac:	f002 fca0 	bl	800b0f0 <xTimerPendFunctionCallFromISR>
 80087b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80087b2:	697b      	ldr	r3, [r7, #20]
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	08008763 	.word	0x08008763

080087c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 0208 	add.w	r2, r3, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f103 0208 	add.w	r2, r3, #8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f103 0208 	add.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d103      	bne.n	8008882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e00c      	b.n	800889c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3308      	adds	r3, #8
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e002      	b.n	8008890 <vListInsert+0x2e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d2f6      	bcs.n	800888a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6892      	ldr	r2, [r2, #8]
 80088ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d103      	bne.n	8008908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	1e5a      	subs	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xQueueGenericReset+0x2a>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60bb      	str	r3, [r7, #8]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008952:	f002 fd17 	bl	800b384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008962:	fb01 f303 	mul.w	r3, r1, r3
 8008966:	441a      	add	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	3b01      	subs	r3, #1
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	441a      	add	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	22ff      	movs	r2, #255	; 0xff
 800899e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d114      	bne.n	80089d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3310      	adds	r3, #16
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fc4b 	bl	800a250 <xTaskRemoveFromEventList>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d012      	beq.n	80089e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <xQueueGenericReset+0xcc>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e009      	b.n	80089e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3310      	adds	r3, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fef2 	bl	80087c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3324      	adds	r3, #36	; 0x24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff feed 	bl	80087c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089e6:	f002 fcfd 	bl	800b3e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089ea:	2301      	movs	r3, #1
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	; 0x38
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <xQueueGenericCreateStatic+0x52>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <xQueueGenericCreateStatic+0x56>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <xQueueGenericCreateStatic+0x58>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	623b      	str	r3, [r7, #32]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <xQueueGenericCreateStatic+0x7e>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <xQueueGenericCreateStatic+0x82>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <xQueueGenericCreateStatic+0x84>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	61fb      	str	r3, [r7, #28]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a96:	2350      	movs	r3, #80	; 0x50
 8008a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b50      	cmp	r3, #80	; 0x50
 8008a9e:	d00a      	beq.n	8008ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	61bb      	str	r3, [r7, #24]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00d      	beq.n	8008ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f83f 	bl	8008b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3730      	adds	r7, #48	; 0x30
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	613b      	str	r3, [r7, #16]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	fb02 f303 	mul.w	r3, r2, r3
 8008b1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	3350      	adds	r3, #80	; 0x50
 8008b20:	4618      	mov	r0, r3
 8008b22:	f002 fd51 	bl	800b5c8 <pvPortMalloc>
 8008b26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	3350      	adds	r3, #80	; 0x50
 8008b36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b40:	79fa      	ldrb	r2, [r7, #7]
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4613      	mov	r3, r2
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f805 	bl	8008b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b52:	69bb      	ldr	r3, [r7, #24]
	}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3720      	adds	r7, #32
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	e002      	b.n	8008b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	69b8      	ldr	r0, [r7, #24]
 8008b8e:	f7ff fecb 	bl	8008928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af02      	add	r7, sp, #8
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	61bb      	str	r3, [r7, #24]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d90a      	bls.n	8008be8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	617b      	str	r3, [r7, #20]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008be8:	2302      	movs	r3, #2
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff ff00 	bl	80089f8 <xQueueGenericCreateStatic>
 8008bf8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c06:	69fb      	ldr	r3, [r7, #28]
	}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	613b      	str	r3, [r7, #16]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d90a      	bls.n	8008c54 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	60fb      	str	r3, [r7, #12]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c54:	2202      	movs	r2, #2
 8008c56:	2100      	movs	r1, #0
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ff45 	bl	8008ae8 <xQueueGenericCreate>
 8008c5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c6c:	697b      	ldr	r3, [r7, #20]
	}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08e      	sub	sp, #56	; 0x38
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c86:	2300      	movs	r3, #0
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <xQueueGenericSend+0x32>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <xQueueGenericSend+0x40>
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <xQueueGenericSend+0x44>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <xQueueGenericSend+0x46>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <xQueueGenericSend+0x60>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d103      	bne.n	8008ce6 <xQueueGenericSend+0x6e>
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <xQueueGenericSend+0x72>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <xQueueGenericSend+0x74>
 8008cea:	2300      	movs	r3, #0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xQueueGenericSend+0x8e>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	623b      	str	r3, [r7, #32]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d06:	f001 fcc7 	bl	800a698 <xTaskGetSchedulerState>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <xQueueGenericSend+0x9e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <xQueueGenericSend+0xa2>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <xQueueGenericSend+0xa4>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	61fb      	str	r3, [r7, #28]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d36:	f002 fb25 	bl	800b384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <xQueueGenericSend+0xd4>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d129      	bne.n	8008da0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d52:	f000 fc5e 	bl	8009612 <prvCopyDataToQueue>
 8008d56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f001 fa73 	bl	800a250 <xTaskRemoveFromEventList>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d013      	beq.n	8008d98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d70:	4b3f      	ldr	r3, [pc, #252]	; (8008e70 <xQueueGenericSend+0x1f8>)
 8008d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	e00a      	b.n	8008d98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <xQueueGenericSend+0x1f8>)
 8008d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d98:	f002 fb24 	bl	800b3e4 <vPortExitCritical>
				return pdPASS;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e063      	b.n	8008e68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d103      	bne.n	8008dae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008da6:	f002 fb1d 	bl	800b3e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e05c      	b.n	8008e68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008db4:	f107 0314 	add.w	r3, r7, #20
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 fb0f 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dc2:	f002 fb0f 	bl	800b3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc6:	f001 f819 	bl	8009dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dca:	f002 fadb 	bl	800b384 <vPortEnterCritical>
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d103      	bne.n	8008de4 <xQueueGenericSend+0x16c>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d103      	bne.n	8008dfa <xQueueGenericSend+0x182>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dfa:	f002 faf3 	bl	800b3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dfe:	1d3a      	adds	r2, r7, #4
 8008e00:	f107 0314 	add.w	r3, r7, #20
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fafe 	bl	800a408 <xTaskCheckForTimeOut>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d124      	bne.n	8008e5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e14:	f000 fcf5 	bl	8009802 <prvIsQueueFull>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d018      	beq.n	8008e50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	3310      	adds	r3, #16
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f9c2 	bl	800a1b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e2e:	f000 fc80 	bl	8009732 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e32:	f000 fff1 	bl	8009e18 <xTaskResumeAll>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f47f af7c 	bne.w	8008d36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <xQueueGenericSend+0x1f8>)
 8008e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	e772      	b.n	8008d36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e52:	f000 fc6e 	bl	8009732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e56:	f000 ffdf 	bl	8009e18 <xTaskResumeAll>
 8008e5a:	e76c      	b.n	8008d36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e5e:	f000 fc68 	bl	8009732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e62:	f000 ffd9 	bl	8009e18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3738      	adds	r7, #56	; 0x38
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b090      	sub	sp, #64	; 0x40
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <xQueueGenericSendFromISR+0x3c>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <xQueueGenericSendFromISR+0x40>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e000      	b.n	8008eb6 <xQueueGenericSendFromISR+0x42>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d103      	bne.n	8008ede <xQueueGenericSendFromISR+0x6a>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericSendFromISR+0x6e>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericSendFromISR+0x70>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	623b      	str	r3, [r7, #32]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008efe:	f002 fb23 	bl	800b548 <vPortValidateInterruptPriority>
	__asm volatile
 8008f02:	f3ef 8211 	mrs	r2, BASEPRI
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	61fa      	str	r2, [r7, #28]
 8008f18:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d302      	bcc.n	8008f30 <xQueueGenericSendFromISR+0xbc>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d12f      	bne.n	8008f90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f46:	f000 fb64 	bl	8009612 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d112      	bne.n	8008f7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d016      	beq.n	8008f8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	3324      	adds	r3, #36	; 0x24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 f975 	bl	800a250 <xTaskRemoveFromEventList>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00e      	beq.n	8008f8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e007      	b.n	8008f8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	b25a      	sxtb	r2, r3
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008f8e:	e001      	b.n	8008f94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3740      	adds	r7, #64	; 0x40
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b08e      	sub	sp, #56	; 0x38
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	623b      	str	r3, [r7, #32]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61fb      	str	r3, [r7, #28]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <xQueueGiveFromISR+0x58>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <xQueueGiveFromISR+0x5c>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xQueueGiveFromISR+0x5e>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xQueueGiveFromISR+0x78>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	61bb      	str	r3, [r7, #24]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009022:	f002 fa91 	bl	800b548 <vPortValidateInterruptPriority>
	__asm volatile
 8009026:	f3ef 8211 	mrs	r2, BASEPRI
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	617a      	str	r2, [r7, #20]
 800903c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800903e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800904e:	429a      	cmp	r2, r3
 8009050:	d22b      	bcs.n	80090aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d112      	bne.n	8009094 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d016      	beq.n	80090a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	3324      	adds	r3, #36	; 0x24
 800907a:	4618      	mov	r0, r3
 800907c:	f001 f8e8 	bl	800a250 <xTaskRemoveFromEventList>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	e007      	b.n	80090a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009098:	3301      	adds	r3, #1
 800909a:	b2db      	uxtb	r3, r3
 800909c:	b25a      	sxtb	r2, r3
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090a4:	2301      	movs	r3, #1
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34
 80090a8:	e001      	b.n	80090ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f383 8811 	msr	BASEPRI, r3
}
 80090b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3738      	adds	r7, #56	; 0x38
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08c      	sub	sp, #48	; 0x30
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <xQueueReceive+0x30>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	623b      	str	r3, [r7, #32]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d103      	bne.n	8009102 <xQueueReceive+0x3e>
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <xQueueReceive+0x42>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueReceive+0x44>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueReceive+0x5e>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61fb      	str	r3, [r7, #28]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009122:	f001 fab9 	bl	800a698 <xTaskGetSchedulerState>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <xQueueReceive+0x6e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueReceive+0x72>
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <xQueueReceive+0x74>
 8009136:	2300      	movs	r3, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xQueueReceive+0x8e>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61bb      	str	r3, [r7, #24]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009152:	f002 f917 	bl	800b384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d01f      	beq.n	80091a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	f000 fabe 	bl	80096e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	3310      	adds	r3, #16
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f866 	bl	800a250 <xTaskRemoveFromEventList>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800918a:	4b3d      	ldr	r3, [pc, #244]	; (8009280 <xQueueReceive+0x1bc>)
 800918c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800919a:	f002 f923 	bl	800b3e4 <vPortExitCritical>
				return pdPASS;
 800919e:	2301      	movs	r3, #1
 80091a0:	e069      	b.n	8009276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091a8:	f002 f91c 	bl	800b3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091ac:	2300      	movs	r3, #0
 80091ae:	e062      	b.n	8009276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091b6:	f107 0310 	add.w	r3, r7, #16
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 f90e 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091c4:	f002 f90e 	bl	800b3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091c8:	f000 fe18 	bl	8009dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091cc:	f002 f8da 	bl	800b384 <vPortEnterCritical>
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091dc:	d103      	bne.n	80091e6 <xQueueReceive+0x122>
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ec:	b25b      	sxtb	r3, r3
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d103      	bne.n	80091fc <xQueueReceive+0x138>
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091fc:	f002 f8f2 	bl	800b3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009200:	1d3a      	adds	r2, r7, #4
 8009202:	f107 0310 	add.w	r3, r7, #16
 8009206:	4611      	mov	r1, r2
 8009208:	4618      	mov	r0, r3
 800920a:	f001 f8fd 	bl	800a408 <xTaskCheckForTimeOut>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d123      	bne.n	800925c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009216:	f000 fade 	bl	80097d6 <prvIsQueueEmpty>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d017      	beq.n	8009250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	3324      	adds	r3, #36	; 0x24
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f000 ffc1 	bl	800a1b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800922e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009230:	f000 fa7f 	bl	8009732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009234:	f000 fdf0 	bl	8009e18 <xTaskResumeAll>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d189      	bne.n	8009152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800923e:	4b10      	ldr	r3, [pc, #64]	; (8009280 <xQueueReceive+0x1bc>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	e780      	b.n	8009152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009252:	f000 fa6e 	bl	8009732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009256:	f000 fddf 	bl	8009e18 <xTaskResumeAll>
 800925a:	e77a      	b.n	8009152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800925c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925e:	f000 fa68 	bl	8009732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009262:	f000 fdd9 	bl	8009e18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009268:	f000 fab5 	bl	80097d6 <prvIsQueueEmpty>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	f43f af6f 	beq.w	8009152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009276:	4618      	mov	r0, r3
 8009278:	3730      	adds	r7, #48	; 0x30
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08e      	sub	sp, #56	; 0x38
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009296:	2300      	movs	r3, #0
 8009298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	623b      	str	r3, [r7, #32]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	61fb      	str	r3, [r7, #28]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092d4:	f001 f9e0 	bl	800a698 <xTaskGetSchedulerState>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <xQueueSemaphoreTake+0x60>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <xQueueSemaphoreTake+0x64>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <xQueueSemaphoreTake+0x66>
 80092e8:	2300      	movs	r3, #0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	61bb      	str	r3, [r7, #24]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009304:	f002 f83e 	bl	800b384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d024      	beq.n	800935e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	1e5a      	subs	r2, r3, #1
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009324:	f001 fb2e 	bl	800a984 <pvTaskIncrementMutexHeldCount>
 8009328:	4602      	mov	r2, r0
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00f      	beq.n	8009356 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	3310      	adds	r3, #16
 800933a:	4618      	mov	r0, r3
 800933c:	f000 ff88 	bl	800a250 <xTaskRemoveFromEventList>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009346:	4b54      	ldr	r3, [pc, #336]	; (8009498 <xQueueSemaphoreTake+0x214>)
 8009348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009356:	f002 f845 	bl	800b3e4 <vPortExitCritical>
				return pdPASS;
 800935a:	2301      	movs	r3, #1
 800935c:	e097      	b.n	800948e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d111      	bne.n	8009388 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	617b      	str	r3, [r7, #20]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009380:	f002 f830 	bl	800b3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009384:	2300      	movs	r3, #0
 8009386:	e082      	b.n	800948e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800938e:	f107 030c 	add.w	r3, r7, #12
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f822 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800939c:	f002 f822 	bl	800b3e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093a0:	f000 fd2c 	bl	8009dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093a4:	f001 ffee 	bl	800b384 <vPortEnterCritical>
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ae:	b25b      	sxtb	r3, r3
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b4:	d103      	bne.n	80093be <xQueueSemaphoreTake+0x13a>
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093c4:	b25b      	sxtb	r3, r3
 80093c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ca:	d103      	bne.n	80093d4 <xQueueSemaphoreTake+0x150>
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d4:	f002 f806 	bl	800b3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d8:	463a      	mov	r2, r7
 80093da:	f107 030c 	add.w	r3, r7, #12
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 f811 	bl	800a408 <xTaskCheckForTimeOut>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d132      	bne.n	8009452 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ee:	f000 f9f2 	bl	80097d6 <prvIsQueueEmpty>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d026      	beq.n	8009446 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009400:	f001 ffc0 	bl	800b384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f963 	bl	800a6d4 <xTaskPriorityInherit>
 800940e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009410:	f001 ffe8 	bl	800b3e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	3324      	adds	r3, #36	; 0x24
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fec7 	bl	800a1b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009424:	f000 f985 	bl	8009732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009428:	f000 fcf6 	bl	8009e18 <xTaskResumeAll>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	f47f af68 	bne.w	8009304 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009434:	4b18      	ldr	r3, [pc, #96]	; (8009498 <xQueueSemaphoreTake+0x214>)
 8009436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	e75e      	b.n	8009304 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009448:	f000 f973 	bl	8009732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800944c:	f000 fce4 	bl	8009e18 <xTaskResumeAll>
 8009450:	e758      	b.n	8009304 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009454:	f000 f96d 	bl	8009732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009458:	f000 fcde 	bl	8009e18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800945c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800945e:	f000 f9ba 	bl	80097d6 <prvIsQueueEmpty>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	f43f af4d 	beq.w	8009304 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00d      	beq.n	800948c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009470:	f001 ff88 	bl	800b384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009476:	f000 f8b4 	bl	80095e2 <prvGetDisinheritPriorityAfterTimeout>
 800947a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009482:	4618      	mov	r0, r3
 8009484:	f001 f9fc 	bl	800a880 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009488:	f001 ffac 	bl	800b3e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800948c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800948e:	4618      	mov	r0, r3
 8009490:	3738      	adds	r7, #56	; 0x38
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	623b      	str	r3, [r7, #32]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d103      	bne.n	80094d6 <xQueueReceiveFromISR+0x3a>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <xQueueReceiveFromISR+0x3e>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e000      	b.n	80094dc <xQueueReceiveFromISR+0x40>
 80094da:	2300      	movs	r3, #0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	61fb      	str	r3, [r7, #28]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094f6:	f002 f827 	bl	800b548 <vPortValidateInterruptPriority>
	__asm volatile
 80094fa:	f3ef 8211 	mrs	r2, BASEPRI
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	61ba      	str	r2, [r7, #24]
 8009510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d02f      	beq.n	8009582 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009530:	f000 f8d9 	bl	80096e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	1e5a      	subs	r2, r3, #1
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800953c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d112      	bne.n	800956c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d016      	beq.n	800957c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	3310      	adds	r3, #16
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fe7c 	bl	800a250 <xTaskRemoveFromEventList>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00e      	beq.n	800957c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00b      	beq.n	800957c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	e007      	b.n	800957c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009570:	3301      	adds	r3, #1
 8009572:	b2db      	uxtb	r3, r3
 8009574:	b25a      	sxtb	r2, r3
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800957c:	2301      	movs	r3, #1
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
 8009580:	e001      	b.n	8009586 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009582:	2300      	movs	r3, #0
 8009584:	637b      	str	r3, [r7, #52]	; 0x34
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f383 8811 	msr	BASEPRI, r3
}
 8009590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009594:	4618      	mov	r0, r3
 8009596:	3738      	adds	r7, #56	; 0x38
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <vQueueDelete+0x28>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	60bb      	str	r3, [r7, #8]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f95f 	bl	8009888 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f002 f8c3 	bl	800b760 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	e001      	b.n	8009604 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009604:	68fb      	ldr	r3, [r7, #12]
	}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b086      	sub	sp, #24
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10d      	bne.n	800964c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d14d      	bne.n	80096d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f8b1 	bl	800a7a4 <xTaskPriorityDisinherit>
 8009642:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
 800964a:	e043      	b.n	80096d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d119      	bne.n	8009686 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6858      	ldr	r0, [r3, #4]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	461a      	mov	r2, r3
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	f002 fcf2 	bl	800c046 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	441a      	add	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	429a      	cmp	r2, r3
 800967a:	d32b      	bcc.n	80096d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	605a      	str	r2, [r3, #4]
 8009684:	e026      	b.n	80096d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68d8      	ldr	r0, [r3, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	461a      	mov	r2, r3
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	f002 fcd8 	bl	800c046 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	425b      	negs	r3, r3
 80096a0:	441a      	add	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d207      	bcs.n	80096c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	425b      	negs	r3, r3
 80096bc:	441a      	add	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d105      	bne.n	80096d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096dc:	697b      	ldr	r3, [r7, #20]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d018      	beq.n	800972a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	441a      	add	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	429a      	cmp	r2, r3
 8009710:	d303      	bcc.n	800971a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68d9      	ldr	r1, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009722:	461a      	mov	r2, r3
 8009724:	6838      	ldr	r0, [r7, #0]
 8009726:	f002 fc8e 	bl	800c046 <memcpy>
	}
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800973a:	f001 fe23 	bl	800b384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009744:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009746:	e011      	b.n	800976c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d012      	beq.n	8009776 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fd7b 	bl	800a250 <xTaskRemoveFromEventList>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009760:	f000 feb4 	bl	800a4cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	3b01      	subs	r3, #1
 8009768:	b2db      	uxtb	r3, r3
 800976a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800976c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009770:	2b00      	cmp	r3, #0
 8009772:	dce9      	bgt.n	8009748 <prvUnlockQueue+0x16>
 8009774:	e000      	b.n	8009778 <prvUnlockQueue+0x46>
					break;
 8009776:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	22ff      	movs	r2, #255	; 0xff
 800977c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009780:	f001 fe30 	bl	800b3e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009784:	f001 fdfe 	bl	800b384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800978e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009790:	e011      	b.n	80097b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d012      	beq.n	80097c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3310      	adds	r3, #16
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fd56 	bl	800a250 <xTaskRemoveFromEventList>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097aa:	f000 fe8f 	bl	800a4cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dce9      	bgt.n	8009792 <prvUnlockQueue+0x60>
 80097be:	e000      	b.n	80097c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	22ff      	movs	r2, #255	; 0xff
 80097c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097ca:	f001 fe0b 	bl	800b3e4 <vPortExitCritical>
}
 80097ce:	bf00      	nop
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097de:	f001 fdd1 	bl	800b384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097ea:	2301      	movs	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	e001      	b.n	80097f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097f4:	f001 fdf6 	bl	800b3e4 <vPortExitCritical>

	return xReturn;
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800980a:	f001 fdbb 	bl	800b384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009816:	429a      	cmp	r2, r3
 8009818:	d102      	bne.n	8009820 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800981a:	2301      	movs	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	e001      	b.n	8009824 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009824:	f001 fdde 	bl	800b3e4 <vPortExitCritical>

	return xReturn;
 8009828:	68fb      	ldr	r3, [r7, #12]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	e014      	b.n	800986e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009844:	4a0f      	ldr	r2, [pc, #60]	; (8009884 <vQueueAddToRegistry+0x50>)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10b      	bne.n	8009868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009850:	490c      	ldr	r1, [pc, #48]	; (8009884 <vQueueAddToRegistry+0x50>)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800985a:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <vQueueAddToRegistry+0x50>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009866:	e006      	b.n	8009876 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b07      	cmp	r3, #7
 8009872:	d9e7      	bls.n	8009844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	200009fc 	.word	0x200009fc

08009888 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e016      	b.n	80098c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <vQueueUnregisterQueue+0x50>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	4413      	add	r3, r2
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d10b      	bne.n	80098be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80098a6:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <vQueueUnregisterQueue+0x50>)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2100      	movs	r1, #0
 80098ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80098b0:	4a09      	ldr	r2, [pc, #36]	; (80098d8 <vQueueUnregisterQueue+0x50>)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	605a      	str	r2, [r3, #4]
				break;
 80098bc:	e006      	b.n	80098cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3301      	adds	r3, #1
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b07      	cmp	r3, #7
 80098c8:	d9e5      	bls.n	8009896 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	200009fc 	.word	0x200009fc

080098dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098ec:	f001 fd4a 	bl	800b384 <vPortEnterCritical>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f6:	b25b      	sxtb	r3, r3
 80098f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fc:	d103      	bne.n	8009906 <vQueueWaitForMessageRestricted+0x2a>
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990c:	b25b      	sxtb	r3, r3
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d103      	bne.n	800991c <vQueueWaitForMessageRestricted+0x40>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991c:	f001 fd62 	bl	800b3e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	3324      	adds	r3, #36	; 0x24
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fc61 	bl	800a1f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009936:	6978      	ldr	r0, [r7, #20]
 8009938:	f7ff fefb 	bl	8009732 <prvUnlockQueue>
	}
 800993c:	bf00      	nop
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08e      	sub	sp, #56	; 0x38
 8009948:	af04      	add	r7, sp, #16
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	623b      	str	r3, [r7, #32]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xTaskCreateStatic+0x46>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	61fb      	str	r3, [r7, #28]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800998a:	23a8      	movs	r3, #168	; 0xa8
 800998c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	2ba8      	cmp	r3, #168	; 0xa8
 8009992:	d00a      	beq.n	80099aa <xTaskCreateStatic+0x66>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	61bb      	str	r3, [r7, #24]
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01e      	beq.n	80099f0 <xTaskCreateStatic+0xac>
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01b      	beq.n	80099f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	2202      	movs	r2, #2
 80099c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099ca:	2300      	movs	r3, #0
 80099cc:	9303      	str	r3, [sp, #12]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	9302      	str	r3, [sp, #8]
 80099d2:	f107 0314 	add.w	r3, r7, #20
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f850 	bl	8009a88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ea:	f000 f8f3 	bl	8009bd4 <prvAddNewTaskToReadyList>
 80099ee:	e001      	b.n	80099f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099f4:	697b      	ldr	r3, [r7, #20]
	}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3728      	adds	r7, #40	; 0x28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b08c      	sub	sp, #48	; 0x30
 8009a02:	af04      	add	r7, sp, #16
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 fdd8 	bl	800b5c8 <pvPortMalloc>
 8009a18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a20:	20a8      	movs	r0, #168	; 0xa8
 8009a22:	f001 fdd1 	bl	800b5c8 <pvPortMalloc>
 8009a26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	631a      	str	r2, [r3, #48]	; 0x30
 8009a34:	e005      	b.n	8009a42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a36:	6978      	ldr	r0, [r7, #20]
 8009a38:	f001 fe92 	bl	800b760 <vPortFree>
 8009a3c:	e001      	b.n	8009a42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d017      	beq.n	8009a78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f80e 	bl	8009a88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a6c:	69f8      	ldr	r0, [r7, #28]
 8009a6e:	f000 f8b1 	bl	8009bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a72:	2301      	movs	r3, #1
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	e002      	b.n	8009a7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a78:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	21a5      	movs	r1, #165	; 0xa5
 8009aa2:	f002 f9ff 	bl	800bea4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	617b      	str	r3, [r7, #20]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01f      	beq.n	8009b26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	e012      	b.n	8009b12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	7819      	ldrb	r1, [r3, #0]
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	3334      	adds	r3, #52	; 0x34
 8009afc:	460a      	mov	r2, r1
 8009afe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d006      	beq.n	8009b1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	2b0f      	cmp	r3, #15
 8009b16:	d9e9      	bls.n	8009aec <prvInitialiseNewTask+0x64>
 8009b18:	e000      	b.n	8009b1c <prvInitialiseNewTask+0x94>
			{
				break;
 8009b1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b24:	e003      	b.n	8009b2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	2b37      	cmp	r3, #55	; 0x37
 8009b32:	d901      	bls.n	8009b38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b34:	2337      	movs	r3, #55	; 0x37
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	2200      	movs	r2, #0
 8009b48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fe56 	bl	8008800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	3318      	adds	r3, #24
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fe51 	bl	8008800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	3354      	adds	r3, #84	; 0x54
 8009b88:	224c      	movs	r2, #76	; 0x4c
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f002 f989 	bl	800bea4 <memset>
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <prvInitialiseNewTask+0x140>)
 8009b96:	659a      	str	r2, [r3, #88]	; 0x58
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <prvInitialiseNewTask+0x144>)
 8009b9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	4a0b      	ldr	r2, [pc, #44]	; (8009bd0 <prvInitialiseNewTask+0x148>)
 8009ba2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	69b8      	ldr	r0, [r7, #24]
 8009baa:	f001 fac1 	bl	800b130 <pxPortInitialiseStack>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20004c90 	.word	0x20004c90
 8009bcc:	20004cf8 	.word	0x20004cf8
 8009bd0:	20004d60 	.word	0x20004d60

08009bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bdc:	f001 fbd2 	bl	800b384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009be0:	4b2d      	ldr	r3, [pc, #180]	; (8009c98 <prvAddNewTaskToReadyList+0xc4>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	4a2c      	ldr	r2, [pc, #176]	; (8009c98 <prvAddNewTaskToReadyList+0xc4>)
 8009be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bea:	4b2c      	ldr	r3, [pc, #176]	; (8009c9c <prvAddNewTaskToReadyList+0xc8>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <prvAddNewTaskToReadyList+0xc8>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009bf8:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <prvAddNewTaskToReadyList+0xc4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d110      	bne.n	8009c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c00:	f000 fc88 	bl	800a514 <prvInitialiseTaskLists>
 8009c04:	e00d      	b.n	8009c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c06:	4b26      	ldr	r3, [pc, #152]	; (8009ca0 <prvAddNewTaskToReadyList+0xcc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d109      	bne.n	8009c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c0e:	4b23      	ldr	r3, [pc, #140]	; (8009c9c <prvAddNewTaskToReadyList+0xc8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d802      	bhi.n	8009c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c1c:	4a1f      	ldr	r2, [pc, #124]	; (8009c9c <prvAddNewTaskToReadyList+0xc8>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c22:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <prvAddNewTaskToReadyList+0xd0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	4a1e      	ldr	r2, [pc, #120]	; (8009ca4 <prvAddNewTaskToReadyList+0xd0>)
 8009c2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ca4 <prvAddNewTaskToReadyList+0xd0>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <prvAddNewTaskToReadyList+0xd4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d903      	bls.n	8009c48 <prvAddNewTaskToReadyList+0x74>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <prvAddNewTaskToReadyList+0xd4>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4a15      	ldr	r2, [pc, #84]	; (8009cac <prvAddNewTaskToReadyList+0xd8>)
 8009c56:	441a      	add	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fe fddb 	bl	800881a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c64:	f001 fbbe 	bl	800b3e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c68:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <prvAddNewTaskToReadyList+0xcc>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00e      	beq.n	8009c8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <prvAddNewTaskToReadyList+0xc8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d207      	bcs.n	8009c8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <prvAddNewTaskToReadyList+0xdc>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20000f10 	.word	0x20000f10
 8009c9c:	20000a3c 	.word	0x20000a3c
 8009ca0:	20000f1c 	.word	0x20000f1c
 8009ca4:	20000f2c 	.word	0x20000f2c
 8009ca8:	20000f18 	.word	0x20000f18
 8009cac:	20000a40 	.word	0x20000a40
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d017      	beq.n	8009cf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cc6:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <vTaskDelay+0x60>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <vTaskDelay+0x30>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	60bb      	str	r3, [r7, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ce4:	f000 f88a 	bl	8009dfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ce8:	2100      	movs	r1, #0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fe5e 	bl	800a9ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cf0:	f000 f892 	bl	8009e18 <xTaskResumeAll>
 8009cf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <vTaskDelay+0x64>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20000f38 	.word	0x20000f38
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	1d39      	adds	r1, r7, #4
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fb94 	bl	8008460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	9202      	str	r2, [sp, #8]
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	2300      	movs	r3, #0
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	2300      	movs	r3, #0
 8009d48:	460a      	mov	r2, r1
 8009d4a:	4924      	ldr	r1, [pc, #144]	; (8009ddc <vTaskStartScheduler+0xc0>)
 8009d4c:	4824      	ldr	r0, [pc, #144]	; (8009de0 <vTaskStartScheduler+0xc4>)
 8009d4e:	f7ff fdf9 	bl	8009944 <xTaskCreateStatic>
 8009d52:	4603      	mov	r3, r0
 8009d54:	4a23      	ldr	r2, [pc, #140]	; (8009de4 <vTaskStartScheduler+0xc8>)
 8009d56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d58:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <vTaskStartScheduler+0xc8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d60:	2301      	movs	r3, #1
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e001      	b.n	8009d6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d102      	bne.n	8009d76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d70:	f000 fe70 	bl	800aa54 <xTimerCreateTimerTask>
 8009d74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d11b      	bne.n	8009db4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	613b      	str	r3, [r7, #16]
}
 8009d8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d90:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <vTaskStartScheduler+0xcc>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3354      	adds	r3, #84	; 0x54
 8009d96:	4a15      	ldr	r2, [pc, #84]	; (8009dec <vTaskStartScheduler+0xd0>)
 8009d98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d9a:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <vTaskStartScheduler+0xd4>)
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009da0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009da2:	4b14      	ldr	r3, [pc, #80]	; (8009df4 <vTaskStartScheduler+0xd8>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009da8:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <vTaskStartScheduler+0xdc>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dae:	f001 fa47 	bl	800b240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009db2:	e00e      	b.n	8009dd2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d10a      	bne.n	8009dd2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	60fb      	str	r3, [r7, #12]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <vTaskStartScheduler+0xb4>
}
 8009dd2:	bf00      	nop
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	0800ce60 	.word	0x0800ce60
 8009de0:	0800a4e5 	.word	0x0800a4e5
 8009de4:	20000f34 	.word	0x20000f34
 8009de8:	20000a3c 	.word	0x20000a3c
 8009dec:	20000068 	.word	0x20000068
 8009df0:	20000f30 	.word	0x20000f30
 8009df4:	20000f1c 	.word	0x20000f1c
 8009df8:	20000f14 	.word	0x20000f14

08009dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e00:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <vTaskSuspendAll+0x18>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	4a03      	ldr	r2, [pc, #12]	; (8009e14 <vTaskSuspendAll+0x18>)
 8009e08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e0a:	bf00      	nop
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000f38 	.word	0x20000f38

08009e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e26:	4b42      	ldr	r3, [pc, #264]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	603b      	str	r3, [r7, #0]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e44:	f001 fa9e 	bl	800b384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e48:	4b39      	ldr	r3, [pc, #228]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a38      	ldr	r2, [pc, #224]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e52:	4b37      	ldr	r3, [pc, #220]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d162      	bne.n	8009f20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e5a:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <xTaskResumeAll+0x11c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d05e      	beq.n	8009f20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e62:	e02f      	b.n	8009ec4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e64:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <xTaskResumeAll+0x120>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3318      	adds	r3, #24
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fd2f 	bl	80088d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fd2a 	bl	80088d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b2d      	ldr	r3, [pc, #180]	; (8009f3c <xTaskResumeAll+0x124>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskResumeAll+0x7c>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a2a      	ldr	r2, [pc, #168]	; (8009f3c <xTaskResumeAll+0x124>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <xTaskResumeAll+0x128>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fcb5 	bl	800881a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b23      	ldr	r3, [pc, #140]	; (8009f44 <xTaskResumeAll+0x12c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d302      	bcc.n	8009ec4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ebe:	4b22      	ldr	r3, [pc, #136]	; (8009f48 <xTaskResumeAll+0x130>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <xTaskResumeAll+0x120>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1cb      	bne.n	8009e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ed2:	f000 fbc1 	bl	800a658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ed6:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <xTaskResumeAll+0x134>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d010      	beq.n	8009f04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ee2:	f000 f847 	bl	8009f74 <xTaskIncrementTick>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009eec:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <xTaskResumeAll+0x130>)
 8009eee:	2201      	movs	r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1f1      	bne.n	8009ee2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <xTaskResumeAll+0x134>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f04:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <xTaskResumeAll+0x130>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <xTaskResumeAll+0x138>)
 8009f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f20:	f001 fa60 	bl	800b3e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009f24:	68bb      	ldr	r3, [r7, #8]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000f38 	.word	0x20000f38
 8009f34:	20000f10 	.word	0x20000f10
 8009f38:	20000ed0 	.word	0x20000ed0
 8009f3c:	20000f18 	.word	0x20000f18
 8009f40:	20000a40 	.word	0x20000a40
 8009f44:	20000a3c 	.word	0x20000a3c
 8009f48:	20000f24 	.word	0x20000f24
 8009f4c:	20000f20 	.word	0x20000f20
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <xTaskGetTickCount+0x1c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f60:	687b      	ldr	r3, [r7, #4]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000f14 	.word	0x20000f14

08009f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f7e:	4b4f      	ldr	r3, [pc, #316]	; (800a0bc <xTaskIncrementTick+0x148>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f040 808f 	bne.w	800a0a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f88:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f90:	4a4b      	ldr	r2, [pc, #300]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d120      	bne.n	8009fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f9c:	4b49      	ldr	r3, [pc, #292]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <xTaskIncrementTick+0x48>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	603b      	str	r3, [r7, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <xTaskIncrementTick+0x46>
 8009fbc:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a3f      	ldr	r2, [pc, #252]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4a3f      	ldr	r2, [pc, #252]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a3d      	ldr	r2, [pc, #244]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	f000 fb3d 	bl	800a658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fde:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d349      	bcc.n	800a07c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fe8:	4b36      	ldr	r3, [pc, #216]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	4b37      	ldr	r3, [pc, #220]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	601a      	str	r2, [r3, #0]
					break;
 8009ffa:	e03f      	b.n	800a07c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffc:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d203      	bcs.n	800a01c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a014:	4a2e      	ldr	r2, [pc, #184]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a01a:	e02f      	b.n	800a07c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe fc57 	bl	80088d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3318      	adds	r3, #24
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fc4e 	bl	80088d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	4b25      	ldr	r3, [pc, #148]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d903      	bls.n	800a04c <xTaskIncrementTick+0xd8>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a05a:	441a      	add	r2, r3
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7fe fbd9 	bl	800881a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d3b8      	bcc.n	8009fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a07a:	e7b5      	b.n	8009fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a07c:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a082:	4915      	ldr	r1, [pc, #84]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d901      	bls.n	800a098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <xTaskIncrementTick+0x16c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e004      	b.n	800a0b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0b0:	697b      	ldr	r3, [r7, #20]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000f38 	.word	0x20000f38
 800a0c0:	20000f14 	.word	0x20000f14
 800a0c4:	20000ec8 	.word	0x20000ec8
 800a0c8:	20000ecc 	.word	0x20000ecc
 800a0cc:	20000f28 	.word	0x20000f28
 800a0d0:	20000f30 	.word	0x20000f30
 800a0d4:	20000f18 	.word	0x20000f18
 800a0d8:	20000a40 	.word	0x20000a40
 800a0dc:	20000a3c 	.word	0x20000a3c
 800a0e0:	20000f24 	.word	0x20000f24
 800a0e4:	20000f20 	.word	0x20000f20

0800a0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <vTaskSwitchContext+0xb0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0f6:	4b29      	ldr	r3, [pc, #164]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0fc:	e046      	b.n	800a18c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a0fe:	4b27      	ldr	r3, [pc, #156]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <vTaskSwitchContext+0xb8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e010      	b.n	800a12e <vTaskSwitchContext+0x46>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vTaskSwitchContext+0x40>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskSwitchContext+0x3e>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	491d      	ldr	r1, [pc, #116]	; (800a1a4 <vTaskSwitchContext+0xbc>)
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0e4      	beq.n	800a10c <vTaskSwitchContext+0x24>
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a15      	ldr	r2, [pc, #84]	; (800a1a4 <vTaskSwitchContext+0xbc>)
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	605a      	str	r2, [r3, #4]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	3308      	adds	r3, #8
 800a164:	429a      	cmp	r2, r3
 800a166:	d104      	bne.n	800a172 <vTaskSwitchContext+0x8a>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	4a0b      	ldr	r2, [pc, #44]	; (800a1a8 <vTaskSwitchContext+0xc0>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	4a08      	ldr	r2, [pc, #32]	; (800a1a0 <vTaskSwitchContext+0xb8>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <vTaskSwitchContext+0xc0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3354      	adds	r3, #84	; 0x54
 800a188:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <vTaskSwitchContext+0xc4>)
 800a18a:	6013      	str	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	20000f38 	.word	0x20000f38
 800a19c:	20000f24 	.word	0x20000f24
 800a1a0:	20000f18 	.word	0x20000f18
 800a1a4:	20000a40 	.word	0x20000a40
 800a1a8:	20000a3c 	.word	0x20000a3c
 800a1ac:	20000068 	.word	0x20000068

0800a1b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	60fb      	str	r3, [r7, #12]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1d6:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <vTaskPlaceOnEventList+0x44>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3318      	adds	r3, #24
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fe fb3f 	bl	8008862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	6838      	ldr	r0, [r7, #0]
 800a1e8:	f000 fbe0 	bl	800a9ac <prvAddCurrentTaskToDelayedList>
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20000a3c 	.word	0x20000a3c

0800a1f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	617b      	str	r3, [r7, #20]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <vTaskPlaceOnEventListRestricted+0x54>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3318      	adds	r3, #24
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7fe faf6 	bl	800881a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a234:	f04f 33ff 	mov.w	r3, #4294967295
 800a238:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	68b8      	ldr	r0, [r7, #8]
 800a23e:	f000 fbb5 	bl	800a9ac <prvAddCurrentTaskToDelayedList>
	}
 800a242:	bf00      	nop
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000a3c 	.word	0x20000a3c

0800a250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60fb      	str	r3, [r7, #12]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	3318      	adds	r3, #24
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe fb27 	bl	80088d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a286:	4b1e      	ldr	r3, [pc, #120]	; (800a300 <xTaskRemoveFromEventList+0xb0>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d11d      	bne.n	800a2ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3304      	adds	r3, #4
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fb1e 	bl	80088d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29c:	4b19      	ldr	r3, [pc, #100]	; (800a304 <xTaskRemoveFromEventList+0xb4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d903      	bls.n	800a2ac <xTaskRemoveFromEventList+0x5c>
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	4a16      	ldr	r2, [pc, #88]	; (800a304 <xTaskRemoveFromEventList+0xb4>)
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4a13      	ldr	r2, [pc, #76]	; (800a308 <xTaskRemoveFromEventList+0xb8>)
 800a2ba:	441a      	add	r2, r3
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7fe faa9 	bl	800881a <vListInsertEnd>
 800a2c8:	e005      	b.n	800a2d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3318      	adds	r3, #24
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	480e      	ldr	r0, [pc, #56]	; (800a30c <xTaskRemoveFromEventList+0xbc>)
 800a2d2:	f7fe faa2 	bl	800881a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	4b0d      	ldr	r3, [pc, #52]	; (800a310 <xTaskRemoveFromEventList+0xc0>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d905      	bls.n	800a2f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <xTaskRemoveFromEventList+0xc4>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	e001      	b.n	800a2f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2f4:	697b      	ldr	r3, [r7, #20]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000f38 	.word	0x20000f38
 800a304:	20000f18 	.word	0x20000f18
 800a308:	20000a40 	.word	0x20000a40
 800a30c:	20000ed0 	.word	0x20000ed0
 800a310:	20000a3c 	.word	0x20000a3c
 800a314:	20000f24 	.word	0x20000f24

0800a318 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a322:	4b29      	ldr	r3, [pc, #164]	; (800a3c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	613b      	str	r3, [r7, #16]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7fe fab1 	bl	80088d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	3304      	adds	r3, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe faac 	bl	80088d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	4b12      	ldr	r3, [pc, #72]	; (800a3cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d903      	bls.n	800a390 <vTaskRemoveFromUnorderedEventList+0x78>
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	4a0f      	ldr	r2, [pc, #60]	; (800a3cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4a0c      	ldr	r2, [pc, #48]	; (800a3d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a39e:	441a      	add	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f7fe fa37 	bl	800881a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d902      	bls.n	800a3c0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a3bc:	2201      	movs	r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
	}
}
 800a3c0:	bf00      	nop
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000f38 	.word	0x20000f38
 800a3cc:	20000f18 	.word	0x20000f18
 800a3d0:	20000a40 	.word	0x20000a40
 800a3d4:	20000a3c 	.word	0x20000a3c
 800a3d8:	20000f24 	.word	0x20000f24

0800a3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <vTaskInternalSetTimeOutState+0x24>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <vTaskInternalSetTimeOutState+0x28>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	20000f28 	.word	0x20000f28
 800a404:	20000f14 	.word	0x20000f14

0800a408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	613b      	str	r3, [r7, #16]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a44a:	f000 ff9b 	bl	800b384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <xTaskCheckForTimeOut+0xbc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d102      	bne.n	800a46e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a468:	2300      	movs	r3, #0
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e023      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <xTaskCheckForTimeOut+0xc0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d007      	beq.n	800a48a <xTaskCheckForTimeOut+0x82>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	429a      	cmp	r2, r3
 800a482:	d302      	bcc.n	800a48a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	61fb      	str	r3, [r7, #28]
 800a488:	e015      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	429a      	cmp	r2, r3
 800a492:	d20b      	bcs.n	800a4ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff9b 	bl	800a3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e004      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f000 ff95 	bl	800b3e4 <vPortExitCritical>

	return xReturn;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20000f14 	.word	0x20000f14
 800a4c8:	20000f28 	.word	0x20000f28

0800a4cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <vTaskMissedYield+0x14>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000f24 	.word	0x20000f24

0800a4e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4ec:	f000 f852 	bl	800a594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <prvIdleTask+0x28>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d9f9      	bls.n	800a4ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <prvIdleTask+0x2c>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a508:	e7f0      	b.n	800a4ec <prvIdleTask+0x8>
 800a50a:	bf00      	nop
 800a50c:	20000a40 	.word	0x20000a40
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e00c      	b.n	800a53a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4a12      	ldr	r2, [pc, #72]	; (800a574 <prvInitialiseTaskLists+0x60>)
 800a52c:	4413      	add	r3, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe f946 	bl	80087c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3301      	adds	r3, #1
 800a538:	607b      	str	r3, [r7, #4]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b37      	cmp	r3, #55	; 0x37
 800a53e:	d9ef      	bls.n	800a520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a540:	480d      	ldr	r0, [pc, #52]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a542:	f7fe f93d 	bl	80087c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a546:	480d      	ldr	r0, [pc, #52]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a548:	f7fe f93a 	bl	80087c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a54c:	480c      	ldr	r0, [pc, #48]	; (800a580 <prvInitialiseTaskLists+0x6c>)
 800a54e:	f7fe f937 	bl	80087c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a552:	480c      	ldr	r0, [pc, #48]	; (800a584 <prvInitialiseTaskLists+0x70>)
 800a554:	f7fe f934 	bl	80087c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a558:	480b      	ldr	r0, [pc, #44]	; (800a588 <prvInitialiseTaskLists+0x74>)
 800a55a:	f7fe f931 	bl	80087c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <prvInitialiseTaskLists+0x78>)
 800a560:	4a05      	ldr	r2, [pc, #20]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvInitialiseTaskLists+0x7c>)
 800a566:	4a05      	ldr	r2, [pc, #20]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a568:	601a      	str	r2, [r3, #0]
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000a40 	.word	0x20000a40
 800a578:	20000ea0 	.word	0x20000ea0
 800a57c:	20000eb4 	.word	0x20000eb4
 800a580:	20000ed0 	.word	0x20000ed0
 800a584:	20000ee4 	.word	0x20000ee4
 800a588:	20000efc 	.word	0x20000efc
 800a58c:	20000ec8 	.word	0x20000ec8
 800a590:	20000ecc 	.word	0x20000ecc

0800a594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a59a:	e019      	b.n	800a5d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a59c:	f000 fef2 	bl	800b384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <prvCheckTasksWaitingTermination+0x50>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe f991 	bl	80088d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5c6:	f000 ff0d 	bl	800b3e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f810 	bl	800a5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e1      	bne.n	800a59c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000ee4 	.word	0x20000ee4
 800a5e8:	20000f10 	.word	0x20000f10
 800a5ec:	20000ef8 	.word	0x20000ef8

0800a5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3354      	adds	r3, #84	; 0x54
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fc69 	bl	800bed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d108      	bne.n	800a61e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	4618      	mov	r0, r3
 800a612:	f001 f8a5 	bl	800b760 <vPortFree>
				vPortFree( pxTCB );
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 f8a2 	bl	800b760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a61c:	e018      	b.n	800a650 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a624:	2b01      	cmp	r3, #1
 800a626:	d103      	bne.n	800a630 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f899 	bl	800b760 <vPortFree>
	}
 800a62e:	e00f      	b.n	800a650 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a636:	2b02      	cmp	r3, #2
 800a638:	d00a      	beq.n	800a650 <prvDeleteTCB+0x60>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <prvDeleteTCB+0x5e>
	}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295
 800a66e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a670:	e008      	b.n	800a684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a04      	ldr	r2, [pc, #16]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a682:	6013      	str	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20000ec8 	.word	0x20000ec8
 800a694:	20000f30 	.word	0x20000f30

0800a698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <xTaskGetSchedulerState+0x34>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	e008      	b.n	800a6be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ac:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <xTaskGetSchedulerState+0x38>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e001      	b.n	800a6be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6be:	687b      	ldr	r3, [r7, #4]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20000f1c 	.word	0x20000f1c
 800a6d0:	20000f38 	.word	0x20000f38

0800a6d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d051      	beq.n	800a78e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ee:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <xTaskPriorityInherit+0xc4>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d241      	bcs.n	800a77c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	db06      	blt.n	800a70e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a700:	4b25      	ldr	r3, [pc, #148]	; (800a798 <xTaskPriorityInherit+0xc4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6959      	ldr	r1, [r3, #20]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4a1f      	ldr	r2, [pc, #124]	; (800a79c <xTaskPriorityInherit+0xc8>)
 800a720:	4413      	add	r3, r2
 800a722:	4299      	cmp	r1, r3
 800a724:	d122      	bne.n	800a76c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3304      	adds	r3, #4
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe f8d2 	bl	80088d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a730:	4b19      	ldr	r3, [pc, #100]	; (800a798 <xTaskPriorityInherit+0xc4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	4b18      	ldr	r3, [pc, #96]	; (800a7a0 <xTaskPriorityInherit+0xcc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d903      	bls.n	800a74e <xTaskPriorityInherit+0x7a>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <xTaskPriorityInherit+0xcc>)
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4a10      	ldr	r2, [pc, #64]	; (800a79c <xTaskPriorityInherit+0xc8>)
 800a75c:	441a      	add	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	3304      	adds	r3, #4
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fe f858 	bl	800881a <vListInsertEnd>
 800a76a:	e004      	b.n	800a776 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <xTaskPriorityInherit+0xc4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a776:	2301      	movs	r3, #1
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e008      	b.n	800a78e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a780:	4b05      	ldr	r3, [pc, #20]	; (800a798 <xTaskPriorityInherit+0xc4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	429a      	cmp	r2, r3
 800a788:	d201      	bcs.n	800a78e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a78e:	68fb      	ldr	r3, [r7, #12]
	}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000a3c 	.word	0x20000a3c
 800a79c:	20000a40 	.word	0x20000a40
 800a7a0:	20000f18 	.word	0x20000f18

0800a7a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d056      	beq.n	800a868 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7ba:	4b2e      	ldr	r3, [pc, #184]	; (800a874 <xTaskPriorityDisinherit+0xd0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d00a      	beq.n	800a7da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	60fb      	str	r3, [r7, #12]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60bb      	str	r3, [r7, #8]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fc:	1e5a      	subs	r2, r3, #1
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d02c      	beq.n	800a868 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a812:	2b00      	cmp	r3, #0
 800a814:	d128      	bne.n	800a868 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	3304      	adds	r3, #4
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe f85a 	bl	80088d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <xTaskPriorityDisinherit+0xd4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d903      	bls.n	800a848 <xTaskPriorityDisinherit+0xa4>
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a844:	4a0c      	ldr	r2, [pc, #48]	; (800a878 <xTaskPriorityDisinherit+0xd4>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4a09      	ldr	r2, [pc, #36]	; (800a87c <xTaskPriorityDisinherit+0xd8>)
 800a856:	441a      	add	r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f7fd ffdb 	bl	800881a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a868:	697b      	ldr	r3, [r7, #20]
	}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000a3c 	.word	0x20000a3c
 800a878:	20000f18 	.word	0x20000f18
 800a87c:	20000a40 	.word	0x20000a40

0800a880 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a88e:	2301      	movs	r3, #1
 800a890:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d06a      	beq.n	800a96e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d902      	bls.n	800a8c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	e002      	b.n	800a8cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	69fa      	ldr	r2, [r7, #28]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d04b      	beq.n	800a96e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d146      	bne.n	800a96e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d10a      	bne.n	800a900 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	60bb      	str	r3, [r7, #8]
}
 800a8fc:	bf00      	nop
 800a8fe:	e7fe      	b.n	800a8fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	db04      	blt.n	800a91e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	6959      	ldr	r1, [r3, #20]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4a13      	ldr	r2, [pc, #76]	; (800a97c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a92e:	4413      	add	r3, r2
 800a930:	4299      	cmp	r1, r3
 800a932:	d11c      	bne.n	800a96e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	3304      	adds	r3, #4
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fd ffcb 	bl	80088d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a942:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d903      	bls.n	800a952 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94e:	4a0c      	ldr	r2, [pc, #48]	; (800a980 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4a07      	ldr	r2, [pc, #28]	; (800a97c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a960:	441a      	add	r2, r3
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	3304      	adds	r3, #4
 800a966:	4619      	mov	r1, r3
 800a968:	4610      	mov	r0, r2
 800a96a:	f7fd ff56 	bl	800881a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a96e:	bf00      	nop
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000a3c 	.word	0x20000a3c
 800a97c:	20000a40 	.word	0x20000a40
 800a980:	20000f18 	.word	0x20000f18

0800a984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a996:	3201      	adds	r2, #1
 800a998:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a99a:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a99c:	681b      	ldr	r3, [r3, #0]
	}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20000a3c 	.word	0x20000a3c

0800a9ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9b6:	4b21      	ldr	r3, [pc, #132]	; (800aa3c <prvAddCurrentTaskToDelayedList+0x90>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9bc:	4b20      	ldr	r3, [pc, #128]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd ff86 	bl	80088d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ce:	d10a      	bne.n	800a9e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4819      	ldr	r0, [pc, #100]	; (800aa44 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9e0:	f7fd ff1b 	bl	800881a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9e4:	e026      	b.n	800aa34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9ee:	4b14      	ldr	r3, [pc, #80]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d209      	bcs.n	800aa12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9fe:	4b12      	ldr	r3, [pc, #72]	; (800aa48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3304      	adds	r3, #4
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f7fd ff29 	bl	8008862 <vListInsert>
}
 800aa10:	e010      	b.n	800aa34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa12:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fd ff1f 	bl	8008862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d202      	bcs.n	800aa34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa2e:	4a08      	ldr	r2, [pc, #32]	; (800aa50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	6013      	str	r3, [r2, #0]
}
 800aa34:	bf00      	nop
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000f14 	.word	0x20000f14
 800aa40:	20000a3c 	.word	0x20000a3c
 800aa44:	20000efc 	.word	0x20000efc
 800aa48:	20000ecc 	.word	0x20000ecc
 800aa4c:	20000ec8 	.word	0x20000ec8
 800aa50:	20000f30 	.word	0x20000f30

0800aa54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	; 0x28
 800aa58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa5e:	f000 fb07 	bl	800b070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa62:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <xTimerCreateTimerTask+0x80>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d021      	beq.n	800aaae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa72:	1d3a      	adds	r2, r7, #4
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	f107 030c 	add.w	r3, r7, #12
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fd fd09 	bl	8008494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	9202      	str	r2, [sp, #8]
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	2300      	movs	r3, #0
 800aa92:	460a      	mov	r2, r1
 800aa94:	4910      	ldr	r1, [pc, #64]	; (800aad8 <xTimerCreateTimerTask+0x84>)
 800aa96:	4811      	ldr	r0, [pc, #68]	; (800aadc <xTimerCreateTimerTask+0x88>)
 800aa98:	f7fe ff54 	bl	8009944 <xTaskCreateStatic>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	4a10      	ldr	r2, [pc, #64]	; (800aae0 <xTimerCreateTimerTask+0x8c>)
 800aaa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <xTimerCreateTimerTask+0x8c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	613b      	str	r3, [r7, #16]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaca:	697b      	ldr	r3, [r7, #20]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000f6c 	.word	0x20000f6c
 800aad8:	0800ce68 	.word	0x0800ce68
 800aadc:	0800ac19 	.word	0x0800ac19
 800aae0:	20000f70 	.word	0x20000f70

0800aae4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	623b      	str	r3, [r7, #32]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab12:	4b1a      	ldr	r3, [pc, #104]	; (800ab7c <xTimerGenericCommand+0x98>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d02a      	beq.n	800ab70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b05      	cmp	r3, #5
 800ab2a:	dc18      	bgt.n	800ab5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab2c:	f7ff fdb4 	bl	800a698 <xTaskGetSchedulerState>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d109      	bne.n	800ab4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <xTimerGenericCommand+0x98>)
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	f107 0110 	add.w	r1, r7, #16
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab42:	f7fe f899 	bl	8008c78 <xQueueGenericSend>
 800ab46:	6278      	str	r0, [r7, #36]	; 0x24
 800ab48:	e012      	b.n	800ab70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab4a:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <xTimerGenericCommand+0x98>)
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f107 0110 	add.w	r1, r7, #16
 800ab52:	2300      	movs	r3, #0
 800ab54:	2200      	movs	r2, #0
 800ab56:	f7fe f88f 	bl	8008c78 <xQueueGenericSend>
 800ab5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab5c:	e008      	b.n	800ab70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <xTimerGenericCommand+0x98>)
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	f107 0110 	add.w	r1, r7, #16
 800ab66:	2300      	movs	r3, #0
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	f7fe f983 	bl	8008e74 <xQueueGenericSendFromISR>
 800ab6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000f6c 	.word	0x20000f6c

0800ab80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab8a:	4b22      	ldr	r3, [pc, #136]	; (800ac14 <prvProcessExpiredTimer+0x94>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fd fe9b 	bl	80088d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d022      	beq.n	800abf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	699a      	ldr	r2, [r3, #24]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	18d1      	adds	r1, r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	6978      	ldr	r0, [r7, #20]
 800abba:	f000 f8d1 	bl	800ad60 <prvInsertTimerInActiveList>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d01f      	beq.n	800ac04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abc4:	2300      	movs	r3, #0
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	2300      	movs	r3, #0
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	2100      	movs	r1, #0
 800abce:	6978      	ldr	r0, [r7, #20]
 800abd0:	f7ff ff88 	bl	800aae4 <xTimerGenericCommand>
 800abd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d113      	bne.n	800ac04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	60fb      	str	r3, [r7, #12]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf8:	f023 0301 	bic.w	r3, r3, #1
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	6978      	ldr	r0, [r7, #20]
 800ac0a:	4798      	blx	r3
}
 800ac0c:	bf00      	nop
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000f64 	.word	0x20000f64

0800ac18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f857 	bl	800acd8 <prvGetNextExpireTime>
 800ac2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f803 	bl	800ac3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac36:	f000 f8d5 	bl	800ade4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac3a:	e7f1      	b.n	800ac20 <prvTimerTask+0x8>

0800ac3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac46:	f7ff f8d9 	bl	8009dfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 f866 	bl	800ad20 <prvSampleTimeNow>
 800ac54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d130      	bne.n	800acbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <prvProcessTimerOrBlockTask+0x3c>
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d806      	bhi.n	800ac78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac6a:	f7ff f8d5 	bl	8009e18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff ff85 	bl	800ab80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac76:	e024      	b.n	800acc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d008      	beq.n	800ac90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <prvProcessTimerOrBlockTask+0x90>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <prvProcessTimerOrBlockTask+0x50>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e000      	b.n	800ac8e <prvProcessTimerOrBlockTask+0x52>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac90:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <prvProcessTimerOrBlockTask+0x94>)
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f7fe fe1d 	bl	80098dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aca2:	f7ff f8b9 	bl	8009e18 <xTaskResumeAll>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acac:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <prvProcessTimerOrBlockTask+0x98>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	f3bf 8f6f 	isb	sy
}
 800acbc:	e001      	b.n	800acc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acbe:	f7ff f8ab 	bl	8009e18 <xTaskResumeAll>
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20000f68 	.word	0x20000f68
 800acd0:	20000f6c 	.word	0x20000f6c
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <prvGetNextExpireTime+0x44>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <prvGetNextExpireTime+0x16>
 800acea:	2201      	movs	r2, #1
 800acec:	e000      	b.n	800acf0 <prvGetNextExpireTime+0x18>
 800acee:	2200      	movs	r2, #0
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d105      	bne.n	800ad08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acfc:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <prvGetNextExpireTime+0x44>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	e001      	b.n	800ad0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20000f64 	.word	0x20000f64

0800ad20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad28:	f7ff f914 	bl	8009f54 <xTaskGetTickCount>
 800ad2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <prvSampleTimeNow+0x3c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d205      	bcs.n	800ad44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad38:	f000 f936 	bl	800afa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad4a:	4a04      	ldr	r2, [pc, #16]	; (800ad5c <prvSampleTimeNow+0x3c>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000f74 	.word	0x20000f74

0800ad60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d812      	bhi.n	800adac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	1ad2      	subs	r2, r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d302      	bcc.n	800ad9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	e01b      	b.n	800add2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad9a:	4b10      	ldr	r3, [pc, #64]	; (800addc <prvInsertTimerInActiveList+0x7c>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3304      	adds	r3, #4
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7fd fd5c 	bl	8008862 <vListInsert>
 800adaa:	e012      	b.n	800add2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d206      	bcs.n	800adc2 <prvInsertTimerInActiveList+0x62>
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d302      	bcc.n	800adc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	e007      	b.n	800add2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <prvInsertTimerInActiveList+0x80>)
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f7fd fd48 	bl	8008862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800add2:	697b      	ldr	r3, [r7, #20]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20000f68 	.word	0x20000f68
 800ade0:	20000f64 	.word	0x20000f64

0800ade4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08e      	sub	sp, #56	; 0x38
 800ade8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adea:	e0ca      	b.n	800af82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	da18      	bge.n	800ae24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adf2:	1d3b      	adds	r3, r7, #4
 800adf4:	3304      	adds	r3, #4
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	61fb      	str	r3, [r7, #28]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae1a:	6850      	ldr	r0, [r2, #4]
 800ae1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae1e:	6892      	ldr	r2, [r2, #8]
 800ae20:	4611      	mov	r1, r2
 800ae22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f2c0 80ab 	blt.w	800af82 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fd fd49 	bl	80088d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae42:	463b      	mov	r3, r7
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ff6b 	bl	800ad20 <prvSampleTimeNow>
 800ae4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	f200 8096 	bhi.w	800af80 <prvProcessReceivedCommands+0x19c>
 800ae54:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <prvProcessReceivedCommands+0x78>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800ae85 	.word	0x0800ae85
 800ae60:	0800ae85 	.word	0x0800ae85
 800ae64:	0800ae85 	.word	0x0800ae85
 800ae68:	0800aef9 	.word	0x0800aef9
 800ae6c:	0800af0d 	.word	0x0800af0d
 800ae70:	0800af57 	.word	0x0800af57
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae85 	.word	0x0800ae85
 800ae7c:	0800aef9 	.word	0x0800aef9
 800ae80:	0800af0d 	.word	0x0800af0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae8a:	f043 0301 	orr.w	r3, r3, #1
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	18d1      	adds	r1, r2, r3
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea4:	f7ff ff5c 	bl	800ad60 <prvInsertTimerInActiveList>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d069      	beq.n	800af82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aebc:	f003 0304 	and.w	r3, r3, #4
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d05e      	beq.n	800af82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	441a      	add	r2, r3
 800aecc:	2300      	movs	r3, #0
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	2300      	movs	r3, #0
 800aed2:	2100      	movs	r1, #0
 800aed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aed6:	f7ff fe05 	bl	800aae4 <xTimerGenericCommand>
 800aeda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d14f      	bne.n	800af82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	61bb      	str	r3, [r7, #24]
}
 800aef4:	bf00      	nop
 800aef6:	e7fe      	b.n	800aef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aefe:	f023 0301 	bic.w	r3, r3, #1
 800af02:	b2da      	uxtb	r2, r3
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af0a:	e03a      	b.n	800af82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	b2da      	uxtb	r2, r3
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	617b      	str	r3, [r7, #20]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	18d1      	adds	r1, r2, r3
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af50:	f7ff ff06 	bl	800ad60 <prvInsertTimerInActiveList>
					break;
 800af54:	e015      	b.n	800af82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af66:	f000 fbfb 	bl	800b760 <vPortFree>
 800af6a:	e00a      	b.n	800af82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af72:	f023 0301 	bic.w	r3, r3, #1
 800af76:	b2da      	uxtb	r2, r3
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af7e:	e000      	b.n	800af82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800af80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <prvProcessReceivedCommands+0x1c0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	1d39      	adds	r1, r7, #4
 800af88:	2200      	movs	r2, #0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe f89a 	bl	80090c4 <xQueueReceive>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	f47f af2a 	bne.w	800adec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	3730      	adds	r7, #48	; 0x30
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	20000f6c 	.word	0x20000f6c

0800afa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afae:	e048      	b.n	800b042 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afb0:	4b2d      	ldr	r3, [pc, #180]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afba:	4b2b      	ldr	r3, [pc, #172]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fd fc83 	bl	80088d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d02e      	beq.n	800b042 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4413      	add	r3, r2
 800afec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d90e      	bls.n	800b014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b002:	4b19      	ldr	r3, [pc, #100]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3304      	adds	r3, #4
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7fd fc28 	bl	8008862 <vListInsert>
 800b012:	e016      	b.n	800b042 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b014:	2300      	movs	r3, #0
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	2300      	movs	r3, #0
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	2100      	movs	r1, #0
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7ff fd60 	bl	800aae4 <xTimerGenericCommand>
 800b024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	603b      	str	r3, [r7, #0]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1b1      	bne.n	800afb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <prvSwitchTimerLists+0xc4>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a04      	ldr	r2, [pc, #16]	; (800b068 <prvSwitchTimerLists+0xc0>)
 800b058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b05a:	4a04      	ldr	r2, [pc, #16]	; (800b06c <prvSwitchTimerLists+0xc4>)
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	6013      	str	r3, [r2, #0]
}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000f64 	.word	0x20000f64
 800b06c:	20000f68 	.word	0x20000f68

0800b070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b076:	f000 f985 	bl	800b384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <prvCheckForValidListAndQueue+0x60>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d120      	bne.n	800b0c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b082:	4814      	ldr	r0, [pc, #80]	; (800b0d4 <prvCheckForValidListAndQueue+0x64>)
 800b084:	f7fd fb9c 	bl	80087c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b088:	4813      	ldr	r0, [pc, #76]	; (800b0d8 <prvCheckForValidListAndQueue+0x68>)
 800b08a:	f7fd fb99 	bl	80087c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b08e:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <prvCheckForValidListAndQueue+0x6c>)
 800b090:	4a10      	ldr	r2, [pc, #64]	; (800b0d4 <prvCheckForValidListAndQueue+0x64>)
 800b092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b094:	4b12      	ldr	r3, [pc, #72]	; (800b0e0 <prvCheckForValidListAndQueue+0x70>)
 800b096:	4a10      	ldr	r2, [pc, #64]	; (800b0d8 <prvCheckForValidListAndQueue+0x68>)
 800b098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b09a:	2300      	movs	r3, #0
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	4b11      	ldr	r3, [pc, #68]	; (800b0e4 <prvCheckForValidListAndQueue+0x74>)
 800b0a0:	4a11      	ldr	r2, [pc, #68]	; (800b0e8 <prvCheckForValidListAndQueue+0x78>)
 800b0a2:	2110      	movs	r1, #16
 800b0a4:	200a      	movs	r0, #10
 800b0a6:	f7fd fca7 	bl	80089f8 <xQueueGenericCreateStatic>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	4a08      	ldr	r2, [pc, #32]	; (800b0d0 <prvCheckForValidListAndQueue+0x60>)
 800b0ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0b0:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <prvCheckForValidListAndQueue+0x60>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <prvCheckForValidListAndQueue+0x60>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	490b      	ldr	r1, [pc, #44]	; (800b0ec <prvCheckForValidListAndQueue+0x7c>)
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fbb8 	bl	8009834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0c4:	f000 f98e 	bl	800b3e4 <vPortExitCritical>
}
 800b0c8:	bf00      	nop
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000f6c 	.word	0x20000f6c
 800b0d4:	20000f3c 	.word	0x20000f3c
 800b0d8:	20000f50 	.word	0x20000f50
 800b0dc:	20000f64 	.word	0x20000f64
 800b0e0:	20000f68 	.word	0x20000f68
 800b0e4:	20001018 	.word	0x20001018
 800b0e8:	20000f78 	.word	0x20000f78
 800b0ec:	0800ce70 	.word	0x0800ce70

0800b0f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08a      	sub	sp, #40	; 0x28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b0fe:	f06f 0301 	mvn.w	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <xTimerPendFunctionCallFromISR+0x3c>)
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	f107 0114 	add.w	r1, r7, #20
 800b118:	2300      	movs	r3, #0
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	f7fd feaa 	bl	8008e74 <xQueueGenericSendFromISR>
 800b120:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b124:	4618      	mov	r0, r3
 800b126:	3728      	adds	r7, #40	; 0x28
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000f6c 	.word	0x20000f6c

0800b130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3b04      	subs	r3, #4
 800b140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3b04      	subs	r3, #4
 800b14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	f023 0201 	bic.w	r2, r3, #1
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3b04      	subs	r3, #4
 800b15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b160:	4a0c      	ldr	r2, [pc, #48]	; (800b194 <pxPortInitialiseStack+0x64>)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3b14      	subs	r3, #20
 800b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3b04      	subs	r3, #4
 800b176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f06f 0202 	mvn.w	r2, #2
 800b17e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	3b20      	subs	r3, #32
 800b184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	0800b199 	.word	0x0800b199

0800b198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1a2:	4b12      	ldr	r3, [pc, #72]	; (800b1ec <prvTaskExitError+0x54>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1aa:	d00a      	beq.n	800b1c2 <prvTaskExitError+0x2a>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	60fb      	str	r3, [r7, #12]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <prvTaskExitError+0x28>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60bb      	str	r3, [r7, #8]
}
 800b1d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1d6:	bf00      	nop
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0fc      	beq.n	800b1d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	2000000c 	.word	0x2000000c

0800b1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <pxCurrentTCBConst2>)
 800b1f2:	6819      	ldr	r1, [r3, #0]
 800b1f4:	6808      	ldr	r0, [r1, #0]
 800b1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	f380 8809 	msr	PSP, r0
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f380 8811 	msr	BASEPRI, r0
 800b20a:	4770      	bx	lr
 800b20c:	f3af 8000 	nop.w

0800b210 <pxCurrentTCBConst2>:
 800b210:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop

0800b218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b218:	4808      	ldr	r0, [pc, #32]	; (800b23c <prvPortStartFirstTask+0x24>)
 800b21a:	6800      	ldr	r0, [r0, #0]
 800b21c:	6800      	ldr	r0, [r0, #0]
 800b21e:	f380 8808 	msr	MSP, r0
 800b222:	f04f 0000 	mov.w	r0, #0
 800b226:	f380 8814 	msr	CONTROL, r0
 800b22a:	b662      	cpsie	i
 800b22c:	b661      	cpsie	f
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	df00      	svc	0
 800b238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b23a:	bf00      	nop
 800b23c:	e000ed08 	.word	0xe000ed08

0800b240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b246:	4b46      	ldr	r3, [pc, #280]	; (800b360 <xPortStartScheduler+0x120>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a46      	ldr	r2, [pc, #280]	; (800b364 <xPortStartScheduler+0x124>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10a      	bne.n	800b266 <xPortStartScheduler+0x26>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	613b      	str	r3, [r7, #16]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b266:	4b3e      	ldr	r3, [pc, #248]	; (800b360 <xPortStartScheduler+0x120>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a3f      	ldr	r2, [pc, #252]	; (800b368 <xPortStartScheduler+0x128>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d10a      	bne.n	800b286 <xPortStartScheduler+0x46>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	60fb      	str	r3, [r7, #12]
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b286:	4b39      	ldr	r3, [pc, #228]	; (800b36c <xPortStartScheduler+0x12c>)
 800b288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	22ff      	movs	r2, #255	; 0xff
 800b296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <xPortStartScheduler+0x130>)
 800b2ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2ae:	4b31      	ldr	r3, [pc, #196]	; (800b374 <xPortStartScheduler+0x134>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2b4:	e009      	b.n	800b2ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b2b6:	4b2f      	ldr	r3, [pc, #188]	; (800b374 <xPortStartScheduler+0x134>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	4a2d      	ldr	r2, [pc, #180]	; (800b374 <xPortStartScheduler+0x134>)
 800b2be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d2:	2b80      	cmp	r3, #128	; 0x80
 800b2d4:	d0ef      	beq.n	800b2b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2d6:	4b27      	ldr	r3, [pc, #156]	; (800b374 <xPortStartScheduler+0x134>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f1c3 0307 	rsb	r3, r3, #7
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d00a      	beq.n	800b2f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60bb      	str	r3, [r7, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	e7fe      	b.n	800b2f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2f8:	4b1e      	ldr	r3, [pc, #120]	; (800b374 <xPortStartScheduler+0x134>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	021b      	lsls	r3, r3, #8
 800b2fe:	4a1d      	ldr	r2, [pc, #116]	; (800b374 <xPortStartScheduler+0x134>)
 800b300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <xPortStartScheduler+0x134>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b30a:	4a1a      	ldr	r2, [pc, #104]	; (800b374 <xPortStartScheduler+0x134>)
 800b30c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	b2da      	uxtb	r2, r3
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b316:	4b18      	ldr	r3, [pc, #96]	; (800b378 <xPortStartScheduler+0x138>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a17      	ldr	r2, [pc, #92]	; (800b378 <xPortStartScheduler+0x138>)
 800b31c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b322:	4b15      	ldr	r3, [pc, #84]	; (800b378 <xPortStartScheduler+0x138>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a14      	ldr	r2, [pc, #80]	; (800b378 <xPortStartScheduler+0x138>)
 800b328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b32c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b32e:	f000 f8dd 	bl	800b4ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b332:	4b12      	ldr	r3, [pc, #72]	; (800b37c <xPortStartScheduler+0x13c>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b338:	f000 f8fc 	bl	800b534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b33c:	4b10      	ldr	r3, [pc, #64]	; (800b380 <xPortStartScheduler+0x140>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a0f      	ldr	r2, [pc, #60]	; (800b380 <xPortStartScheduler+0x140>)
 800b342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b348:	f7ff ff66 	bl	800b218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b34c:	f7fe fecc 	bl	800a0e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b350:	f7ff ff22 	bl	800b198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	e000ed00 	.word	0xe000ed00
 800b364:	410fc271 	.word	0x410fc271
 800b368:	410fc270 	.word	0x410fc270
 800b36c:	e000e400 	.word	0xe000e400
 800b370:	20001068 	.word	0x20001068
 800b374:	2000106c 	.word	0x2000106c
 800b378:	e000ed20 	.word	0xe000ed20
 800b37c:	2000000c 	.word	0x2000000c
 800b380:	e000ef34 	.word	0xe000ef34

0800b384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	607b      	str	r3, [r7, #4]
}
 800b39c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b39e:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <vPortEnterCritical+0x58>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	4a0d      	ldr	r2, [pc, #52]	; (800b3dc <vPortEnterCritical+0x58>)
 800b3a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <vPortEnterCritical+0x58>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d10f      	bne.n	800b3d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <vPortEnterCritical+0x5c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00a      	beq.n	800b3d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	603b      	str	r3, [r7, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <vPortEnterCritical+0x4a>
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	2000000c 	.word	0x2000000c
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3ea:	4b12      	ldr	r3, [pc, #72]	; (800b434 <vPortExitCritical+0x50>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10a      	bne.n	800b408 <vPortExitCritical+0x24>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	607b      	str	r3, [r7, #4]
}
 800b404:	bf00      	nop
 800b406:	e7fe      	b.n	800b406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <vPortExitCritical+0x50>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	4a09      	ldr	r2, [pc, #36]	; (800b434 <vPortExitCritical+0x50>)
 800b410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b412:	4b08      	ldr	r3, [pc, #32]	; (800b434 <vPortExitCritical+0x50>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <vPortExitCritical+0x42>
 800b41a:	2300      	movs	r3, #0
 800b41c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	f383 8811 	msr	BASEPRI, r3
}
 800b424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	2000000c 	.word	0x2000000c
	...

0800b440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b440:	f3ef 8009 	mrs	r0, PSP
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <pxCurrentTCBConst>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	f01e 0f10 	tst.w	lr, #16
 800b450:	bf08      	it	eq
 800b452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	6010      	str	r0, [r2, #0]
 800b45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b460:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b464:	f380 8811 	msr	BASEPRI, r0
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f7fe fe3a 	bl	800a0e8 <vTaskSwitchContext>
 800b474:	f04f 0000 	mov.w	r0, #0
 800b478:	f380 8811 	msr	BASEPRI, r0
 800b47c:	bc09      	pop	{r0, r3}
 800b47e:	6819      	ldr	r1, [r3, #0]
 800b480:	6808      	ldr	r0, [r1, #0]
 800b482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b486:	f01e 0f10 	tst.w	lr, #16
 800b48a:	bf08      	it	eq
 800b48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b490:	f380 8809 	msr	PSP, r0
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst>:
 800b4a0:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	607b      	str	r3, [r7, #4]
}
 800b4c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4c2:	f7fe fd57 	bl	8009f74 <xTaskIncrementTick>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <xPortSysTickHandler+0x40>)
 800b4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	f383 8811 	msr	BASEPRI, r3
}
 800b4de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <vPortSetupTimerInterrupt+0x34>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <vPortSetupTimerInterrupt+0x38>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <vPortSetupTimerInterrupt+0x3c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a0a      	ldr	r2, [pc, #40]	; (800b52c <vPortSetupTimerInterrupt+0x40>)
 800b502:	fba2 2303 	umull	r2, r3, r2, r3
 800b506:	099b      	lsrs	r3, r3, #6
 800b508:	4a09      	ldr	r2, [pc, #36]	; (800b530 <vPortSetupTimerInterrupt+0x44>)
 800b50a:	3b01      	subs	r3, #1
 800b50c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b50e:	4b04      	ldr	r3, [pc, #16]	; (800b520 <vPortSetupTimerInterrupt+0x34>)
 800b510:	2207      	movs	r2, #7
 800b512:	601a      	str	r2, [r3, #0]
}
 800b514:	bf00      	nop
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	e000e010 	.word	0xe000e010
 800b524:	e000e018 	.word	0xe000e018
 800b528:	20000000 	.word	0x20000000
 800b52c:	10624dd3 	.word	0x10624dd3
 800b530:	e000e014 	.word	0xe000e014

0800b534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b544 <vPortEnableVFP+0x10>
 800b538:	6801      	ldr	r1, [r0, #0]
 800b53a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b53e:	6001      	str	r1, [r0, #0]
 800b540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b542:	bf00      	nop
 800b544:	e000ed88 	.word	0xe000ed88

0800b548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b54e:	f3ef 8305 	mrs	r3, IPSR
 800b552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b0f      	cmp	r3, #15
 800b558:	d914      	bls.n	800b584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b55a:	4a17      	ldr	r2, [pc, #92]	; (800b5b8 <vPortValidateInterruptPriority+0x70>)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	4413      	add	r3, r2
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b564:	4b15      	ldr	r3, [pc, #84]	; (800b5bc <vPortValidateInterruptPriority+0x74>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	7afa      	ldrb	r2, [r7, #11]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d20a      	bcs.n	800b584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	607b      	str	r3, [r7, #4]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b584:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <vPortValidateInterruptPriority+0x78>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b58c:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <vPortValidateInterruptPriority+0x7c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d90a      	bls.n	800b5aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	603b      	str	r3, [r7, #0]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <vPortValidateInterruptPriority+0x60>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	e000e3f0 	.word	0xe000e3f0
 800b5bc:	20001068 	.word	0x20001068
 800b5c0:	e000ed0c 	.word	0xe000ed0c
 800b5c4:	2000106c 	.word	0x2000106c

0800b5c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5d4:	f7fe fc12 	bl	8009dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5d8:	4b5b      	ldr	r3, [pc, #364]	; (800b748 <pvPortMalloc+0x180>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5e0:	f000 f920 	bl	800b824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5e4:	4b59      	ldr	r3, [pc, #356]	; (800b74c <pvPortMalloc+0x184>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f040 8093 	bne.w	800b718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01d      	beq.n	800b634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5f8:	2208      	movs	r2, #8
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	2b00      	cmp	r3, #0
 800b608:	d014      	beq.n	800b634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f023 0307 	bic.w	r3, r3, #7
 800b610:	3308      	adds	r3, #8
 800b612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <pvPortMalloc+0x6c>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	617b      	str	r3, [r7, #20]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d06e      	beq.n	800b718 <pvPortMalloc+0x150>
 800b63a:	4b45      	ldr	r3, [pc, #276]	; (800b750 <pvPortMalloc+0x188>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d869      	bhi.n	800b718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b644:	4b43      	ldr	r3, [pc, #268]	; (800b754 <pvPortMalloc+0x18c>)
 800b646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b648:	4b42      	ldr	r3, [pc, #264]	; (800b754 <pvPortMalloc+0x18c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b64e:	e004      	b.n	800b65a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	429a      	cmp	r2, r3
 800b662:	d903      	bls.n	800b66c <pvPortMalloc+0xa4>
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1f1      	bne.n	800b650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b66c:	4b36      	ldr	r3, [pc, #216]	; (800b748 <pvPortMalloc+0x180>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b672:	429a      	cmp	r2, r3
 800b674:	d050      	beq.n	800b718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2208      	movs	r2, #8
 800b67c:	4413      	add	r3, r2
 800b67e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	1ad2      	subs	r2, r2, r3
 800b690:	2308      	movs	r3, #8
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	429a      	cmp	r2, r3
 800b696:	d91f      	bls.n	800b6d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	613b      	str	r3, [r7, #16]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	1ad2      	subs	r2, r2, r3
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6d2:	69b8      	ldr	r0, [r7, #24]
 800b6d4:	f000 f908 	bl	800b8e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6d8:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <pvPortMalloc+0x188>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	4a1b      	ldr	r2, [pc, #108]	; (800b750 <pvPortMalloc+0x188>)
 800b6e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6e6:	4b1a      	ldr	r3, [pc, #104]	; (800b750 <pvPortMalloc+0x188>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	4b1b      	ldr	r3, [pc, #108]	; (800b758 <pvPortMalloc+0x190>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d203      	bcs.n	800b6fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6f2:	4b17      	ldr	r3, [pc, #92]	; (800b750 <pvPortMalloc+0x188>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a18      	ldr	r2, [pc, #96]	; (800b758 <pvPortMalloc+0x190>)
 800b6f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <pvPortMalloc+0x184>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	431a      	orrs	r2, r3
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <pvPortMalloc+0x194>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3301      	adds	r3, #1
 800b714:	4a11      	ldr	r2, [pc, #68]	; (800b75c <pvPortMalloc+0x194>)
 800b716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b718:	f7fe fb7e 	bl	8009e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	f003 0307 	and.w	r3, r3, #7
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <pvPortMalloc+0x174>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	60fb      	str	r3, [r7, #12]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <pvPortMalloc+0x172>
	return pvReturn;
 800b73c:	69fb      	ldr	r3, [r7, #28]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3728      	adds	r7, #40	; 0x28
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20004c78 	.word	0x20004c78
 800b74c:	20004c8c 	.word	0x20004c8c
 800b750:	20004c7c 	.word	0x20004c7c
 800b754:	20004c70 	.word	0x20004c70
 800b758:	20004c80 	.word	0x20004c80
 800b75c:	20004c84 	.word	0x20004c84

0800b760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d04d      	beq.n	800b80e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b772:	2308      	movs	r3, #8
 800b774:	425b      	negs	r3, r3
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	4413      	add	r3, r2
 800b77a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	4b24      	ldr	r3, [pc, #144]	; (800b818 <vPortFree+0xb8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4013      	ands	r3, r2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10a      	bne.n	800b7a4 <vPortFree+0x44>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	60fb      	str	r3, [r7, #12]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <vPortFree+0x62>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60bb      	str	r3, [r7, #8]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	4b14      	ldr	r3, [pc, #80]	; (800b818 <vPortFree+0xb8>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d01e      	beq.n	800b80e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11a      	bne.n	800b80e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	; (800b818 <vPortFree+0xb8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	43db      	mvns	r3, r3
 800b7e2:	401a      	ands	r2, r3
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7e8:	f7fe fb08 	bl	8009dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <vPortFree+0xbc>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	4a09      	ldr	r2, [pc, #36]	; (800b81c <vPortFree+0xbc>)
 800b7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7fa:	6938      	ldr	r0, [r7, #16]
 800b7fc:	f000 f874 	bl	800b8e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b800:	4b07      	ldr	r3, [pc, #28]	; (800b820 <vPortFree+0xc0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3301      	adds	r3, #1
 800b806:	4a06      	ldr	r2, [pc, #24]	; (800b820 <vPortFree+0xc0>)
 800b808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b80a:	f7fe fb05 	bl	8009e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b80e:	bf00      	nop
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20004c8c 	.word	0x20004c8c
 800b81c:	20004c7c 	.word	0x20004c7c
 800b820:	20004c88 	.word	0x20004c88

0800b824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b82a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b82e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b830:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <prvHeapInit+0xac>)
 800b832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f003 0307 	and.w	r3, r3, #7
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00c      	beq.n	800b858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3307      	adds	r3, #7
 800b842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f023 0307 	bic.w	r3, r3, #7
 800b84a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4a1f      	ldr	r2, [pc, #124]	; (800b8d0 <prvHeapInit+0xac>)
 800b854:	4413      	add	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b85c:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <prvHeapInit+0xb0>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b862:	4b1c      	ldr	r3, [pc, #112]	; (800b8d4 <prvHeapInit+0xb0>)
 800b864:	2200      	movs	r2, #0
 800b866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b870:	2208      	movs	r2, #8
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0307 	bic.w	r3, r3, #7
 800b87e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <prvHeapInit+0xb4>)
 800b884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <prvHeapInit+0xb4>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2200      	movs	r2, #0
 800b88c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <prvHeapInit+0xb4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	1ad2      	subs	r2, r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <prvHeapInit+0xb4>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <prvHeapInit+0xb8>)
 800b8b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <prvHeapInit+0xbc>)
 800b8ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8bc:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <prvHeapInit+0xc0>)
 800b8be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8c2:	601a      	str	r2, [r3, #0]
}
 800b8c4:	bf00      	nop
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20001070 	.word	0x20001070
 800b8d4:	20004c70 	.word	0x20004c70
 800b8d8:	20004c78 	.word	0x20004c78
 800b8dc:	20004c80 	.word	0x20004c80
 800b8e0:	20004c7c 	.word	0x20004c7c
 800b8e4:	20004c8c 	.word	0x20004c8c

0800b8e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8f0:	4b28      	ldr	r3, [pc, #160]	; (800b994 <prvInsertBlockIntoFreeList+0xac>)
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e002      	b.n	800b8fc <prvInsertBlockIntoFreeList+0x14>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	429a      	cmp	r2, r3
 800b904:	d8f7      	bhi.n	800b8f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	4413      	add	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d108      	bne.n	800b92a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	441a      	add	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	441a      	add	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d118      	bne.n	800b970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <prvInsertBlockIntoFreeList+0xb0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d00d      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	441a      	add	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e008      	b.n	800b978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b966:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <prvInsertBlockIntoFreeList+0xb0>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	e003      	b.n	800b978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d002      	beq.n	800b986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20004c70 	.word	0x20004c70
 800b998:	20004c78 	.word	0x20004c78

0800b99c <_strtoul_l.constprop.0>:
 800b99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	4f36      	ldr	r7, [pc, #216]	; (800ba7c <_strtoul_l.constprop.0+0xe0>)
 800b9a2:	4686      	mov	lr, r0
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9ac:	5d3e      	ldrb	r6, [r7, r4]
 800b9ae:	f016 0608 	ands.w	r6, r6, #8
 800b9b2:	d1f8      	bne.n	800b9a6 <_strtoul_l.constprop.0+0xa>
 800b9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800b9b6:	d130      	bne.n	800ba1a <_strtoul_l.constprop.0+0x7e>
 800b9b8:	782c      	ldrb	r4, [r5, #0]
 800b9ba:	2601      	movs	r6, #1
 800b9bc:	1c85      	adds	r5, r0, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d057      	beq.n	800ba72 <_strtoul_l.constprop.0+0xd6>
 800b9c2:	2b10      	cmp	r3, #16
 800b9c4:	d109      	bne.n	800b9da <_strtoul_l.constprop.0+0x3e>
 800b9c6:	2c30      	cmp	r4, #48	; 0x30
 800b9c8:	d107      	bne.n	800b9da <_strtoul_l.constprop.0+0x3e>
 800b9ca:	7828      	ldrb	r0, [r5, #0]
 800b9cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b9d0:	2858      	cmp	r0, #88	; 0x58
 800b9d2:	d149      	bne.n	800ba68 <_strtoul_l.constprop.0+0xcc>
 800b9d4:	786c      	ldrb	r4, [r5, #1]
 800b9d6:	2310      	movs	r3, #16
 800b9d8:	3502      	adds	r5, #2
 800b9da:	f04f 38ff 	mov.w	r8, #4294967295
 800b9de:	2700      	movs	r7, #0
 800b9e0:	fbb8 f8f3 	udiv	r8, r8, r3
 800b9e4:	fb03 f908 	mul.w	r9, r3, r8
 800b9e8:	ea6f 0909 	mvn.w	r9, r9
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9f2:	f1bc 0f09 	cmp.w	ip, #9
 800b9f6:	d815      	bhi.n	800ba24 <_strtoul_l.constprop.0+0x88>
 800b9f8:	4664      	mov	r4, ip
 800b9fa:	42a3      	cmp	r3, r4
 800b9fc:	dd23      	ble.n	800ba46 <_strtoul_l.constprop.0+0xaa>
 800b9fe:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ba02:	d007      	beq.n	800ba14 <_strtoul_l.constprop.0+0x78>
 800ba04:	4580      	cmp	r8, r0
 800ba06:	d31b      	bcc.n	800ba40 <_strtoul_l.constprop.0+0xa4>
 800ba08:	d101      	bne.n	800ba0e <_strtoul_l.constprop.0+0x72>
 800ba0a:	45a1      	cmp	r9, r4
 800ba0c:	db18      	blt.n	800ba40 <_strtoul_l.constprop.0+0xa4>
 800ba0e:	fb00 4003 	mla	r0, r0, r3, r4
 800ba12:	2701      	movs	r7, #1
 800ba14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba18:	e7e9      	b.n	800b9ee <_strtoul_l.constprop.0+0x52>
 800ba1a:	2c2b      	cmp	r4, #43	; 0x2b
 800ba1c:	bf04      	itt	eq
 800ba1e:	782c      	ldrbeq	r4, [r5, #0]
 800ba20:	1c85      	addeq	r5, r0, #2
 800ba22:	e7cc      	b.n	800b9be <_strtoul_l.constprop.0+0x22>
 800ba24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba28:	f1bc 0f19 	cmp.w	ip, #25
 800ba2c:	d801      	bhi.n	800ba32 <_strtoul_l.constprop.0+0x96>
 800ba2e:	3c37      	subs	r4, #55	; 0x37
 800ba30:	e7e3      	b.n	800b9fa <_strtoul_l.constprop.0+0x5e>
 800ba32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba36:	f1bc 0f19 	cmp.w	ip, #25
 800ba3a:	d804      	bhi.n	800ba46 <_strtoul_l.constprop.0+0xaa>
 800ba3c:	3c57      	subs	r4, #87	; 0x57
 800ba3e:	e7dc      	b.n	800b9fa <_strtoul_l.constprop.0+0x5e>
 800ba40:	f04f 37ff 	mov.w	r7, #4294967295
 800ba44:	e7e6      	b.n	800ba14 <_strtoul_l.constprop.0+0x78>
 800ba46:	1c7b      	adds	r3, r7, #1
 800ba48:	d106      	bne.n	800ba58 <_strtoul_l.constprop.0+0xbc>
 800ba4a:	2322      	movs	r3, #34	; 0x22
 800ba4c:	f8ce 3000 	str.w	r3, [lr]
 800ba50:	4638      	mov	r0, r7
 800ba52:	b932      	cbnz	r2, 800ba62 <_strtoul_l.constprop.0+0xc6>
 800ba54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba58:	b106      	cbz	r6, 800ba5c <_strtoul_l.constprop.0+0xc0>
 800ba5a:	4240      	negs	r0, r0
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	d0f9      	beq.n	800ba54 <_strtoul_l.constprop.0+0xb8>
 800ba60:	b107      	cbz	r7, 800ba64 <_strtoul_l.constprop.0+0xc8>
 800ba62:	1e69      	subs	r1, r5, #1
 800ba64:	6011      	str	r1, [r2, #0]
 800ba66:	e7f5      	b.n	800ba54 <_strtoul_l.constprop.0+0xb8>
 800ba68:	2430      	movs	r4, #48	; 0x30
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1b5      	bne.n	800b9da <_strtoul_l.constprop.0+0x3e>
 800ba6e:	2308      	movs	r3, #8
 800ba70:	e7b3      	b.n	800b9da <_strtoul_l.constprop.0+0x3e>
 800ba72:	2c30      	cmp	r4, #48	; 0x30
 800ba74:	d0a9      	beq.n	800b9ca <_strtoul_l.constprop.0+0x2e>
 800ba76:	230a      	movs	r3, #10
 800ba78:	e7af      	b.n	800b9da <_strtoul_l.constprop.0+0x3e>
 800ba7a:	bf00      	nop
 800ba7c:	0800d021 	.word	0x0800d021

0800ba80 <strtoul>:
 800ba80:	4613      	mov	r3, r2
 800ba82:	460a      	mov	r2, r1
 800ba84:	4601      	mov	r1, r0
 800ba86:	4802      	ldr	r0, [pc, #8]	; (800ba90 <strtoul+0x10>)
 800ba88:	6800      	ldr	r0, [r0, #0]
 800ba8a:	f7ff bf87 	b.w	800b99c <_strtoul_l.constprop.0>
 800ba8e:	bf00      	nop
 800ba90:	20000068 	.word	0x20000068

0800ba94 <std>:
 800ba94:	2300      	movs	r3, #0
 800ba96:	b510      	push	{r4, lr}
 800ba98:	4604      	mov	r4, r0
 800ba9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baa2:	6083      	str	r3, [r0, #8]
 800baa4:	8181      	strh	r1, [r0, #12]
 800baa6:	6643      	str	r3, [r0, #100]	; 0x64
 800baa8:	81c2      	strh	r2, [r0, #14]
 800baaa:	6183      	str	r3, [r0, #24]
 800baac:	4619      	mov	r1, r3
 800baae:	2208      	movs	r2, #8
 800bab0:	305c      	adds	r0, #92	; 0x5c
 800bab2:	f000 f9f7 	bl	800bea4 <memset>
 800bab6:	4b0d      	ldr	r3, [pc, #52]	; (800baec <std+0x58>)
 800bab8:	6263      	str	r3, [r4, #36]	; 0x24
 800baba:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <std+0x5c>)
 800babc:	62a3      	str	r3, [r4, #40]	; 0x28
 800babe:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <std+0x60>)
 800bac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <std+0x64>)
 800bac4:	6323      	str	r3, [r4, #48]	; 0x30
 800bac6:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <std+0x68>)
 800bac8:	6224      	str	r4, [r4, #32]
 800baca:	429c      	cmp	r4, r3
 800bacc:	d006      	beq.n	800badc <std+0x48>
 800bace:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bad2:	4294      	cmp	r4, r2
 800bad4:	d002      	beq.n	800badc <std+0x48>
 800bad6:	33d0      	adds	r3, #208	; 0xd0
 800bad8:	429c      	cmp	r4, r3
 800bada:	d105      	bne.n	800bae8 <std+0x54>
 800badc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae4:	f000 baac 	b.w	800c040 <__retarget_lock_init_recursive>
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	bf00      	nop
 800baec:	0800bcf5 	.word	0x0800bcf5
 800baf0:	0800bd17 	.word	0x0800bd17
 800baf4:	0800bd4f 	.word	0x0800bd4f
 800baf8:	0800bd73 	.word	0x0800bd73
 800bafc:	20004c90 	.word	0x20004c90

0800bb00 <stdio_exit_handler>:
 800bb00:	4a02      	ldr	r2, [pc, #8]	; (800bb0c <stdio_exit_handler+0xc>)
 800bb02:	4903      	ldr	r1, [pc, #12]	; (800bb10 <stdio_exit_handler+0x10>)
 800bb04:	4803      	ldr	r0, [pc, #12]	; (800bb14 <stdio_exit_handler+0x14>)
 800bb06:	f000 b869 	b.w	800bbdc <_fwalk_sglue>
 800bb0a:	bf00      	nop
 800bb0c:	20000010 	.word	0x20000010
 800bb10:	0800c909 	.word	0x0800c909
 800bb14:	2000001c 	.word	0x2000001c

0800bb18 <cleanup_stdio>:
 800bb18:	6841      	ldr	r1, [r0, #4]
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <cleanup_stdio+0x34>)
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	d001      	beq.n	800bb28 <cleanup_stdio+0x10>
 800bb24:	f000 fef0 	bl	800c908 <_fflush_r>
 800bb28:	68a1      	ldr	r1, [r4, #8]
 800bb2a:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <cleanup_stdio+0x38>)
 800bb2c:	4299      	cmp	r1, r3
 800bb2e:	d002      	beq.n	800bb36 <cleanup_stdio+0x1e>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fee9 	bl	800c908 <_fflush_r>
 800bb36:	68e1      	ldr	r1, [r4, #12]
 800bb38:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <cleanup_stdio+0x3c>)
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	d004      	beq.n	800bb48 <cleanup_stdio+0x30>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb44:	f000 bee0 	b.w	800c908 <_fflush_r>
 800bb48:	bd10      	pop	{r4, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20004c90 	.word	0x20004c90
 800bb50:	20004cf8 	.word	0x20004cf8
 800bb54:	20004d60 	.word	0x20004d60

0800bb58 <global_stdio_init.part.0>:
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <global_stdio_init.part.0+0x30>)
 800bb5c:	4c0b      	ldr	r4, [pc, #44]	; (800bb8c <global_stdio_init.part.0+0x34>)
 800bb5e:	4a0c      	ldr	r2, [pc, #48]	; (800bb90 <global_stdio_init.part.0+0x38>)
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	4620      	mov	r0, r4
 800bb64:	2200      	movs	r2, #0
 800bb66:	2104      	movs	r1, #4
 800bb68:	f7ff ff94 	bl	800ba94 <std>
 800bb6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bb70:	2201      	movs	r2, #1
 800bb72:	2109      	movs	r1, #9
 800bb74:	f7ff ff8e 	bl	800ba94 <std>
 800bb78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb82:	2112      	movs	r1, #18
 800bb84:	f7ff bf86 	b.w	800ba94 <std>
 800bb88:	20004dc8 	.word	0x20004dc8
 800bb8c:	20004c90 	.word	0x20004c90
 800bb90:	0800bb01 	.word	0x0800bb01

0800bb94 <__sfp_lock_acquire>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__sfp_lock_acquire+0x8>)
 800bb96:	f000 ba54 	b.w	800c042 <__retarget_lock_acquire_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	20004dd1 	.word	0x20004dd1

0800bba0 <__sfp_lock_release>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__sfp_lock_release+0x8>)
 800bba2:	f000 ba4f 	b.w	800c044 <__retarget_lock_release_recursive>
 800bba6:	bf00      	nop
 800bba8:	20004dd1 	.word	0x20004dd1

0800bbac <__sinit>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	4604      	mov	r4, r0
 800bbb0:	f7ff fff0 	bl	800bb94 <__sfp_lock_acquire>
 800bbb4:	6a23      	ldr	r3, [r4, #32]
 800bbb6:	b11b      	cbz	r3, 800bbc0 <__sinit+0x14>
 800bbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbbc:	f7ff bff0 	b.w	800bba0 <__sfp_lock_release>
 800bbc0:	4b04      	ldr	r3, [pc, #16]	; (800bbd4 <__sinit+0x28>)
 800bbc2:	6223      	str	r3, [r4, #32]
 800bbc4:	4b04      	ldr	r3, [pc, #16]	; (800bbd8 <__sinit+0x2c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1f5      	bne.n	800bbb8 <__sinit+0xc>
 800bbcc:	f7ff ffc4 	bl	800bb58 <global_stdio_init.part.0>
 800bbd0:	e7f2      	b.n	800bbb8 <__sinit+0xc>
 800bbd2:	bf00      	nop
 800bbd4:	0800bb19 	.word	0x0800bb19
 800bbd8:	20004dc8 	.word	0x20004dc8

0800bbdc <_fwalk_sglue>:
 800bbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	4688      	mov	r8, r1
 800bbe4:	4614      	mov	r4, r2
 800bbe6:	2600      	movs	r6, #0
 800bbe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbec:	f1b9 0901 	subs.w	r9, r9, #1
 800bbf0:	d505      	bpl.n	800bbfe <_fwalk_sglue+0x22>
 800bbf2:	6824      	ldr	r4, [r4, #0]
 800bbf4:	2c00      	cmp	r4, #0
 800bbf6:	d1f7      	bne.n	800bbe8 <_fwalk_sglue+0xc>
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d907      	bls.n	800bc14 <_fwalk_sglue+0x38>
 800bc04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	d003      	beq.n	800bc14 <_fwalk_sglue+0x38>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4638      	mov	r0, r7
 800bc10:	47c0      	blx	r8
 800bc12:	4306      	orrs	r6, r0
 800bc14:	3568      	adds	r5, #104	; 0x68
 800bc16:	e7e9      	b.n	800bbec <_fwalk_sglue+0x10>

0800bc18 <iprintf>:
 800bc18:	b40f      	push	{r0, r1, r2, r3}
 800bc1a:	b507      	push	{r0, r1, r2, lr}
 800bc1c:	4906      	ldr	r1, [pc, #24]	; (800bc38 <iprintf+0x20>)
 800bc1e:	ab04      	add	r3, sp, #16
 800bc20:	6808      	ldr	r0, [r1, #0]
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	6881      	ldr	r1, [r0, #8]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	f000 fb3d 	bl	800c2a8 <_vfiprintf_r>
 800bc2e:	b003      	add	sp, #12
 800bc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc34:	b004      	add	sp, #16
 800bc36:	4770      	bx	lr
 800bc38:	20000068 	.word	0x20000068

0800bc3c <_puts_r>:
 800bc3c:	6a03      	ldr	r3, [r0, #32]
 800bc3e:	b570      	push	{r4, r5, r6, lr}
 800bc40:	6884      	ldr	r4, [r0, #8]
 800bc42:	4605      	mov	r5, r0
 800bc44:	460e      	mov	r6, r1
 800bc46:	b90b      	cbnz	r3, 800bc4c <_puts_r+0x10>
 800bc48:	f7ff ffb0 	bl	800bbac <__sinit>
 800bc4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc4e:	07db      	lsls	r3, r3, #31
 800bc50:	d405      	bmi.n	800bc5e <_puts_r+0x22>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	0598      	lsls	r0, r3, #22
 800bc56:	d402      	bmi.n	800bc5e <_puts_r+0x22>
 800bc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc5a:	f000 f9f2 	bl	800c042 <__retarget_lock_acquire_recursive>
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	0719      	lsls	r1, r3, #28
 800bc62:	d513      	bpl.n	800bc8c <_puts_r+0x50>
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b18b      	cbz	r3, 800bc8c <_puts_r+0x50>
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc70:	3b01      	subs	r3, #1
 800bc72:	60a3      	str	r3, [r4, #8]
 800bc74:	b9e9      	cbnz	r1, 800bcb2 <_puts_r+0x76>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da2e      	bge.n	800bcd8 <_puts_r+0x9c>
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	210a      	movs	r1, #10
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f87b 	bl	800bd7a <__swbuf_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d007      	beq.n	800bc98 <_puts_r+0x5c>
 800bc88:	250a      	movs	r5, #10
 800bc8a:	e007      	b.n	800bc9c <_puts_r+0x60>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f8b0 	bl	800bdf4 <__swsetup_r>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d0e7      	beq.n	800bc68 <_puts_r+0x2c>
 800bc98:	f04f 35ff 	mov.w	r5, #4294967295
 800bc9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d405      	bmi.n	800bcae <_puts_r+0x72>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	059b      	lsls	r3, r3, #22
 800bca6:	d402      	bmi.n	800bcae <_puts_r+0x72>
 800bca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcaa:	f000 f9cb 	bl	800c044 <__retarget_lock_release_recursive>
 800bcae:	4628      	mov	r0, r5
 800bcb0:	bd70      	pop	{r4, r5, r6, pc}
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da04      	bge.n	800bcc0 <_puts_r+0x84>
 800bcb6:	69a2      	ldr	r2, [r4, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	dc06      	bgt.n	800bcca <_puts_r+0x8e>
 800bcbc:	290a      	cmp	r1, #10
 800bcbe:	d004      	beq.n	800bcca <_puts_r+0x8e>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	6022      	str	r2, [r4, #0]
 800bcc6:	7019      	strb	r1, [r3, #0]
 800bcc8:	e7cf      	b.n	800bc6a <_puts_r+0x2e>
 800bcca:	4622      	mov	r2, r4
 800bccc:	4628      	mov	r0, r5
 800bcce:	f000 f854 	bl	800bd7a <__swbuf_r>
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d1c9      	bne.n	800bc6a <_puts_r+0x2e>
 800bcd6:	e7df      	b.n	800bc98 <_puts_r+0x5c>
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	250a      	movs	r5, #10
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	701d      	strb	r5, [r3, #0]
 800bce2:	e7db      	b.n	800bc9c <_puts_r+0x60>

0800bce4 <puts>:
 800bce4:	4b02      	ldr	r3, [pc, #8]	; (800bcf0 <puts+0xc>)
 800bce6:	4601      	mov	r1, r0
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	f7ff bfa7 	b.w	800bc3c <_puts_r>
 800bcee:	bf00      	nop
 800bcf0:	20000068 	.word	0x20000068

0800bcf4 <__sread>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	f000 f952 	bl	800bfa4 <_read_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	bfab      	itete	ge
 800bd04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd06:	89a3      	ldrhlt	r3, [r4, #12]
 800bd08:	181b      	addge	r3, r3, r0
 800bd0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd0e:	bfac      	ite	ge
 800bd10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd12:	81a3      	strhlt	r3, [r4, #12]
 800bd14:	bd10      	pop	{r4, pc}

0800bd16 <__swrite>:
 800bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	898b      	ldrh	r3, [r1, #12]
 800bd1e:	05db      	lsls	r3, r3, #23
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	4616      	mov	r6, r2
 800bd26:	d505      	bpl.n	800bd34 <__swrite+0x1e>
 800bd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f000 f926 	bl	800bf80 <_lseek_r>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	4632      	mov	r2, r6
 800bd42:	463b      	mov	r3, r7
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	f000 b93d 	b.w	800bfc8 <_write_r>

0800bd4e <__sseek>:
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd56:	f000 f913 	bl	800bf80 <_lseek_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	bf15      	itete	ne
 800bd60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd6a:	81a3      	strheq	r3, [r4, #12]
 800bd6c:	bf18      	it	ne
 800bd6e:	81a3      	strhne	r3, [r4, #12]
 800bd70:	bd10      	pop	{r4, pc}

0800bd72 <__sclose>:
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 b89d 	b.w	800beb4 <_close_r>

0800bd7a <__swbuf_r>:
 800bd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7c:	460e      	mov	r6, r1
 800bd7e:	4614      	mov	r4, r2
 800bd80:	4605      	mov	r5, r0
 800bd82:	b118      	cbz	r0, 800bd8c <__swbuf_r+0x12>
 800bd84:	6a03      	ldr	r3, [r0, #32]
 800bd86:	b90b      	cbnz	r3, 800bd8c <__swbuf_r+0x12>
 800bd88:	f7ff ff10 	bl	800bbac <__sinit>
 800bd8c:	69a3      	ldr	r3, [r4, #24]
 800bd8e:	60a3      	str	r3, [r4, #8]
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	071a      	lsls	r2, r3, #28
 800bd94:	d525      	bpl.n	800bde2 <__swbuf_r+0x68>
 800bd96:	6923      	ldr	r3, [r4, #16]
 800bd98:	b31b      	cbz	r3, 800bde2 <__swbuf_r+0x68>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	1a98      	subs	r0, r3, r2
 800bda0:	6963      	ldr	r3, [r4, #20]
 800bda2:	b2f6      	uxtb	r6, r6
 800bda4:	4283      	cmp	r3, r0
 800bda6:	4637      	mov	r7, r6
 800bda8:	dc04      	bgt.n	800bdb4 <__swbuf_r+0x3a>
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4628      	mov	r0, r5
 800bdae:	f000 fdab 	bl	800c908 <_fflush_r>
 800bdb2:	b9e0      	cbnz	r0, 800bdee <__swbuf_r+0x74>
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	60a3      	str	r3, [r4, #8]
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	6022      	str	r2, [r4, #0]
 800bdc0:	701e      	strb	r6, [r3, #0]
 800bdc2:	6962      	ldr	r2, [r4, #20]
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d004      	beq.n	800bdd4 <__swbuf_r+0x5a>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	07db      	lsls	r3, r3, #31
 800bdce:	d506      	bpl.n	800bdde <__swbuf_r+0x64>
 800bdd0:	2e0a      	cmp	r6, #10
 800bdd2:	d104      	bne.n	800bdde <__swbuf_r+0x64>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 fd96 	bl	800c908 <_fflush_r>
 800bddc:	b938      	cbnz	r0, 800bdee <__swbuf_r+0x74>
 800bdde:	4638      	mov	r0, r7
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde2:	4621      	mov	r1, r4
 800bde4:	4628      	mov	r0, r5
 800bde6:	f000 f805 	bl	800bdf4 <__swsetup_r>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d0d5      	beq.n	800bd9a <__swbuf_r+0x20>
 800bdee:	f04f 37ff 	mov.w	r7, #4294967295
 800bdf2:	e7f4      	b.n	800bdde <__swbuf_r+0x64>

0800bdf4 <__swsetup_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4b2a      	ldr	r3, [pc, #168]	; (800bea0 <__swsetup_r+0xac>)
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	b118      	cbz	r0, 800be08 <__swsetup_r+0x14>
 800be00:	6a03      	ldr	r3, [r0, #32]
 800be02:	b90b      	cbnz	r3, 800be08 <__swsetup_r+0x14>
 800be04:	f7ff fed2 	bl	800bbac <__sinit>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be0e:	0718      	lsls	r0, r3, #28
 800be10:	d422      	bmi.n	800be58 <__swsetup_r+0x64>
 800be12:	06d9      	lsls	r1, r3, #27
 800be14:	d407      	bmi.n	800be26 <__swsetup_r+0x32>
 800be16:	2309      	movs	r3, #9
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	f04f 30ff 	mov.w	r0, #4294967295
 800be24:	e034      	b.n	800be90 <__swsetup_r+0x9c>
 800be26:	0758      	lsls	r0, r3, #29
 800be28:	d512      	bpl.n	800be50 <__swsetup_r+0x5c>
 800be2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be2c:	b141      	cbz	r1, 800be40 <__swsetup_r+0x4c>
 800be2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be32:	4299      	cmp	r1, r3
 800be34:	d002      	beq.n	800be3c <__swsetup_r+0x48>
 800be36:	4628      	mov	r0, r5
 800be38:	f000 f914 	bl	800c064 <_free_r>
 800be3c:	2300      	movs	r3, #0
 800be3e:	6363      	str	r3, [r4, #52]	; 0x34
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	2300      	movs	r3, #0
 800be4a:	6063      	str	r3, [r4, #4]
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f043 0308 	orr.w	r3, r3, #8
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	b94b      	cbnz	r3, 800be70 <__swsetup_r+0x7c>
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be66:	d003      	beq.n	800be70 <__swsetup_r+0x7c>
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 fd9a 	bl	800c9a4 <__smakebuf_r>
 800be70:	89a0      	ldrh	r0, [r4, #12]
 800be72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be76:	f010 0301 	ands.w	r3, r0, #1
 800be7a:	d00a      	beq.n	800be92 <__swsetup_r+0x9e>
 800be7c:	2300      	movs	r3, #0
 800be7e:	60a3      	str	r3, [r4, #8]
 800be80:	6963      	ldr	r3, [r4, #20]
 800be82:	425b      	negs	r3, r3
 800be84:	61a3      	str	r3, [r4, #24]
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	b943      	cbnz	r3, 800be9c <__swsetup_r+0xa8>
 800be8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be8e:	d1c4      	bne.n	800be1a <__swsetup_r+0x26>
 800be90:	bd38      	pop	{r3, r4, r5, pc}
 800be92:	0781      	lsls	r1, r0, #30
 800be94:	bf58      	it	pl
 800be96:	6963      	ldrpl	r3, [r4, #20]
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	e7f4      	b.n	800be86 <__swsetup_r+0x92>
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7f7      	b.n	800be90 <__swsetup_r+0x9c>
 800bea0:	20000068 	.word	0x20000068

0800bea4 <memset>:
 800bea4:	4402      	add	r2, r0
 800bea6:	4603      	mov	r3, r0
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d100      	bne.n	800beae <memset+0xa>
 800beac:	4770      	bx	lr
 800beae:	f803 1b01 	strb.w	r1, [r3], #1
 800beb2:	e7f9      	b.n	800bea8 <memset+0x4>

0800beb4 <_close_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d06      	ldr	r5, [pc, #24]	; (800bed0 <_close_r+0x1c>)
 800beb8:	2300      	movs	r3, #0
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f6 f8ff 	bl	80020c2 <_close>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_close_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_close_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	20004dcc 	.word	0x20004dcc

0800bed4 <_reclaim_reent>:
 800bed4:	4b29      	ldr	r3, [pc, #164]	; (800bf7c <_reclaim_reent+0xa8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4283      	cmp	r3, r0
 800beda:	b570      	push	{r4, r5, r6, lr}
 800bedc:	4604      	mov	r4, r0
 800bede:	d04b      	beq.n	800bf78 <_reclaim_reent+0xa4>
 800bee0:	69c3      	ldr	r3, [r0, #28]
 800bee2:	b143      	cbz	r3, 800bef6 <_reclaim_reent+0x22>
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d144      	bne.n	800bf74 <_reclaim_reent+0xa0>
 800beea:	69e3      	ldr	r3, [r4, #28]
 800beec:	6819      	ldr	r1, [r3, #0]
 800beee:	b111      	cbz	r1, 800bef6 <_reclaim_reent+0x22>
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 f8b7 	bl	800c064 <_free_r>
 800bef6:	6961      	ldr	r1, [r4, #20]
 800bef8:	b111      	cbz	r1, 800bf00 <_reclaim_reent+0x2c>
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f8b2 	bl	800c064 <_free_r>
 800bf00:	69e1      	ldr	r1, [r4, #28]
 800bf02:	b111      	cbz	r1, 800bf0a <_reclaim_reent+0x36>
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 f8ad 	bl	800c064 <_free_r>
 800bf0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf0c:	b111      	cbz	r1, 800bf14 <_reclaim_reent+0x40>
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 f8a8 	bl	800c064 <_free_r>
 800bf14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf16:	b111      	cbz	r1, 800bf1e <_reclaim_reent+0x4a>
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f8a3 	bl	800c064 <_free_r>
 800bf1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf20:	b111      	cbz	r1, 800bf28 <_reclaim_reent+0x54>
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f89e 	bl	800c064 <_free_r>
 800bf28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf2a:	b111      	cbz	r1, 800bf32 <_reclaim_reent+0x5e>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 f899 	bl	800c064 <_free_r>
 800bf32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf34:	b111      	cbz	r1, 800bf3c <_reclaim_reent+0x68>
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 f894 	bl	800c064 <_free_r>
 800bf3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf3e:	b111      	cbz	r1, 800bf46 <_reclaim_reent+0x72>
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 f88f 	bl	800c064 <_free_r>
 800bf46:	6a23      	ldr	r3, [r4, #32]
 800bf48:	b1b3      	cbz	r3, 800bf78 <_reclaim_reent+0xa4>
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf50:	4718      	bx	r3
 800bf52:	5949      	ldr	r1, [r1, r5]
 800bf54:	b941      	cbnz	r1, 800bf68 <_reclaim_reent+0x94>
 800bf56:	3504      	adds	r5, #4
 800bf58:	69e3      	ldr	r3, [r4, #28]
 800bf5a:	2d80      	cmp	r5, #128	; 0x80
 800bf5c:	68d9      	ldr	r1, [r3, #12]
 800bf5e:	d1f8      	bne.n	800bf52 <_reclaim_reent+0x7e>
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 f87f 	bl	800c064 <_free_r>
 800bf66:	e7c0      	b.n	800beea <_reclaim_reent+0x16>
 800bf68:	680e      	ldr	r6, [r1, #0]
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 f87a 	bl	800c064 <_free_r>
 800bf70:	4631      	mov	r1, r6
 800bf72:	e7ef      	b.n	800bf54 <_reclaim_reent+0x80>
 800bf74:	2500      	movs	r5, #0
 800bf76:	e7ef      	b.n	800bf58 <_reclaim_reent+0x84>
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000068 	.word	0x20000068

0800bf80 <_lseek_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	; (800bfa0 <_lseek_r+0x20>)
 800bf84:	4604      	mov	r4, r0
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f6 f8be 	bl	8002110 <_lseek>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_lseek_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_lseek_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20004dcc 	.word	0x20004dcc

0800bfa4 <_read_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d07      	ldr	r5, [pc, #28]	; (800bfc4 <_read_r+0x20>)
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	4608      	mov	r0, r1
 800bfac:	4611      	mov	r1, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	602a      	str	r2, [r5, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f7f6 f868 	bl	8002088 <_read>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_read_r+0x1e>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_read_r+0x1e>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20004dcc 	.word	0x20004dcc

0800bfc8 <_write_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d07      	ldr	r5, [pc, #28]	; (800bfe8 <_write_r+0x20>)
 800bfcc:	4604      	mov	r4, r0
 800bfce:	4608      	mov	r0, r1
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	602a      	str	r2, [r5, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f7f4 faff 	bl	80005da <_write>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_write_r+0x1e>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_write_r+0x1e>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	20004dcc 	.word	0x20004dcc

0800bfec <__errno>:
 800bfec:	4b01      	ldr	r3, [pc, #4]	; (800bff4 <__errno+0x8>)
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20000068 	.word	0x20000068

0800bff8 <__libc_init_array>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	4d0d      	ldr	r5, [pc, #52]	; (800c030 <__libc_init_array+0x38>)
 800bffc:	4c0d      	ldr	r4, [pc, #52]	; (800c034 <__libc_init_array+0x3c>)
 800bffe:	1b64      	subs	r4, r4, r5
 800c000:	10a4      	asrs	r4, r4, #2
 800c002:	2600      	movs	r6, #0
 800c004:	42a6      	cmp	r6, r4
 800c006:	d109      	bne.n	800c01c <__libc_init_array+0x24>
 800c008:	4d0b      	ldr	r5, [pc, #44]	; (800c038 <__libc_init_array+0x40>)
 800c00a:	4c0c      	ldr	r4, [pc, #48]	; (800c03c <__libc_init_array+0x44>)
 800c00c:	f000 fd38 	bl	800ca80 <_init>
 800c010:	1b64      	subs	r4, r4, r5
 800c012:	10a4      	asrs	r4, r4, #2
 800c014:	2600      	movs	r6, #0
 800c016:	42a6      	cmp	r6, r4
 800c018:	d105      	bne.n	800c026 <__libc_init_array+0x2e>
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c020:	4798      	blx	r3
 800c022:	3601      	adds	r6, #1
 800c024:	e7ee      	b.n	800c004 <__libc_init_array+0xc>
 800c026:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02a:	4798      	blx	r3
 800c02c:	3601      	adds	r6, #1
 800c02e:	e7f2      	b.n	800c016 <__libc_init_array+0x1e>
 800c030:	0800d15c 	.word	0x0800d15c
 800c034:	0800d15c 	.word	0x0800d15c
 800c038:	0800d15c 	.word	0x0800d15c
 800c03c:	0800d160 	.word	0x0800d160

0800c040 <__retarget_lock_init_recursive>:
 800c040:	4770      	bx	lr

0800c042 <__retarget_lock_acquire_recursive>:
 800c042:	4770      	bx	lr

0800c044 <__retarget_lock_release_recursive>:
 800c044:	4770      	bx	lr

0800c046 <memcpy>:
 800c046:	440a      	add	r2, r1
 800c048:	4291      	cmp	r1, r2
 800c04a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c04e:	d100      	bne.n	800c052 <memcpy+0xc>
 800c050:	4770      	bx	lr
 800c052:	b510      	push	{r4, lr}
 800c054:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05c:	4291      	cmp	r1, r2
 800c05e:	d1f9      	bne.n	800c054 <memcpy+0xe>
 800c060:	bd10      	pop	{r4, pc}
	...

0800c064 <_free_r>:
 800c064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c066:	2900      	cmp	r1, #0
 800c068:	d044      	beq.n	800c0f4 <_free_r+0x90>
 800c06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06e:	9001      	str	r0, [sp, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f1a1 0404 	sub.w	r4, r1, #4
 800c076:	bfb8      	it	lt
 800c078:	18e4      	addlt	r4, r4, r3
 800c07a:	f000 f8df 	bl	800c23c <__malloc_lock>
 800c07e:	4a1e      	ldr	r2, [pc, #120]	; (800c0f8 <_free_r+0x94>)
 800c080:	9801      	ldr	r0, [sp, #4]
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	b933      	cbnz	r3, 800c094 <_free_r+0x30>
 800c086:	6063      	str	r3, [r4, #4]
 800c088:	6014      	str	r4, [r2, #0]
 800c08a:	b003      	add	sp, #12
 800c08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c090:	f000 b8da 	b.w	800c248 <__malloc_unlock>
 800c094:	42a3      	cmp	r3, r4
 800c096:	d908      	bls.n	800c0aa <_free_r+0x46>
 800c098:	6825      	ldr	r5, [r4, #0]
 800c09a:	1961      	adds	r1, r4, r5
 800c09c:	428b      	cmp	r3, r1
 800c09e:	bf01      	itttt	eq
 800c0a0:	6819      	ldreq	r1, [r3, #0]
 800c0a2:	685b      	ldreq	r3, [r3, #4]
 800c0a4:	1949      	addeq	r1, r1, r5
 800c0a6:	6021      	streq	r1, [r4, #0]
 800c0a8:	e7ed      	b.n	800c086 <_free_r+0x22>
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	b10b      	cbz	r3, 800c0b4 <_free_r+0x50>
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	d9fa      	bls.n	800c0aa <_free_r+0x46>
 800c0b4:	6811      	ldr	r1, [r2, #0]
 800c0b6:	1855      	adds	r5, r2, r1
 800c0b8:	42a5      	cmp	r5, r4
 800c0ba:	d10b      	bne.n	800c0d4 <_free_r+0x70>
 800c0bc:	6824      	ldr	r4, [r4, #0]
 800c0be:	4421      	add	r1, r4
 800c0c0:	1854      	adds	r4, r2, r1
 800c0c2:	42a3      	cmp	r3, r4
 800c0c4:	6011      	str	r1, [r2, #0]
 800c0c6:	d1e0      	bne.n	800c08a <_free_r+0x26>
 800c0c8:	681c      	ldr	r4, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	6053      	str	r3, [r2, #4]
 800c0ce:	440c      	add	r4, r1
 800c0d0:	6014      	str	r4, [r2, #0]
 800c0d2:	e7da      	b.n	800c08a <_free_r+0x26>
 800c0d4:	d902      	bls.n	800c0dc <_free_r+0x78>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	e7d6      	b.n	800c08a <_free_r+0x26>
 800c0dc:	6825      	ldr	r5, [r4, #0]
 800c0de:	1961      	adds	r1, r4, r5
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	bf04      	itt	eq
 800c0e4:	6819      	ldreq	r1, [r3, #0]
 800c0e6:	685b      	ldreq	r3, [r3, #4]
 800c0e8:	6063      	str	r3, [r4, #4]
 800c0ea:	bf04      	itt	eq
 800c0ec:	1949      	addeq	r1, r1, r5
 800c0ee:	6021      	streq	r1, [r4, #0]
 800c0f0:	6054      	str	r4, [r2, #4]
 800c0f2:	e7ca      	b.n	800c08a <_free_r+0x26>
 800c0f4:	b003      	add	sp, #12
 800c0f6:	bd30      	pop	{r4, r5, pc}
 800c0f8:	20004dd4 	.word	0x20004dd4

0800c0fc <sbrk_aligned>:
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	4e0e      	ldr	r6, [pc, #56]	; (800c138 <sbrk_aligned+0x3c>)
 800c100:	460c      	mov	r4, r1
 800c102:	6831      	ldr	r1, [r6, #0]
 800c104:	4605      	mov	r5, r0
 800c106:	b911      	cbnz	r1, 800c10e <sbrk_aligned+0x12>
 800c108:	f000 fcaa 	bl	800ca60 <_sbrk_r>
 800c10c:	6030      	str	r0, [r6, #0]
 800c10e:	4621      	mov	r1, r4
 800c110:	4628      	mov	r0, r5
 800c112:	f000 fca5 	bl	800ca60 <_sbrk_r>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d00a      	beq.n	800c130 <sbrk_aligned+0x34>
 800c11a:	1cc4      	adds	r4, r0, #3
 800c11c:	f024 0403 	bic.w	r4, r4, #3
 800c120:	42a0      	cmp	r0, r4
 800c122:	d007      	beq.n	800c134 <sbrk_aligned+0x38>
 800c124:	1a21      	subs	r1, r4, r0
 800c126:	4628      	mov	r0, r5
 800c128:	f000 fc9a 	bl	800ca60 <_sbrk_r>
 800c12c:	3001      	adds	r0, #1
 800c12e:	d101      	bne.n	800c134 <sbrk_aligned+0x38>
 800c130:	f04f 34ff 	mov.w	r4, #4294967295
 800c134:	4620      	mov	r0, r4
 800c136:	bd70      	pop	{r4, r5, r6, pc}
 800c138:	20004dd8 	.word	0x20004dd8

0800c13c <_malloc_r>:
 800c13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c140:	1ccd      	adds	r5, r1, #3
 800c142:	f025 0503 	bic.w	r5, r5, #3
 800c146:	3508      	adds	r5, #8
 800c148:	2d0c      	cmp	r5, #12
 800c14a:	bf38      	it	cc
 800c14c:	250c      	movcc	r5, #12
 800c14e:	2d00      	cmp	r5, #0
 800c150:	4607      	mov	r7, r0
 800c152:	db01      	blt.n	800c158 <_malloc_r+0x1c>
 800c154:	42a9      	cmp	r1, r5
 800c156:	d905      	bls.n	800c164 <_malloc_r+0x28>
 800c158:	230c      	movs	r3, #12
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	2600      	movs	r6, #0
 800c15e:	4630      	mov	r0, r6
 800c160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c164:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c238 <_malloc_r+0xfc>
 800c168:	f000 f868 	bl	800c23c <__malloc_lock>
 800c16c:	f8d8 3000 	ldr.w	r3, [r8]
 800c170:	461c      	mov	r4, r3
 800c172:	bb5c      	cbnz	r4, 800c1cc <_malloc_r+0x90>
 800c174:	4629      	mov	r1, r5
 800c176:	4638      	mov	r0, r7
 800c178:	f7ff ffc0 	bl	800c0fc <sbrk_aligned>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	4604      	mov	r4, r0
 800c180:	d155      	bne.n	800c22e <_malloc_r+0xf2>
 800c182:	f8d8 4000 	ldr.w	r4, [r8]
 800c186:	4626      	mov	r6, r4
 800c188:	2e00      	cmp	r6, #0
 800c18a:	d145      	bne.n	800c218 <_malloc_r+0xdc>
 800c18c:	2c00      	cmp	r4, #0
 800c18e:	d048      	beq.n	800c222 <_malloc_r+0xe6>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	4631      	mov	r1, r6
 800c194:	4638      	mov	r0, r7
 800c196:	eb04 0903 	add.w	r9, r4, r3
 800c19a:	f000 fc61 	bl	800ca60 <_sbrk_r>
 800c19e:	4581      	cmp	r9, r0
 800c1a0:	d13f      	bne.n	800c222 <_malloc_r+0xe6>
 800c1a2:	6821      	ldr	r1, [r4, #0]
 800c1a4:	1a6d      	subs	r5, r5, r1
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff ffa7 	bl	800c0fc <sbrk_aligned>
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d037      	beq.n	800c222 <_malloc_r+0xe6>
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	442b      	add	r3, r5
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d038      	beq.n	800c232 <_malloc_r+0xf6>
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	42a2      	cmp	r2, r4
 800c1c4:	d12b      	bne.n	800c21e <_malloc_r+0xe2>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	605a      	str	r2, [r3, #4]
 800c1ca:	e00f      	b.n	800c1ec <_malloc_r+0xb0>
 800c1cc:	6822      	ldr	r2, [r4, #0]
 800c1ce:	1b52      	subs	r2, r2, r5
 800c1d0:	d41f      	bmi.n	800c212 <_malloc_r+0xd6>
 800c1d2:	2a0b      	cmp	r2, #11
 800c1d4:	d917      	bls.n	800c206 <_malloc_r+0xca>
 800c1d6:	1961      	adds	r1, r4, r5
 800c1d8:	42a3      	cmp	r3, r4
 800c1da:	6025      	str	r5, [r4, #0]
 800c1dc:	bf18      	it	ne
 800c1de:	6059      	strne	r1, [r3, #4]
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	bf08      	it	eq
 800c1e4:	f8c8 1000 	streq.w	r1, [r8]
 800c1e8:	5162      	str	r2, [r4, r5]
 800c1ea:	604b      	str	r3, [r1, #4]
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f104 060b 	add.w	r6, r4, #11
 800c1f2:	f000 f829 	bl	800c248 <__malloc_unlock>
 800c1f6:	f026 0607 	bic.w	r6, r6, #7
 800c1fa:	1d23      	adds	r3, r4, #4
 800c1fc:	1af2      	subs	r2, r6, r3
 800c1fe:	d0ae      	beq.n	800c15e <_malloc_r+0x22>
 800c200:	1b9b      	subs	r3, r3, r6
 800c202:	50a3      	str	r3, [r4, r2]
 800c204:	e7ab      	b.n	800c15e <_malloc_r+0x22>
 800c206:	42a3      	cmp	r3, r4
 800c208:	6862      	ldr	r2, [r4, #4]
 800c20a:	d1dd      	bne.n	800c1c8 <_malloc_r+0x8c>
 800c20c:	f8c8 2000 	str.w	r2, [r8]
 800c210:	e7ec      	b.n	800c1ec <_malloc_r+0xb0>
 800c212:	4623      	mov	r3, r4
 800c214:	6864      	ldr	r4, [r4, #4]
 800c216:	e7ac      	b.n	800c172 <_malloc_r+0x36>
 800c218:	4634      	mov	r4, r6
 800c21a:	6876      	ldr	r6, [r6, #4]
 800c21c:	e7b4      	b.n	800c188 <_malloc_r+0x4c>
 800c21e:	4613      	mov	r3, r2
 800c220:	e7cc      	b.n	800c1bc <_malloc_r+0x80>
 800c222:	230c      	movs	r3, #12
 800c224:	603b      	str	r3, [r7, #0]
 800c226:	4638      	mov	r0, r7
 800c228:	f000 f80e 	bl	800c248 <__malloc_unlock>
 800c22c:	e797      	b.n	800c15e <_malloc_r+0x22>
 800c22e:	6025      	str	r5, [r4, #0]
 800c230:	e7dc      	b.n	800c1ec <_malloc_r+0xb0>
 800c232:	605b      	str	r3, [r3, #4]
 800c234:	deff      	udf	#255	; 0xff
 800c236:	bf00      	nop
 800c238:	20004dd4 	.word	0x20004dd4

0800c23c <__malloc_lock>:
 800c23c:	4801      	ldr	r0, [pc, #4]	; (800c244 <__malloc_lock+0x8>)
 800c23e:	f7ff bf00 	b.w	800c042 <__retarget_lock_acquire_recursive>
 800c242:	bf00      	nop
 800c244:	20004dd0 	.word	0x20004dd0

0800c248 <__malloc_unlock>:
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <__malloc_unlock+0x8>)
 800c24a:	f7ff befb 	b.w	800c044 <__retarget_lock_release_recursive>
 800c24e:	bf00      	nop
 800c250:	20004dd0 	.word	0x20004dd0

0800c254 <__sfputc_r>:
 800c254:	6893      	ldr	r3, [r2, #8]
 800c256:	3b01      	subs	r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	b410      	push	{r4}
 800c25c:	6093      	str	r3, [r2, #8]
 800c25e:	da08      	bge.n	800c272 <__sfputc_r+0x1e>
 800c260:	6994      	ldr	r4, [r2, #24]
 800c262:	42a3      	cmp	r3, r4
 800c264:	db01      	blt.n	800c26a <__sfputc_r+0x16>
 800c266:	290a      	cmp	r1, #10
 800c268:	d103      	bne.n	800c272 <__sfputc_r+0x1e>
 800c26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c26e:	f7ff bd84 	b.w	800bd7a <__swbuf_r>
 800c272:	6813      	ldr	r3, [r2, #0]
 800c274:	1c58      	adds	r0, r3, #1
 800c276:	6010      	str	r0, [r2, #0]
 800c278:	7019      	strb	r1, [r3, #0]
 800c27a:	4608      	mov	r0, r1
 800c27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <__sfputs_r>:
 800c282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	18d5      	adds	r5, r2, r3
 800c28c:	42ac      	cmp	r4, r5
 800c28e:	d101      	bne.n	800c294 <__sfputs_r+0x12>
 800c290:	2000      	movs	r0, #0
 800c292:	e007      	b.n	800c2a4 <__sfputs_r+0x22>
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	463a      	mov	r2, r7
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7ff ffda 	bl	800c254 <__sfputc_r>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d1f3      	bne.n	800c28c <__sfputs_r+0xa>
 800c2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2a8 <_vfiprintf_r>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	b09d      	sub	sp, #116	; 0x74
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	4698      	mov	r8, r3
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	b118      	cbz	r0, 800c2c0 <_vfiprintf_r+0x18>
 800c2b8:	6a03      	ldr	r3, [r0, #32]
 800c2ba:	b90b      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x18>
 800c2bc:	f7ff fc76 	bl	800bbac <__sinit>
 800c2c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2c2:	07d9      	lsls	r1, r3, #31
 800c2c4:	d405      	bmi.n	800c2d2 <_vfiprintf_r+0x2a>
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	059a      	lsls	r2, r3, #22
 800c2ca:	d402      	bmi.n	800c2d2 <_vfiprintf_r+0x2a>
 800c2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ce:	f7ff feb8 	bl	800c042 <__retarget_lock_acquire_recursive>
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	071b      	lsls	r3, r3, #28
 800c2d6:	d501      	bpl.n	800c2dc <_vfiprintf_r+0x34>
 800c2d8:	692b      	ldr	r3, [r5, #16]
 800c2da:	b99b      	cbnz	r3, 800c304 <_vfiprintf_r+0x5c>
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f7ff fd88 	bl	800bdf4 <__swsetup_r>
 800c2e4:	b170      	cbz	r0, 800c304 <_vfiprintf_r+0x5c>
 800c2e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2e8:	07dc      	lsls	r4, r3, #31
 800c2ea:	d504      	bpl.n	800c2f6 <_vfiprintf_r+0x4e>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	b01d      	add	sp, #116	; 0x74
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	89ab      	ldrh	r3, [r5, #12]
 800c2f8:	0598      	lsls	r0, r3, #22
 800c2fa:	d4f7      	bmi.n	800c2ec <_vfiprintf_r+0x44>
 800c2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2fe:	f7ff fea1 	bl	800c044 <__retarget_lock_release_recursive>
 800c302:	e7f3      	b.n	800c2ec <_vfiprintf_r+0x44>
 800c304:	2300      	movs	r3, #0
 800c306:	9309      	str	r3, [sp, #36]	; 0x24
 800c308:	2320      	movs	r3, #32
 800c30a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c30e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c312:	2330      	movs	r3, #48	; 0x30
 800c314:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4c8 <_vfiprintf_r+0x220>
 800c318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c31c:	f04f 0901 	mov.w	r9, #1
 800c320:	4623      	mov	r3, r4
 800c322:	469a      	mov	sl, r3
 800c324:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c328:	b10a      	cbz	r2, 800c32e <_vfiprintf_r+0x86>
 800c32a:	2a25      	cmp	r2, #37	; 0x25
 800c32c:	d1f9      	bne.n	800c322 <_vfiprintf_r+0x7a>
 800c32e:	ebba 0b04 	subs.w	fp, sl, r4
 800c332:	d00b      	beq.n	800c34c <_vfiprintf_r+0xa4>
 800c334:	465b      	mov	r3, fp
 800c336:	4622      	mov	r2, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff ffa1 	bl	800c282 <__sfputs_r>
 800c340:	3001      	adds	r0, #1
 800c342:	f000 80a9 	beq.w	800c498 <_vfiprintf_r+0x1f0>
 800c346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c348:	445a      	add	r2, fp
 800c34a:	9209      	str	r2, [sp, #36]	; 0x24
 800c34c:	f89a 3000 	ldrb.w	r3, [sl]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 80a1 	beq.w	800c498 <_vfiprintf_r+0x1f0>
 800c356:	2300      	movs	r3, #0
 800c358:	f04f 32ff 	mov.w	r2, #4294967295
 800c35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c360:	f10a 0a01 	add.w	sl, sl, #1
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	9307      	str	r3, [sp, #28]
 800c368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c36c:	931a      	str	r3, [sp, #104]	; 0x68
 800c36e:	4654      	mov	r4, sl
 800c370:	2205      	movs	r2, #5
 800c372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c376:	4854      	ldr	r0, [pc, #336]	; (800c4c8 <_vfiprintf_r+0x220>)
 800c378:	f7f3 ff3a 	bl	80001f0 <memchr>
 800c37c:	9a04      	ldr	r2, [sp, #16]
 800c37e:	b9d8      	cbnz	r0, 800c3b8 <_vfiprintf_r+0x110>
 800c380:	06d1      	lsls	r1, r2, #27
 800c382:	bf44      	itt	mi
 800c384:	2320      	movmi	r3, #32
 800c386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c38a:	0713      	lsls	r3, r2, #28
 800c38c:	bf44      	itt	mi
 800c38e:	232b      	movmi	r3, #43	; 0x2b
 800c390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c394:	f89a 3000 	ldrb.w	r3, [sl]
 800c398:	2b2a      	cmp	r3, #42	; 0x2a
 800c39a:	d015      	beq.n	800c3c8 <_vfiprintf_r+0x120>
 800c39c:	9a07      	ldr	r2, [sp, #28]
 800c39e:	4654      	mov	r4, sl
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f04f 0c0a 	mov.w	ip, #10
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ac:	3b30      	subs	r3, #48	; 0x30
 800c3ae:	2b09      	cmp	r3, #9
 800c3b0:	d94d      	bls.n	800c44e <_vfiprintf_r+0x1a6>
 800c3b2:	b1b0      	cbz	r0, 800c3e2 <_vfiprintf_r+0x13a>
 800c3b4:	9207      	str	r2, [sp, #28]
 800c3b6:	e014      	b.n	800c3e2 <_vfiprintf_r+0x13a>
 800c3b8:	eba0 0308 	sub.w	r3, r0, r8
 800c3bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	9304      	str	r3, [sp, #16]
 800c3c4:	46a2      	mov	sl, r4
 800c3c6:	e7d2      	b.n	800c36e <_vfiprintf_r+0xc6>
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	1d19      	adds	r1, r3, #4
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	9103      	str	r1, [sp, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bfbb      	ittet	lt
 800c3d4:	425b      	neglt	r3, r3
 800c3d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3da:	9307      	strge	r3, [sp, #28]
 800c3dc:	9307      	strlt	r3, [sp, #28]
 800c3de:	bfb8      	it	lt
 800c3e0:	9204      	strlt	r2, [sp, #16]
 800c3e2:	7823      	ldrb	r3, [r4, #0]
 800c3e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e6:	d10c      	bne.n	800c402 <_vfiprintf_r+0x15a>
 800c3e8:	7863      	ldrb	r3, [r4, #1]
 800c3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ec:	d134      	bne.n	800c458 <_vfiprintf_r+0x1b0>
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	1d1a      	adds	r2, r3, #4
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	9203      	str	r2, [sp, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	bfb8      	it	lt
 800c3fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3fe:	3402      	adds	r4, #2
 800c400:	9305      	str	r3, [sp, #20]
 800c402:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4d8 <_vfiprintf_r+0x230>
 800c406:	7821      	ldrb	r1, [r4, #0]
 800c408:	2203      	movs	r2, #3
 800c40a:	4650      	mov	r0, sl
 800c40c:	f7f3 fef0 	bl	80001f0 <memchr>
 800c410:	b138      	cbz	r0, 800c422 <_vfiprintf_r+0x17a>
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	eba0 000a 	sub.w	r0, r0, sl
 800c418:	2240      	movs	r2, #64	; 0x40
 800c41a:	4082      	lsls	r2, r0
 800c41c:	4313      	orrs	r3, r2
 800c41e:	3401      	adds	r4, #1
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c426:	4829      	ldr	r0, [pc, #164]	; (800c4cc <_vfiprintf_r+0x224>)
 800c428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c42c:	2206      	movs	r2, #6
 800c42e:	f7f3 fedf 	bl	80001f0 <memchr>
 800c432:	2800      	cmp	r0, #0
 800c434:	d03f      	beq.n	800c4b6 <_vfiprintf_r+0x20e>
 800c436:	4b26      	ldr	r3, [pc, #152]	; (800c4d0 <_vfiprintf_r+0x228>)
 800c438:	bb1b      	cbnz	r3, 800c482 <_vfiprintf_r+0x1da>
 800c43a:	9b03      	ldr	r3, [sp, #12]
 800c43c:	3307      	adds	r3, #7
 800c43e:	f023 0307 	bic.w	r3, r3, #7
 800c442:	3308      	adds	r3, #8
 800c444:	9303      	str	r3, [sp, #12]
 800c446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c448:	443b      	add	r3, r7
 800c44a:	9309      	str	r3, [sp, #36]	; 0x24
 800c44c:	e768      	b.n	800c320 <_vfiprintf_r+0x78>
 800c44e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c452:	460c      	mov	r4, r1
 800c454:	2001      	movs	r0, #1
 800c456:	e7a6      	b.n	800c3a6 <_vfiprintf_r+0xfe>
 800c458:	2300      	movs	r3, #0
 800c45a:	3401      	adds	r4, #1
 800c45c:	9305      	str	r3, [sp, #20]
 800c45e:	4619      	mov	r1, r3
 800c460:	f04f 0c0a 	mov.w	ip, #10
 800c464:	4620      	mov	r0, r4
 800c466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c46a:	3a30      	subs	r2, #48	; 0x30
 800c46c:	2a09      	cmp	r2, #9
 800c46e:	d903      	bls.n	800c478 <_vfiprintf_r+0x1d0>
 800c470:	2b00      	cmp	r3, #0
 800c472:	d0c6      	beq.n	800c402 <_vfiprintf_r+0x15a>
 800c474:	9105      	str	r1, [sp, #20]
 800c476:	e7c4      	b.n	800c402 <_vfiprintf_r+0x15a>
 800c478:	fb0c 2101 	mla	r1, ip, r1, r2
 800c47c:	4604      	mov	r4, r0
 800c47e:	2301      	movs	r3, #1
 800c480:	e7f0      	b.n	800c464 <_vfiprintf_r+0x1bc>
 800c482:	ab03      	add	r3, sp, #12
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	462a      	mov	r2, r5
 800c488:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <_vfiprintf_r+0x22c>)
 800c48a:	a904      	add	r1, sp, #16
 800c48c:	4630      	mov	r0, r6
 800c48e:	f3af 8000 	nop.w
 800c492:	4607      	mov	r7, r0
 800c494:	1c78      	adds	r0, r7, #1
 800c496:	d1d6      	bne.n	800c446 <_vfiprintf_r+0x19e>
 800c498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c49a:	07d9      	lsls	r1, r3, #31
 800c49c:	d405      	bmi.n	800c4aa <_vfiprintf_r+0x202>
 800c49e:	89ab      	ldrh	r3, [r5, #12]
 800c4a0:	059a      	lsls	r2, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_vfiprintf_r+0x202>
 800c4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4a6:	f7ff fdcd 	bl	800c044 <__retarget_lock_release_recursive>
 800c4aa:	89ab      	ldrh	r3, [r5, #12]
 800c4ac:	065b      	lsls	r3, r3, #25
 800c4ae:	f53f af1d 	bmi.w	800c2ec <_vfiprintf_r+0x44>
 800c4b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b4:	e71c      	b.n	800c2f0 <_vfiprintf_r+0x48>
 800c4b6:	ab03      	add	r3, sp, #12
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <_vfiprintf_r+0x22c>)
 800c4be:	a904      	add	r1, sp, #16
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f000 f879 	bl	800c5b8 <_printf_i>
 800c4c6:	e7e4      	b.n	800c492 <_vfiprintf_r+0x1ea>
 800c4c8:	0800d121 	.word	0x0800d121
 800c4cc:	0800d12b 	.word	0x0800d12b
 800c4d0:	00000000 	.word	0x00000000
 800c4d4:	0800c283 	.word	0x0800c283
 800c4d8:	0800d127 	.word	0x0800d127

0800c4dc <_printf_common>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	4616      	mov	r6, r2
 800c4e2:	4699      	mov	r9, r3
 800c4e4:	688a      	ldr	r2, [r1, #8]
 800c4e6:	690b      	ldr	r3, [r1, #16]
 800c4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	bfb8      	it	lt
 800c4f0:	4613      	movlt	r3, r2
 800c4f2:	6033      	str	r3, [r6, #0]
 800c4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b10a      	cbz	r2, 800c502 <_printf_common+0x26>
 800c4fe:	3301      	adds	r3, #1
 800c500:	6033      	str	r3, [r6, #0]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	0699      	lsls	r1, r3, #26
 800c506:	bf42      	ittt	mi
 800c508:	6833      	ldrmi	r3, [r6, #0]
 800c50a:	3302      	addmi	r3, #2
 800c50c:	6033      	strmi	r3, [r6, #0]
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	f015 0506 	ands.w	r5, r5, #6
 800c514:	d106      	bne.n	800c524 <_printf_common+0x48>
 800c516:	f104 0a19 	add.w	sl, r4, #25
 800c51a:	68e3      	ldr	r3, [r4, #12]
 800c51c:	6832      	ldr	r2, [r6, #0]
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	42ab      	cmp	r3, r5
 800c522:	dc26      	bgt.n	800c572 <_printf_common+0x96>
 800c524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c528:	1e13      	subs	r3, r2, #0
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	bf18      	it	ne
 800c52e:	2301      	movne	r3, #1
 800c530:	0692      	lsls	r2, r2, #26
 800c532:	d42b      	bmi.n	800c58c <_printf_common+0xb0>
 800c534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c538:	4649      	mov	r1, r9
 800c53a:	4638      	mov	r0, r7
 800c53c:	47c0      	blx	r8
 800c53e:	3001      	adds	r0, #1
 800c540:	d01e      	beq.n	800c580 <_printf_common+0xa4>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	f003 0306 	and.w	r3, r3, #6
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	bf02      	ittt	eq
 800c54e:	68e5      	ldreq	r5, [r4, #12]
 800c550:	6833      	ldreq	r3, [r6, #0]
 800c552:	1aed      	subeq	r5, r5, r3
 800c554:	68a3      	ldr	r3, [r4, #8]
 800c556:	bf0c      	ite	eq
 800c558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c55c:	2500      	movne	r5, #0
 800c55e:	4293      	cmp	r3, r2
 800c560:	bfc4      	itt	gt
 800c562:	1a9b      	subgt	r3, r3, r2
 800c564:	18ed      	addgt	r5, r5, r3
 800c566:	2600      	movs	r6, #0
 800c568:	341a      	adds	r4, #26
 800c56a:	42b5      	cmp	r5, r6
 800c56c:	d11a      	bne.n	800c5a4 <_printf_common+0xc8>
 800c56e:	2000      	movs	r0, #0
 800c570:	e008      	b.n	800c584 <_printf_common+0xa8>
 800c572:	2301      	movs	r3, #1
 800c574:	4652      	mov	r2, sl
 800c576:	4649      	mov	r1, r9
 800c578:	4638      	mov	r0, r7
 800c57a:	47c0      	blx	r8
 800c57c:	3001      	adds	r0, #1
 800c57e:	d103      	bne.n	800c588 <_printf_common+0xac>
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c588:	3501      	adds	r5, #1
 800c58a:	e7c6      	b.n	800c51a <_printf_common+0x3e>
 800c58c:	18e1      	adds	r1, r4, r3
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	2030      	movs	r0, #48	; 0x30
 800c592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c596:	4422      	add	r2, r4
 800c598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	e7c7      	b.n	800c534 <_printf_common+0x58>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	47c0      	blx	r8
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d0e6      	beq.n	800c580 <_printf_common+0xa4>
 800c5b2:	3601      	adds	r6, #1
 800c5b4:	e7d9      	b.n	800c56a <_printf_common+0x8e>
	...

0800c5b8 <_printf_i>:
 800c5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5bc:	7e0f      	ldrb	r7, [r1, #24]
 800c5be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5c0:	2f78      	cmp	r7, #120	; 0x78
 800c5c2:	4691      	mov	r9, r2
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5ce:	d807      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5d0:	2f62      	cmp	r7, #98	; 0x62
 800c5d2:	d80a      	bhi.n	800c5ea <_printf_i+0x32>
 800c5d4:	2f00      	cmp	r7, #0
 800c5d6:	f000 80d4 	beq.w	800c782 <_printf_i+0x1ca>
 800c5da:	2f58      	cmp	r7, #88	; 0x58
 800c5dc:	f000 80c0 	beq.w	800c760 <_printf_i+0x1a8>
 800c5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5e8:	e03a      	b.n	800c660 <_printf_i+0xa8>
 800c5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5ee:	2b15      	cmp	r3, #21
 800c5f0:	d8f6      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5f2:	a101      	add	r1, pc, #4	; (adr r1, 800c5f8 <_printf_i+0x40>)
 800c5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c665 	.word	0x0800c665
 800c600:	0800c5e1 	.word	0x0800c5e1
 800c604:	0800c5e1 	.word	0x0800c5e1
 800c608:	0800c5e1 	.word	0x0800c5e1
 800c60c:	0800c5e1 	.word	0x0800c5e1
 800c610:	0800c665 	.word	0x0800c665
 800c614:	0800c5e1 	.word	0x0800c5e1
 800c618:	0800c5e1 	.word	0x0800c5e1
 800c61c:	0800c5e1 	.word	0x0800c5e1
 800c620:	0800c5e1 	.word	0x0800c5e1
 800c624:	0800c769 	.word	0x0800c769
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c723 	.word	0x0800c723
 800c630:	0800c5e1 	.word	0x0800c5e1
 800c634:	0800c5e1 	.word	0x0800c5e1
 800c638:	0800c78b 	.word	0x0800c78b
 800c63c:	0800c5e1 	.word	0x0800c5e1
 800c640:	0800c691 	.word	0x0800c691
 800c644:	0800c5e1 	.word	0x0800c5e1
 800c648:	0800c5e1 	.word	0x0800c5e1
 800c64c:	0800c72b 	.word	0x0800c72b
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	602a      	str	r2, [r5, #0]
 800c658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c660:	2301      	movs	r3, #1
 800c662:	e09f      	b.n	800c7a4 <_printf_i+0x1ec>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	0607      	lsls	r7, r0, #24
 800c66a:	f103 0104 	add.w	r1, r3, #4
 800c66e:	6029      	str	r1, [r5, #0]
 800c670:	d501      	bpl.n	800c676 <_printf_i+0xbe>
 800c672:	681e      	ldr	r6, [r3, #0]
 800c674:	e003      	b.n	800c67e <_printf_i+0xc6>
 800c676:	0646      	lsls	r6, r0, #25
 800c678:	d5fb      	bpl.n	800c672 <_printf_i+0xba>
 800c67a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c67e:	2e00      	cmp	r6, #0
 800c680:	da03      	bge.n	800c68a <_printf_i+0xd2>
 800c682:	232d      	movs	r3, #45	; 0x2d
 800c684:	4276      	negs	r6, r6
 800c686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c68a:	485a      	ldr	r0, [pc, #360]	; (800c7f4 <_printf_i+0x23c>)
 800c68c:	230a      	movs	r3, #10
 800c68e:	e012      	b.n	800c6b6 <_printf_i+0xfe>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	6029      	str	r1, [r5, #0]
 800c698:	0605      	lsls	r5, r0, #24
 800c69a:	d501      	bpl.n	800c6a0 <_printf_i+0xe8>
 800c69c:	681e      	ldr	r6, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <_printf_i+0xee>
 800c6a0:	0641      	lsls	r1, r0, #25
 800c6a2:	d5fb      	bpl.n	800c69c <_printf_i+0xe4>
 800c6a4:	881e      	ldrh	r6, [r3, #0]
 800c6a6:	4853      	ldr	r0, [pc, #332]	; (800c7f4 <_printf_i+0x23c>)
 800c6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c6aa:	bf0c      	ite	eq
 800c6ac:	2308      	moveq	r3, #8
 800c6ae:	230a      	movne	r3, #10
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6b6:	6865      	ldr	r5, [r4, #4]
 800c6b8:	60a5      	str	r5, [r4, #8]
 800c6ba:	2d00      	cmp	r5, #0
 800c6bc:	bfa2      	ittt	ge
 800c6be:	6821      	ldrge	r1, [r4, #0]
 800c6c0:	f021 0104 	bicge.w	r1, r1, #4
 800c6c4:	6021      	strge	r1, [r4, #0]
 800c6c6:	b90e      	cbnz	r6, 800c6cc <_printf_i+0x114>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d04b      	beq.n	800c764 <_printf_i+0x1ac>
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6d6:	5dc7      	ldrb	r7, [r0, r7]
 800c6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6dc:	4637      	mov	r7, r6
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	460e      	mov	r6, r1
 800c6e2:	d9f4      	bls.n	800c6ce <_printf_i+0x116>
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d10b      	bne.n	800c700 <_printf_i+0x148>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	07de      	lsls	r6, r3, #31
 800c6ec:	d508      	bpl.n	800c700 <_printf_i+0x148>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	6861      	ldr	r1, [r4, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	bfde      	ittt	le
 800c6f6:	2330      	movle	r3, #48	; 0x30
 800c6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c700:	1b52      	subs	r2, r2, r5
 800c702:	6122      	str	r2, [r4, #16]
 800c704:	f8cd a000 	str.w	sl, [sp]
 800c708:	464b      	mov	r3, r9
 800c70a:	aa03      	add	r2, sp, #12
 800c70c:	4621      	mov	r1, r4
 800c70e:	4640      	mov	r0, r8
 800c710:	f7ff fee4 	bl	800c4dc <_printf_common>
 800c714:	3001      	adds	r0, #1
 800c716:	d14a      	bne.n	800c7ae <_printf_i+0x1f6>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b004      	add	sp, #16
 800c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f043 0320 	orr.w	r3, r3, #32
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	4833      	ldr	r0, [pc, #204]	; (800c7f8 <_printf_i+0x240>)
 800c72c:	2778      	movs	r7, #120	; 0x78
 800c72e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	061f      	lsls	r7, r3, #24
 800c738:	f851 6b04 	ldr.w	r6, [r1], #4
 800c73c:	d402      	bmi.n	800c744 <_printf_i+0x18c>
 800c73e:	065f      	lsls	r7, r3, #25
 800c740:	bf48      	it	mi
 800c742:	b2b6      	uxthmi	r6, r6
 800c744:	07df      	lsls	r7, r3, #31
 800c746:	bf48      	it	mi
 800c748:	f043 0320 	orrmi.w	r3, r3, #32
 800c74c:	6029      	str	r1, [r5, #0]
 800c74e:	bf48      	it	mi
 800c750:	6023      	strmi	r3, [r4, #0]
 800c752:	b91e      	cbnz	r6, 800c75c <_printf_i+0x1a4>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	f023 0320 	bic.w	r3, r3, #32
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	2310      	movs	r3, #16
 800c75e:	e7a7      	b.n	800c6b0 <_printf_i+0xf8>
 800c760:	4824      	ldr	r0, [pc, #144]	; (800c7f4 <_printf_i+0x23c>)
 800c762:	e7e4      	b.n	800c72e <_printf_i+0x176>
 800c764:	4615      	mov	r5, r2
 800c766:	e7bd      	b.n	800c6e4 <_printf_i+0x12c>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	6826      	ldr	r6, [r4, #0]
 800c76c:	6961      	ldr	r1, [r4, #20]
 800c76e:	1d18      	adds	r0, r3, #4
 800c770:	6028      	str	r0, [r5, #0]
 800c772:	0635      	lsls	r5, r6, #24
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	d501      	bpl.n	800c77c <_printf_i+0x1c4>
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	e002      	b.n	800c782 <_printf_i+0x1ca>
 800c77c:	0670      	lsls	r0, r6, #25
 800c77e:	d5fb      	bpl.n	800c778 <_printf_i+0x1c0>
 800c780:	8019      	strh	r1, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	4615      	mov	r5, r2
 800c788:	e7bc      	b.n	800c704 <_printf_i+0x14c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	602a      	str	r2, [r5, #0]
 800c790:	681d      	ldr	r5, [r3, #0]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	2100      	movs	r1, #0
 800c796:	4628      	mov	r0, r5
 800c798:	f7f3 fd2a 	bl	80001f0 <memchr>
 800c79c:	b108      	cbz	r0, 800c7a2 <_printf_i+0x1ea>
 800c79e:	1b40      	subs	r0, r0, r5
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ac:	e7aa      	b.n	800c704 <_printf_i+0x14c>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	47d0      	blx	sl
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d0ad      	beq.n	800c718 <_printf_i+0x160>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	079b      	lsls	r3, r3, #30
 800c7c0:	d413      	bmi.n	800c7ea <_printf_i+0x232>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e7a6      	b.n	800c71c <_printf_i+0x164>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d09d      	beq.n	800c718 <_printf_i+0x160>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	1a5b      	subs	r3, r3, r1
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dcf2      	bgt.n	800c7ce <_printf_i+0x216>
 800c7e8:	e7eb      	b.n	800c7c2 <_printf_i+0x20a>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f104 0619 	add.w	r6, r4, #25
 800c7f0:	e7f5      	b.n	800c7de <_printf_i+0x226>
 800c7f2:	bf00      	nop
 800c7f4:	0800d132 	.word	0x0800d132
 800c7f8:	0800d143 	.word	0x0800d143

0800c7fc <__sflush_r>:
 800c7fc:	898a      	ldrh	r2, [r1, #12]
 800c7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c802:	4605      	mov	r5, r0
 800c804:	0710      	lsls	r0, r2, #28
 800c806:	460c      	mov	r4, r1
 800c808:	d458      	bmi.n	800c8bc <__sflush_r+0xc0>
 800c80a:	684b      	ldr	r3, [r1, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dc05      	bgt.n	800c81c <__sflush_r+0x20>
 800c810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	dc02      	bgt.n	800c81c <__sflush_r+0x20>
 800c816:	2000      	movs	r0, #0
 800c818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d0f9      	beq.n	800c816 <__sflush_r+0x1a>
 800c822:	2300      	movs	r3, #0
 800c824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c828:	682f      	ldr	r7, [r5, #0]
 800c82a:	6a21      	ldr	r1, [r4, #32]
 800c82c:	602b      	str	r3, [r5, #0]
 800c82e:	d032      	beq.n	800c896 <__sflush_r+0x9a>
 800c830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	075a      	lsls	r2, r3, #29
 800c836:	d505      	bpl.n	800c844 <__sflush_r+0x48>
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	1ac0      	subs	r0, r0, r3
 800c83c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c83e:	b10b      	cbz	r3, 800c844 <__sflush_r+0x48>
 800c840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c842:	1ac0      	subs	r0, r0, r3
 800c844:	2300      	movs	r3, #0
 800c846:	4602      	mov	r2, r0
 800c848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c84a:	6a21      	ldr	r1, [r4, #32]
 800c84c:	4628      	mov	r0, r5
 800c84e:	47b0      	blx	r6
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	d106      	bne.n	800c864 <__sflush_r+0x68>
 800c856:	6829      	ldr	r1, [r5, #0]
 800c858:	291d      	cmp	r1, #29
 800c85a:	d82b      	bhi.n	800c8b4 <__sflush_r+0xb8>
 800c85c:	4a29      	ldr	r2, [pc, #164]	; (800c904 <__sflush_r+0x108>)
 800c85e:	410a      	asrs	r2, r1
 800c860:	07d6      	lsls	r6, r2, #31
 800c862:	d427      	bmi.n	800c8b4 <__sflush_r+0xb8>
 800c864:	2200      	movs	r2, #0
 800c866:	6062      	str	r2, [r4, #4]
 800c868:	04d9      	lsls	r1, r3, #19
 800c86a:	6922      	ldr	r2, [r4, #16]
 800c86c:	6022      	str	r2, [r4, #0]
 800c86e:	d504      	bpl.n	800c87a <__sflush_r+0x7e>
 800c870:	1c42      	adds	r2, r0, #1
 800c872:	d101      	bne.n	800c878 <__sflush_r+0x7c>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b903      	cbnz	r3, 800c87a <__sflush_r+0x7e>
 800c878:	6560      	str	r0, [r4, #84]	; 0x54
 800c87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c87c:	602f      	str	r7, [r5, #0]
 800c87e:	2900      	cmp	r1, #0
 800c880:	d0c9      	beq.n	800c816 <__sflush_r+0x1a>
 800c882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c886:	4299      	cmp	r1, r3
 800c888:	d002      	beq.n	800c890 <__sflush_r+0x94>
 800c88a:	4628      	mov	r0, r5
 800c88c:	f7ff fbea 	bl	800c064 <_free_r>
 800c890:	2000      	movs	r0, #0
 800c892:	6360      	str	r0, [r4, #52]	; 0x34
 800c894:	e7c0      	b.n	800c818 <__sflush_r+0x1c>
 800c896:	2301      	movs	r3, #1
 800c898:	4628      	mov	r0, r5
 800c89a:	47b0      	blx	r6
 800c89c:	1c41      	adds	r1, r0, #1
 800c89e:	d1c8      	bne.n	800c832 <__sflush_r+0x36>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c5      	beq.n	800c832 <__sflush_r+0x36>
 800c8a6:	2b1d      	cmp	r3, #29
 800c8a8:	d001      	beq.n	800c8ae <__sflush_r+0xb2>
 800c8aa:	2b16      	cmp	r3, #22
 800c8ac:	d101      	bne.n	800c8b2 <__sflush_r+0xb6>
 800c8ae:	602f      	str	r7, [r5, #0]
 800c8b0:	e7b1      	b.n	800c816 <__sflush_r+0x1a>
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	e7ad      	b.n	800c818 <__sflush_r+0x1c>
 800c8bc:	690f      	ldr	r7, [r1, #16]
 800c8be:	2f00      	cmp	r7, #0
 800c8c0:	d0a9      	beq.n	800c816 <__sflush_r+0x1a>
 800c8c2:	0793      	lsls	r3, r2, #30
 800c8c4:	680e      	ldr	r6, [r1, #0]
 800c8c6:	bf08      	it	eq
 800c8c8:	694b      	ldreq	r3, [r1, #20]
 800c8ca:	600f      	str	r7, [r1, #0]
 800c8cc:	bf18      	it	ne
 800c8ce:	2300      	movne	r3, #0
 800c8d0:	eba6 0807 	sub.w	r8, r6, r7
 800c8d4:	608b      	str	r3, [r1, #8]
 800c8d6:	f1b8 0f00 	cmp.w	r8, #0
 800c8da:	dd9c      	ble.n	800c816 <__sflush_r+0x1a>
 800c8dc:	6a21      	ldr	r1, [r4, #32]
 800c8de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8e0:	4643      	mov	r3, r8
 800c8e2:	463a      	mov	r2, r7
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	47b0      	blx	r6
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	dc06      	bgt.n	800c8fa <__sflush_r+0xfe>
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	e78e      	b.n	800c818 <__sflush_r+0x1c>
 800c8fa:	4407      	add	r7, r0
 800c8fc:	eba8 0800 	sub.w	r8, r8, r0
 800c900:	e7e9      	b.n	800c8d6 <__sflush_r+0xda>
 800c902:	bf00      	nop
 800c904:	dfbffffe 	.word	0xdfbffffe

0800c908 <_fflush_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	690b      	ldr	r3, [r1, #16]
 800c90c:	4605      	mov	r5, r0
 800c90e:	460c      	mov	r4, r1
 800c910:	b913      	cbnz	r3, 800c918 <_fflush_r+0x10>
 800c912:	2500      	movs	r5, #0
 800c914:	4628      	mov	r0, r5
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	b118      	cbz	r0, 800c922 <_fflush_r+0x1a>
 800c91a:	6a03      	ldr	r3, [r0, #32]
 800c91c:	b90b      	cbnz	r3, 800c922 <_fflush_r+0x1a>
 800c91e:	f7ff f945 	bl	800bbac <__sinit>
 800c922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0f3      	beq.n	800c912 <_fflush_r+0xa>
 800c92a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c92c:	07d0      	lsls	r0, r2, #31
 800c92e:	d404      	bmi.n	800c93a <_fflush_r+0x32>
 800c930:	0599      	lsls	r1, r3, #22
 800c932:	d402      	bmi.n	800c93a <_fflush_r+0x32>
 800c934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c936:	f7ff fb84 	bl	800c042 <__retarget_lock_acquire_recursive>
 800c93a:	4628      	mov	r0, r5
 800c93c:	4621      	mov	r1, r4
 800c93e:	f7ff ff5d 	bl	800c7fc <__sflush_r>
 800c942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c944:	07da      	lsls	r2, r3, #31
 800c946:	4605      	mov	r5, r0
 800c948:	d4e4      	bmi.n	800c914 <_fflush_r+0xc>
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	059b      	lsls	r3, r3, #22
 800c94e:	d4e1      	bmi.n	800c914 <_fflush_r+0xc>
 800c950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c952:	f7ff fb77 	bl	800c044 <__retarget_lock_release_recursive>
 800c956:	e7dd      	b.n	800c914 <_fflush_r+0xc>

0800c958 <__swhatbuf_r>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	460c      	mov	r4, r1
 800c95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c960:	2900      	cmp	r1, #0
 800c962:	b096      	sub	sp, #88	; 0x58
 800c964:	4615      	mov	r5, r2
 800c966:	461e      	mov	r6, r3
 800c968:	da0d      	bge.n	800c986 <__swhatbuf_r+0x2e>
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c970:	f04f 0100 	mov.w	r1, #0
 800c974:	bf0c      	ite	eq
 800c976:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c97a:	2340      	movne	r3, #64	; 0x40
 800c97c:	2000      	movs	r0, #0
 800c97e:	6031      	str	r1, [r6, #0]
 800c980:	602b      	str	r3, [r5, #0]
 800c982:	b016      	add	sp, #88	; 0x58
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	466a      	mov	r2, sp
 800c988:	f000 f848 	bl	800ca1c <_fstat_r>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dbec      	blt.n	800c96a <__swhatbuf_r+0x12>
 800c990:	9901      	ldr	r1, [sp, #4]
 800c992:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c996:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c99a:	4259      	negs	r1, r3
 800c99c:	4159      	adcs	r1, r3
 800c99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9a2:	e7eb      	b.n	800c97c <__swhatbuf_r+0x24>

0800c9a4 <__smakebuf_r>:
 800c9a4:	898b      	ldrh	r3, [r1, #12]
 800c9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9a8:	079d      	lsls	r5, r3, #30
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	d507      	bpl.n	800c9c0 <__smakebuf_r+0x1c>
 800c9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	6163      	str	r3, [r4, #20]
 800c9bc:	b002      	add	sp, #8
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	ab01      	add	r3, sp, #4
 800c9c2:	466a      	mov	r2, sp
 800c9c4:	f7ff ffc8 	bl	800c958 <__swhatbuf_r>
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff fbb5 	bl	800c13c <_malloc_r>
 800c9d2:	b948      	cbnz	r0, 800c9e8 <__smakebuf_r+0x44>
 800c9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d8:	059a      	lsls	r2, r3, #22
 800c9da:	d4ef      	bmi.n	800c9bc <__smakebuf_r+0x18>
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	e7e3      	b.n	800c9b0 <__smakebuf_r+0xc>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	6020      	str	r0, [r4, #0]
 800c9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	9b00      	ldr	r3, [sp, #0]
 800c9f4:	6163      	str	r3, [r4, #20]
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	6120      	str	r0, [r4, #16]
 800c9fa:	b15b      	cbz	r3, 800ca14 <__smakebuf_r+0x70>
 800c9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 f81d 	bl	800ca40 <_isatty_r>
 800ca06:	b128      	cbz	r0, 800ca14 <__smakebuf_r+0x70>
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	431d      	orrs	r5, r3
 800ca18:	81a5      	strh	r5, [r4, #12]
 800ca1a:	e7cf      	b.n	800c9bc <__smakebuf_r+0x18>

0800ca1c <_fstat_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d07      	ldr	r5, [pc, #28]	; (800ca3c <_fstat_r+0x20>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	4611      	mov	r1, r2
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	f7f5 fb56 	bl	80020da <_fstat>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d102      	bne.n	800ca38 <_fstat_r+0x1c>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	b103      	cbz	r3, 800ca38 <_fstat_r+0x1c>
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	bd38      	pop	{r3, r4, r5, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20004dcc 	.word	0x20004dcc

0800ca40 <_isatty_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	; (800ca5c <_isatty_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f7f5 fb55 	bl	80020fa <_isatty>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_isatty_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_isatty_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20004dcc 	.word	0x20004dcc

0800ca60 <_sbrk_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d06      	ldr	r5, [pc, #24]	; (800ca7c <_sbrk_r+0x1c>)
 800ca64:	2300      	movs	r3, #0
 800ca66:	4604      	mov	r4, r0
 800ca68:	4608      	mov	r0, r1
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	f7f5 fb5e 	bl	800212c <_sbrk>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_sbrk_r+0x1a>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_sbrk_r+0x1a>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	20004dcc 	.word	0x20004dcc

0800ca80 <_init>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr

0800ca8c <_fini>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr
